IF NOT EXISTS ( SELECT * FROM   sysobjects where name = 'config' and type = 'U' )
BEGIN

	CREATE TABLE [vdt].[config](
	[config_id] [int] IDENTITY(1,1) NOT NULL,
	[db_version] [int] NOT NULL,
	[updated_on] [date] NOT NULL,
 CONSTRAINT [PK_vdt.config] PRIMARY KEY CLUSTERED 
	(
	[config_id] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY]

	INSERT INTO vdt.config (db_version,updated_on) values(0,getdate())
END

--------------------------------------------------- Version 2 update ------------------------------------------------------------------

declare @cur_version int = (select max(db_version) from vdt.config)
IF @cur_version >= 2
begin
  print 'Skipping database update to v2; already at version ' + cast(@cur_version as nvarchar)
  set noexec on
end


begin transaction Version2;
go

set xact_abort on;
set nocount on;

INSERT INTO vdt.config([db_version],[updated_on])
VALUES(2,  getdate())

GO

alter  procedure [vdt].[sp_get_vdt_data]
@dataset_id int, 
@benchmark_id int=null,
@user_id int,
@attributeIds vdt.IdFilterTableType READONLY

AS 
BEGIN 
     SET NOCOUNT ON 

SELECT
	V.[attr_id]
    ,UF.[format]
	,UF.[unit]
    ,coalesce(B.value, V.value) as base_value
	,BM.value as benchmark
    ,coalesce(C.new_value, V.value) as override_value
  FROM [vdt].[value] V
  inner join vdt.attribute A on V.attr_id = A.attr_id
  inner join vdt.dataset DS on V.dataset_id = DS.dataset_id
  left join vdt.scenario DSS on DS.dataset_id = DSS.view_dataset_id
  left join vdt.scenario_change C on DSS.scenario_id = C.scenario_id and A.attr_id = C.attr_id
  left join vdt.unit_format UF on A.unit = UF.unit
  left join vdt.value B on V.attr_id = B.attr_id and B.dataset_id = DSS.base_dataset_id
  left join vdt.value BM on V.attr_id = BM.attr_id and BM.dataset_id = @benchmark_id
  WHERE V.dataset_id = @dataset_id
  AND (A.attr_id IN (select id from @attributeIds))
  AND (select sec_level from vdt.[user] where [user_id] = @user_id) >=  A.sec_level
  

END 
 
GO

alter procedure [vdt].[sp_get_mine_total_cost_chart]
  @site_name nvarchar(100),
  @dataset_id int,
  @user_id int
as
begin
  declare @basecase_name nvarchar(100);
  declare @scenario_name nvarchar(100);
  
  select @basecase_name=coalesce(B.dataset_name, V.dataset_name), @scenario_name=V.dataset_name
  from vdt.dataset V left join vdt.scenario S on S.view_dataset_id=V.dataset_id
  left join vdt.dataset B on S.base_dataset_id=B.dataset_id
  where V.dataset_id=@dataset_id;

  with totals as (
    select [function] as obj, attribute as attr, value, base_value
    from vdt.data
    where attribute in ('Fixed cost', 'Variable cost')
    and activity is null
    and org_group='Mines' and location=@site_name
	and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
    and dataset_id=@dataset_id)
    
  ,lineitems as (
	select *
    from vdt.data
    where attribute in ('Fixed cost', 'Variable cost')
    and cost_type is null and equipment is null and (activity is not null or [function]='Overheads')
	and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
    and dataset_id=@dataset_id and org_group='Mines' and location=@site_name)
  
  ,subtotals as (
	  select [function] as obj, attribute as attr, sum(value) as value, sum(base_value) as base_value
	  from lineitems group by [function], attribute)

  ,sna as (
  select T.obj, T.attr, T.value - S.value as value, T.base_value - S.base_value as base_value
  from subtotals S inner join totals T on S.obj=T.obj and S.attr=T.attr
  where T.obj <> 'Overheads')

  ,pivot_data as (
    select
      coalesce(activity, 'Mine Overheads') as [group],
      attribute as component,
      value as value,
	  base_value
    from lineitems
    union all
    select
	case S.obj
	  when 'Mining' then 'Mine Svc & Ovh'
	  when 'Processing' then 'Proc Svc & Ovh'
	end as [group],
  	S.attr as component,
  	value as value,
	base_value
    from sna S)

  ,data as (
    select @basecase_name as series, [group], [component], [base_value] as value,
	  case when [component]='Fixed cost' then 1 else 2 end as stack_order,
	  case when [component]='Fixed cost' then '#000' else '#aaa' end as fill_color, '' as fill_pattern
	from pivot_data
	union all
    select @scenario_name as series, [group], [component], [value] as value,
	  case when [component]='Fixed cost' then 1 else 2 end as stack_order,
	  case when [component]='Fixed cost' then '#ffa500' else '#ffcb6a' end as fill_color, '' as fill_pattern
	from pivot_data)

  ,grouped as (
	select series, case [group]
	  when 'Drill' then 'Drill & Blast'
	  when 'Blast' then 'Drill & Blast'
	  when 'Load' then 'Load & Haul'
	  when 'Haul' then 'Load & Haul'
	  when 'OFH' then 'Processing'
	  when 'OFR' then 'Processing'
	  when 'TLO' then 'Processing'
	  when 'Proc Svc & Ovh' then 'Processing'
	  else [group]
	end as [group],
	component, value, stack_order, fill_color, fill_pattern
	from data)

  select series, [group], [component], sum(value) as value, stack_order, fill_color, fill_pattern
  from grouped group by series, [group], component, stack_order, fill_color, fill_pattern
  order by
    case when [series]=@basecase_name then 1 else 2 end,
    case [group]
      when 'Drill & Blast' then 1
       when 'Load & Haul' then 2
       when 'Mine Svc & Ovh' then 3
       when 'Beneficiation' then 4
       when 'Processing' then 5
       else 6
    end
end
go

alter procedure [vdt].[sp_get_mine_cost_waterfall]
  @site_name nvarchar(100),
  @dataset_id int,
  @user_id int
as
begin
  declare @basecase_name nvarchar(100);
  declare @scenario_name nvarchar(100);
  
  select @basecase_name=coalesce(B.dataset_name, V.dataset_name), @scenario_name=V.dataset_name
  from vdt.dataset V left join vdt.scenario S on S.view_dataset_id=V.dataset_id
  left join vdt.dataset B on S.base_dataset_id=B.dataset_id
  where V.dataset_id=@dataset_id;
  
  declare @base_tons float;
  declare @scen_tons float;
  select @scen_tons=value, @base_tons=base_value from vdt.data where org_group='Mines' and location=@site_name
   and [function] is null and attribute='OOR'
   and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
   and dataset_id=@dataset_id;

  if @base_tons = 0 set @base_tons = 1;
  if @scen_tons = 0 set @scen_tons = 1; -- charts won't make sense anyway, so avoid an error message...

  with totals as (
    select [function] as obj, attribute as attr, value, base_value
    from vdt.data
    where attribute in ('Fixed cost', 'Variable cost')
    and activity is null
    and org_group='Mines' and location=@site_name
	and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
    and dataset_id=@dataset_id)
    
  ,lineitems as (
	select *
    from vdt.data
    where attribute in ('Fixed cost', 'Variable cost')
    and cost_type is null and equipment is null and (activity is not null or [function]='Overheads')
	and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
    and dataset_id=@dataset_id and org_group='Mines' and location=@site_name)
  
  ,subtotals as (
	  select [function] as obj, attribute as attr, sum(value) as value, sum(base_value) as base_value
	  from lineitems group by [function], attribute)

  ,sna as (
  select T.obj, T.attr, T.value - S.value as value, T.base_value - S.base_value as base_value
  from subtotals S inner join totals T on S.obj=T.obj and S.attr=T.attr
  where T.obj <> 'Overheads')

  ,pivot_data as (
    select
      coalesce(activity, 'Mine Overheads') as [group],
      attribute as component,
      value as value,
	  base_value
    from lineitems
    union all
    select
	case S.obj
	  when 'Mining' then 'Mine Svc/Ovh'
	  when 'Processing' then 'Proc Svc/Ovh'
	end as [group],
  	S.attr as component,
  	value as value,
	base_value
    from sna S)

  ,grouped as (
	select case [group]
	  when 'Drill' then 'D&B'
	  when 'Blast' then 'D&B'
	  when 'Load' then 'L&H'
	  when 'Haul' then 'L&H'
	  when 'OFH' then 'Proc.'
	  when 'OFR' then 'Proc.'
	  when 'TLO' then 'Proc.'
	  when 'Proc Svc/Ovh' then 'Proc.'
	  when 'Mine Overheads' then 'Mine Ovh.'
	  when 'Beneficiation' then 'Bene.'
	  else [group]
	end as [group],
	value - base_value as delta
	from pivot_data)

  ,agg as (
	select [group], sum([delta]) / @base_tons as [delta] from grouped group by [group]
	union all
	select 'Vol. Dil.' as [group], (sum(value)/@scen_tons - sum(value)/@base_tons) as [delta] from totals)
  
  ,withidx as (
    select row_number() over (order by case [group]
         when 'D&B' then 1
         when 'L&H' then 2
         when 'Mine Svc/Ovh' then 3
         when 'Bene.' then 4
         when 'Proc.' then 5
		 when 'Vol. Dil.' then 999
         else 6
       end) as num, [group], [delta]
	from agg
	)

  ,stacked as (
    select cast(0 as int) as num, cast('Base' as nvarchar) as [group], cast(0 as float) as base, sum(base_value)/@base_tons as height, sum(base_value)/@base_tons as cum from totals
	union all
	select cast(R.num as int), cast(R.[group] as nvarchar) as [group],
	  case when delta < 0 then P.cum + delta else P.cum end as base,
	  abs(delta) as height,
	  P.cum + delta as cum
	from withidx R inner join stacked P on P.num = R.num-1)

  ,pivoted as (
    select [num], [group],
      case when [num]=0 then height else 0 end as total,
	  base as transparent, 
	  case when num=0 then 0 when base=cum then height else 0 end as decrease, 
	  case when num=0 then 0 when base=cum then 0 else height end as increase
    from stacked
    union all
	select 999 as num, 'Scenario' as [group], sum(value)/@scen_tons as total, 0 as transparent, 0 as decrease, 0 as increase from totals)

  select 'Change in tonnes' as series, [group], 'Total' as [component], total as value, '#0000c0' as fill_color, '' as fill_pattern, 1 as stack_order from pivoted
  union all
  select 'Change in tonnes' as series, [group], 'Transparent' as [component], transparent as value, 'rgba(0,0,0,0)' as fill_color, '' as fill_pattern, 2 as stack_order from pivoted
  union all
  select 'Change in tonnes' as series, [group], 'Increase' as [component], increase as value, '#008800' as fill_color, '' as fill_pattern, 3 as stack_order from pivoted
  union all
  select 'Change in tonnes' as series, [group], 'Decrease' as [component], decrease as value, '#880000' as fill_color, '' as fill_pattern, 4 as stack_order from pivoted
end
go

alter procedure [vdt].[sp_get_system_kpis]
  @dataset_id int,
  @user_id int
as
begin
  set nocount on;

  select
    [attribute] as KPI,
    case when attribute='EBITDA Improvement' then null when base_value=0 then 0 else value/base_value-1 end as [% Change:{0:2%}],
    value as [Scenario:{0:4,1000000s}],
    base_value as [Baseline:{0:4,1000000s}]
  from vdt.data where org_group='WAIO' and attribute in ('EBITDA', 'EBITDA Improvement')
  and dataset_id=@dataset_id
  AND (select sec_level from vdt.[user] where [user_id] = @user_id) >=  attribute_sec_level;
end
go

alter procedure [vdt].[sp_get_site_data]
  @site nvarchar(100),
  @dataset_id int,
  @user_id int
as
begin
  set nocount on;

  if exists (select * from vdt.data where org_group='Mines' and location=@site)
  begin
    -- it's a mining location
	with allattrs as (
	select 
	  coalesce([function], 'Mining') as tab_name, coalesce([activity], [function], 'Mining') as panel, 'ActivityTemplate' as template,
	  org_group, [function], activity, workstream, location, equipment_type, equipment, cost_type, product, attr_id, attribute, attribute_unit,
	  attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	from vdt.data where org_group='Mines' and location=@site and dataset_id=@dataset_id
	and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
    and ([function] is not null or attribute_is_kpi=0) and (attribute_is_kpi=1 or attribute_is_lever=1))
	,customattrs as (
	select [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	  org_group, [function], activity, workstream, location, equipment_type, 'Operations Costs' as equipment, cost_type, product, attr_id, attribute, attribute_unit,
	  attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	from allattrs where [activity]='Blast' and attribute_is_cost=1
	union all
	select [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	  org_group, [function], activity, workstream, location, equipment_type, null as equipment, cost_type, product, attr_id, attribute, attribute_unit,
	  attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	from allattrs where [activity]='Load & Haul' and attribute_is_cost=1
    union all
    select tab_name, panel, 'DrillDownTemplate' as template,
      org_group, [function], activity, workstream, null as location, case when equipment_type=cost_type then null else equipment_type end as equipment_type,
	  equipment, cost_type, product, attr_id, attribute, attribute_unit,
      attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
    from allattrs where [activity] in ('Overheads', 'Non Allocated Cost') or [function] = 'Overheads'
	)
	,unioned as (
	select * from customattrs
	union all
	select * from allattrs where attr_id not in (select attr_id from customattrs))

	select * from unioned
	order by
	case coalesce([function], 'Mining')
	  when 'Mining' then 1
	  when 'Processing' then 2
	  else 3
	end,
	case coalesce([activity], 'Mining')
	  when 'Mining' then 1
	  when 'Drill' then 10
	  when 'Blast' then 20
	  when 'Load & haul' then 30
	  when 'Load' then 40
	  when 'Haul' then 50
	  when 'Ore Sources' then 60
	  when 'Beneficiation' then 70
	  when 'OFH' then 80
	  when 'OFR' then 90
	  when 'TLO' then 100
	  else 999
	end, [function], [activity]
  end
  else if @site='Rail'
  begin
    with allattrs as (
	  select 
	    [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type, equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from vdt.data where org_group=@site and dataset_id=@dataset_id
	  and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
	  and (attribute_is_kpi=1 or attribute_is_lever=1)
	)
	,customattrs as (
	  select 
	    [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type,
		case when location like 'CD%' then 'Car Dumpers' else location end as equipment,
		cost_type, product, attr_id,
		case when location like 'CD%' then location + ' queue to dump' else attribute end as attribute,
		attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity]='Rail'
	  union all
	  select 
	    [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type, coalesce(equipment, equipment_type, workstream) as equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from vdt.data where org_group=@site and dataset_id=@dataset_id
	  and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
	  and (attribute_is_kpi=1 or attribute_is_lever=1)
	  and [function]='Maintenance'
	  union all
	  select 
	    [function] as tab_name, [activity] as panel, 'DrillDownTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type, equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from vdt.data where org_group=@site and dataset_id=@dataset_id
	  and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
	  and (attribute_is_kpi=1 or attribute_is_lever=1)
	  and [function]='Production'
	)
	,unioned as (
	select * from customattrs
	union all
	select * from allattrs where attr_id not in (select attr_id from customattrs))

	select * from unioned
	order by
	case coalesce([function], 'Rail')
	  when 'Mainline' then 1
	  when 'Shuttle' then 2
	  else 3
	end, [function], [activity]
  end
  else if @site='Port'
  begin
    with allattrs as (
	  select 
	    [function] as tab_name, coalesce([activity], [function]) as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type, equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from vdt.data where org_group=@site and dataset_id=@dataset_id
	  and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
	  and (attribute_is_lever=1 or attribute_is_kpi=1)
	)
	,customattrs as (
	  select 
	    [function] as tab_name, [location] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type,
		equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity]='Outflow'
	  union all
	  select 
	    [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type,
		workstream as equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity] in ('Overheads') and [function] in ('Production', 'Marine')
	  union all
	  select 
	    [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type,
		location as equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity] in ('Operations') and [function]='Production'
	  union all
	  select 
	    [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type,
		equipment_type as equipment, attribute as cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity] in ('Demurrage') and [function]='Marine'
	)
	,unioned as (
	select * from customattrs
	union all
	select * from allattrs where attr_id not in (select attr_id from customattrs))

	select * from unioned
	order by
	case coalesce([function], 'Rail')
	  when 'Production' then 1
	  when 'Marine' then 2
	  when 'Maintenance' then 3
	  else 4
	end,
	case [panel]
	  when 'Inflow' then 1
	  when 'North Yard' then 10
	  when 'South Yard' then 20
	  when 'East Yard' then 30
	  when 'West Yard' then 40
	  else 999
	end, [function], [activity]
  end
  else
  begin
    -- it's functions
	select 
      [function] as tab_name, [activity] as panel, 'DrillDownTemplate' as template,
	  org_group, [function], activity, workstream, location, equipment_type, equipment, cost_type, product, attr_id, attribute, attribute_unit,
	  attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	from vdt.data where org_group=@site and dataset_id=@dataset_id
	and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
  end
end

GO

commit transaction Version2
go

PRINT 'Database has been updated successfully to version 2'
set noexec off;


--------------------------------------------------- Version 3 update ------------------------------------------------------------------

declare @cur_version int = (select max(db_version) from vdt.config)
IF @cur_version >= 3
begin
  print 'Skipping database update to v3; already at version ' + cast(@cur_version as nvarchar)
  set noexec on
end

begin transaction Version3;
go

set xact_abort on;
set nocount on;

INSERT INTO vdt.config([db_version],[updated_on]) VALUES(3,  getdate())
go

alter procedure staging.sp_import_qerent_model_structure (
    @filename nvarchar(256),
	@data staging.QerentStructureType readonly)
as
begin
  set nocount on

  -- debugging purposes only
  if object_id(N'staging.temp_qerent_import', N'U') is not null
    drop table staging.temp_qerent_import;
  select * into staging.temp_qerent_import from @data;
  -- end debugging

  -- Set up the entry in the model table, if it doesn't already exist.
  if left(@filename, 1) = '_' set @filename = '_debug'
  declare @model_id int = null
  declare @should_copy_data bit = 0
  select @model_id=model_id from vdt.model where [filename]=@filename
  if @model_id is null
  begin
    insert into vdt.model ([filename], [file_date]) values (@filename, current_timestamp)
	set @model_id=SCOPE_IDENTITY()
  end
  else
  begin
    update vdt.model set file_date=current_timestamp where model_id=@model_id
  end;
  set @should_copy_data = 1;

  -- This lengthy query sets up a view of how the attributes from Qerent should be mapped into the vdt.attributes table.
  -- The result of this will get stored in #qerent_attrs later.
  with QAttrs as (
  select * from @data)
  
  ,DrillFleets as (
  select [Object Path], [O2] as Mine, [O5] as Fleet from QAttrs where O1='Mines' and O4='Drill' and [Attribute]='Target tonnes')
  
  ,DrillProd as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream, F.Mine as location,
    'Drills' as equipment_type, F.Fleet as equipment, null as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from DrillFleets F inner join QAttrs A on F.[Object Path]=A.[Object Path]
  )--where A.[Attribute] not in ('Headroom', 'Cost', 'Fixed cost', 'Variable cost'))
  
  ,DrillFleetCostLevers as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity,
    case when substring([O7], 1, 11)='Maintenance' then 'Maintenance' else 'Operations' end as workstream,
    F.Mine as location, 'Drills' as equipment_type, F.Fleet as equipment, coalesce([O8], [O7]) as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A inner join DrillFleets F on substring(A.[Object Path], 1, len(F.[Object Path]) + 7) = F.[Object Path] + '.Costs.'
  where left(A.[Type],1)='C')
  
  ,DrillOperationsCostLevers as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream,
    A.[O2] as location, null as equipment_type, null as equipment, coalesce([O7], [O6]) as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Drill' and [O5]='Operations' and [O6] is not null
  and left(A.[Type],1) = 'C'
  and (A.[O6] <> 'Fuels & Oils' or A.[O7] is not null))
  
  ,DrillSummary as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream,
    A.[O2] as location, null as equipment_type, null as equipment, null as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Drill' and [O5] is null
  and [Attribute] not in ('Use of Headroom'))
  
  ,DrillStock as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream,
    A.[O2] as location, 'Stockpile' as equipment_type, 'Drill Stock' as equipment, null as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Drill' and [O5]='Drill Inventory'
  )
  
  ,Blast as (
  select 'Mines' as org_group, 'Mining' as [function], 'Blast' as activity, 'Operations' as workstream,
    A.[O2] as location,
    case when [O5]='Blast Inventory' then 'Stockpile' else null end as equipment_type,
    case when [O5]='Blast Inventory' then [O5] else null end as equipment,
    [O6] as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Blast'
  )

  ,LoadHaul as (
  select 'Mines' as org_group, 'Mining' as [function],
    case when [O5] is null or [O5]='Operations' then 'Load & Haul' else [O5] end as activity,
	'Operations' as workstream,
    A.[O2] as location,
    case when [O5]='Load' then left([O6], len([O6])-1) when [O6] is null then null when [O5]='Haul' then 'Truck' else null end as equipment_type,
    case when [O5]='Load' then [O7] else [O6] end as equipment,
    case [O5] when 'Operations' then [O6] when 'Load' then [O9] else [O8] end as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Load & haul'
  )
  
  ,MineServicesAndOverheads as (
  select 'Mines' as org_group, 'Mining' as [function],
    [O4] as activity,
	case when [O4] is null then null when [O5]='Operations' or [O4]='Overheads' then 'Operations' else 'Support' end as workstream,
    A.[O2] as location,
    case when [O4] is null then null when [O5]='Operations' then null when [O4]='Overheads' then [O5] else 'Support' end as equipment_type,
    case when [O5]='Operations' then null when [O4]='Overheads' then [O6] else [O5] end as equipment,
    case when [O4]='Overheads' then [O7] else [O6] end as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Mining' and ([O4] is null or [O4] not in ('Drill', 'Blast', 'Load & haul'))
  )
  
  ,OverheadsMines as (
  select 'Mines' as org_group, 'Mining' as [function],
    'Overheads' as activity,
	coalesce([O4], 'Operations') as workstream,
    null as location,
    null as equipment_type,
    [O3] as equipment,
    coalesce([O5], [O4], [O3]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O2]='Overheads Mines'
  )

  ,ProcessingPlants as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	'Operations' as workstream,
    [O2] as location,
    'Plant' as equipment_type,
    [O5] as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O6] is null and [O4] not in ('Non Allocated Cost', 'Overheads')
  )

  ,ProcessingPlantCosts as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	case when [O8]='Maintenance' then 'Maintenance' else 'Operations' end as workstream,
    [O2] as location,
    'Plant' as equipment_type,
    [O7] as equipment,
    coalesce([O9], [O8]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O6]='Costs'
  )
  
  ,ProcessingNonAllocatedAndOverheads as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	[O5] as workstream,
    [O2] as location,
    case when [O7] is not null then [O6] else null end as equipment_type,
    null as equipment,
    coalesce([O7], [O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O4] in ('Non Allocated Cost', 'Overheads')
  )

  ,ProcessingTopLevel as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	null as workstream,
    [O2] as location,
    null as equipment_type,
    null as equipment,
    coalesce([O7], [O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O4] is null
  )
  
  ,MinesOverheads as (
  select 'Mines' as org_group, 'Overheads' as [function],
    [O4] as activity,
	case when [O5]='Maintenance' then [O5] else 'Operations' end as workstream,
    [O2] as location,
    case when [O5]='Maintenance' then null else [O5] end as equipment_type,
    null as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 3) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Overheads'
  )

  ,MinesTopLevel as (
  select 'Mines' as org_group, null as [function],
    null as activity,
	null as workstream,
    [O2] as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3] is null
  )
   
  ,RailVolume as (
  select
    'Rail' as org_group,
	case [O2] when 'Mines OOR' then 'Mainline' when 'Mines OFH' then 'Shuttle' else [O2] end as [function],
    'Rail' as activity,
	'Operations' as workstream,
    case when [O3]='Virtual Stockpile' then null else coalesce([O4], [O3]) end as location,
    null as equipment_type,
    null as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and substring(A.[Type], 1, 1) <> 'C' and [O2] is not null
  )

  ,RailProdCosts as (
  select
    'Rail' as org_group,
	case when [O2] in ('Mainline', 'Shuttle') then 'Production' else [O2] end as [function],
    case when [O2] in ('Mainline', 'Shuttle') then 'Operations' else [O3] end as activity,
	coalesce([O4], 'Direct Cost') as workstream,
    case when [O2] in ('Mainline', 'Shuttle') then coalesce([O3], [O2]) else null end as location,
    null as equipment_type,
    null as equipment,
    coalesce([O6], [O5], 'Diesel') as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and substring(A.[Type], 1, 1) = 'C' and [O2] not in ('Maintenance', 'Overheads') and [O2] is not null
  )

  ,RailOverheads as (
  select
    'Rail' as org_group,
	[O2] as [function],
    [O3] as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    coalesce([O5], [O4]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and [O2]='Overheads'
  )

  ,RailMaintenance as (
  select
    'Rail' as org_group,
	[O2] as [function],
    [O3] as activity,
	case when [o6] is null then 'Supporting Cost' else [o5] end as workstream,
    null as location,
    case when [O4] <> 'Overheads' and [o5] is not null then [o4] else null end as equipment_type,
    null as equipment,
    coalesce([O6], [O5], [O4]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and [O2]='Maintenance'
  )

  ,RailTopLevel as (
  select
    [O1] as org_group,
	null as [function],
    null as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and [O2] is null
  )

  ,PortInflow as (
  select
    [O1] as org_group,
	'Production' as [function],
    [O2] as activity,
	'Operations' as workstream,
    [O4] as location,
    case when [O3] is null then null else 'Car Dumper' end as equipment_type,
    [O3] as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Inflow'
  )

  ,PortOutflow as (
  select
    [O1] as org_group,
	'Production' as [function],
    [O3] as activity,
	'Operations' as workstream,
    coalesce([O6], [O4]) as location,
    left([O7], len([o7])-1) as equipment_type,
    [O8] as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O3]='Outflow'
  )

  ,PortProductionCosts as (
  select
    [O1] as org_group,
	[O2] as [function],
    [O4] as activity,
	case when [O5]='Water' then 'Other' when [O6] is null then [O4] else [O5] end as workstream,
    [O3] as location,
    left([O7], len([o7])-1) as equipment_type,
    [O8] as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O3]<>'Outflow' and [O2]='Production'
  )

  ,PortSiteMaintenance as (
  select
    [O1] as org_group,
	[O2] as [function],
    case when [O4]='Overheads' then 'Overheads' else 'Maintenance' end as activity,
	case when [O4]='Overheads' then [O5] else 'Maintenance' end as workstream,
    [O3] as location,
    case when [O4]='Overheads' then null else left([O4], len([O4])-1) end as equipment_type,
    case when [O4]='Overheads' then null else [O5] end as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Maintenance' and [O3] in ('Nelson Point', 'Finucane Island')
  )

  ,PortMaintenance as (
  select
    [O1] as org_group,
	[O2] as [function],
    [O3] as activity,
	case when [O5] is null then 'Operations' when [O4]='Overheads' then [O5] when [O4] in ('Nelson Point', 'Finucane Island') then 'Operations' when [O4]='Other' then null else [O4] end as workstream,
    case when [O4] in ('Nelson Point', 'Finucane Island') then [O4] else null end as location,
    null as equipment_type,
    null as equipment,
    coalesce([O6], [O5], [O4]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Maintenance' and [O3] not in ('Nelson Point', 'Finucane Island')
  )

  ,PortMarine as (
    select
    [O1] as org_group,
	[O2] as [function],
    [O3] as activity,
	case when [O5] is null then 'Operations' else [O4] end as workstream,
    null as location,
    case when [O3]='Demurrage' and [O4]<>'Despatch' then [O4] else null end as equipment_type,
    null as equipment,
    case when [O3]='Demurrage' then 'Demurrage' else coalesce([O5], [O4]) end as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Marine'
  )

  ,PortOverheads as (
  select
    [O1] as org_group,
	[O2] as [function],
    [O3] as activity,
	'Operations' as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    [O4] as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Overheads'
  )

  ,PortTopLevel as (
  select
    [O1] as org_group,
	null as [function],
    null as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2] is null
  )

  ,FunctionsCosts as (
  select
    'WAIO' as org_group,
	[O1] as [function],
    [O2] as activity,
	[O3] as workstream,
    [O4] as location,
    [O5] as equipment_type,
    [O6] as equipment,
    [O7] as cost_type,
	[O8] as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 3) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1] in ('Functions', 'Logistic & Infrastructure', 'Operations Infrastructure', 'Other')
  )

  ,Revenue as (
  select 'WAIO' as org_group, 'Revenue' as [function],
    'Sales' as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	[O2] as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 3) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='EBITDA'
  )

  ,AllAttrs as (
    select * from DrillProd
    union all select * from DrillFleetCostLevers
    union all select * from DrillOperationsCostLevers
    union all select * from DrillSummary
    union all select * from DrillStock
    union all select * from Blast
	union all select * from LoadHaul
	union all select * from MineServicesAndOverheads
	union all select * from ProcessingPlants
	union all select * from ProcessingPlantCosts
	union all select * from ProcessingNonAllocatedAndOverheads
	union all select * from ProcessingTopLevel
	union all select * from MinesOverheads
	union all select * from MinesTopLevel
	union all select * from OverheadsMines
	union all select * from RailVolume
	union all select * from RailProdCosts
	union all select * from RailOverheads
	union all select * from RailMaintenance
	union all select * from RailTopLevel
	union all select * from PortInflow
	union all select * from PortOutflow
	union all select * from PortProductionCosts
	union all select * from PortSiteMaintenance
	union all select * from PortMaintenance
	union all select * from PortMarine
	union all select * from PortOverheads
	union all select * from PortTopLevel
	union all select * from FunctionsCosts
	union all select * from Revenue
  )

  select * into #qerent_attrs_raw from AllAttrs;

  -- Update category values for each category
  with Names as (select distinct org_group from #qerent_attrs_raw)
  insert into vdt.org_group (og_name) select org_group from Names
  where not exists (select * from vdt.org_group where og_name=Names.org_group)
  and Names.org_group is not null;

  with Names as (select distinct [function] from #qerent_attrs_raw)
  insert into vdt.[function] (func_name) select [function] from Names
  where not exists (select * from vdt.[function] where func_name=Names.[function])
  and Names.[function] is not null;

  with Names as (select distinct activity from #qerent_attrs_raw)
  insert into vdt.activity (act_name) select activity from Names
  where not exists (select * from vdt.activity where act_name=Names.activity)
  and Names.activity is not null;

  with Names as (select distinct workstream from #qerent_attrs_raw)
  insert into vdt.workstream (ws_name) select workstream from Names
  where not exists (select * from vdt.workstream where ws_name=Names.workstream)
  and Names.workstream is not null;

  with Names as (select distinct location from #qerent_attrs_raw)
  insert into vdt.location (loc_name) select location from Names
  where not exists (select * from vdt.location where loc_name=Names.location)
  and Names.location is not null;

  with Names as (select distinct equipment_type from #qerent_attrs_raw)
  insert into vdt.eqp_type (eqp_type_name) select equipment_type from Names
  where not exists (select * from vdt.eqp_type where eqp_type_name=Names.equipment_type)
  and Names.equipment_type is not null;

  with Names as (select distinct equipment from #qerent_attrs_raw)
  insert into vdt.equipment (eqp_name) select equipment from Names
  where not exists (select * from vdt.equipment where eqp_name=Names.equipment)
  and Names.equipment is not null;

  with Names as (select distinct cost_type from #qerent_attrs_raw)
  insert into vdt.cost_type (ct_name) select cost_type from Names
  where not exists (select * from vdt.cost_type where ct_name=Names.cost_type)
  and Names.cost_type is not null;

  with Names as (select distinct product from #qerent_attrs_raw)
  insert into vdt.product (prod_name) select product from Names
  where not exists (select * from vdt.product where prod_name=Names.product)
  and Names.product is not null;
  

  -- Join back to the qerent attrs to get the category IDs
  with WithIds as (
	select I.name as attr_name, I.unit, I.sec_level, I.is_cost, I.is_lever, I.is_aggregate, I.is_kpi,
	  O.og_id, F.func_id, A.act_id, W.ws_id, L.loc_id, ET.eqp_type_id, E.eqp_id, C.ct_id, P.prod_id,
	  I.value, I.path as qerent_path, I.attribute as qerent_attribute
	from #qerent_attrs_raw I
	left join vdt.org_group O on I.org_group=O.og_name
	left join vdt.[function] F on I.[function]=F.[func_name]
	left join vdt.activity A on I.activity=A.act_name
	left join vdt.workstream W on I.workstream=W.ws_name
	left join vdt.location L on I.location=L.loc_name
	left join vdt.eqp_type ET on I.equipment_type=ET.eqp_type_name
	left join vdt.equipment E on I.equipment=E.eqp_name
	left join vdt.cost_type C on I.cost_type=C.ct_name
	left join vdt.product P on I.product=P.prod_name
  )
  
  select * into #qerent_attrs from WithIds;

  -- Now we have a view of what the attributes should like, based on this model.  Next job is to match up existing attributes and get their IDs.
  insert into staging.qerent_attr_ids (model_id, attr_id, object_path, attr_name)
  select @model_id, A.attr_id, Q.qerent_path, Q.qerent_attribute
  from #qerent_attrs Q inner join vdt.attribute A
  on Q.attr_name=A.attr_name
  and coalesce(Q.og_id, -1)=coalesce(A.og_id, -1)
  and coalesce(Q.func_id, -1)=coalesce(A.func_id, -1)
  and coalesce(Q.act_id, -1)=coalesce(A.act_id, -1)
  and coalesce(Q.ws_id, -1)=coalesce(A.ws_id, -1)
  and coalesce(Q.loc_id, -1)=coalesce(A.loc_id, -1)
  and coalesce(Q.eqp_type_id, -1)=coalesce(A.eqp_type_id, -1)
  and coalesce(Q.eqp_id, -1)=coalesce(A.eqp_id, -1)
  and coalesce(Q.ct_id, -1)=coalesce(A.ct_id, -1)
  and coalesce(Q.prod_id, -1)=coalesce(A.prod_id, -1)
  and not exists (select * from staging.qerent_attr_ids X where object_path=Q.qerent_path and attr_name=Q.qerent_attribute)

  -- Now update is_cost etc on existing attributes
  update vdt.attribute set unit=Q.unit, sec_level=Q.sec_level, is_cost=Q.is_cost, is_lever=Q.is_lever, is_aggregate=Q.is_aggregate, is_kpi=Q.is_kpi
  from #qerent_attrs Q inner join staging.qerent_attr_ids I on Q.qerent_path=I.object_path and Q.qerent_attribute=I.attr_name
  where attribute.attr_id=I.attr_id and I.model_id=@model_id

  -- Add any new attributes to the database
  insert into vdt.attribute (attr_name, unit, sec_level, is_cost, is_lever, is_aggregate, is_kpi, og_id, func_id, act_id, ws_id, loc_id, eqp_type_id, eqp_id, ct_id, prod_id)
  select attr_name, coalesce(unit, ''), sec_level, is_cost, is_lever, is_aggregate, is_kpi, og_id, func_id, act_id, ws_id, loc_id, eqp_type_id, eqp_id, ct_id, prod_id
  from #qerent_attrs Q
  where not exists (select * from staging.qerent_attr_ids E where E.object_path=Q.qerent_path and E.attr_name=Q.qerent_attribute and E.model_id=@model_id);
  
  -- And finally link up the new qerent_attr_ids
  insert into staging.qerent_attr_ids (model_id, attr_id, object_path, attr_name)
  select @model_id, A.attr_id, Q.qerent_path, Q.qerent_attribute
  from #qerent_attrs Q inner join vdt.attribute A
  on Q.attr_name=A.attr_name
  and coalesce(Q.og_id, -1)=coalesce(A.og_id, -1)
  and coalesce(Q.func_id, -1)=coalesce(A.func_id, -1)
  and coalesce(Q.act_id, -1)=coalesce(A.act_id, -1)
  and coalesce(Q.ws_id, -1)=coalesce(A.ws_id, -1)
  and coalesce(Q.loc_id, -1)=coalesce(A.loc_id, -1)
  and coalesce(Q.eqp_type_id, -1)=coalesce(A.eqp_type_id, -1)
  and coalesce(Q.eqp_id, -1)=coalesce(A.eqp_id, -1)
  and coalesce(Q.ct_id, -1)=coalesce(A.ct_id, -1)
  and coalesce(Q.prod_id, -1)=coalesce(A.prod_id, -1)
  and not exists (select * from staging.qerent_attr_ids X where object_path=Q.qerent_path and attr_name=Q.qerent_attribute)

  -- Copy data over from the model
  declare @dataset_id int = null;
  select @dataset_id = dataset_id from vdt.dataset where origin='model' and dataset_name='Model Data - ' + @filename;
  if @dataset_id is null
  begin
    declare @cat_id int = (select category_id from vdt.dataset_category where category_name='Scenario');
	insert into vdt.dataset (model_id, dataset_name, origin, category_id, last_update)
	values (@model_id, 'Model Data - ' + @filename, 'model', @cat_id, current_timestamp);
	set @dataset_id = SCOPE_IDENTITY();
  end
  if @dataset_id is not null
  begin
    merge vdt.value as V using (
	  select I.attr_id, Q.value from staging.qerent_attr_ids I
	  inner join #qerent_attrs Q on I.[object_path] = Q.[qerent_path] and I.[attr_name] = Q.[qerent_attribute] and I.model_id=@model_id) as S
	on S.attr_id=V.attr_id and V.dataset_id=@dataset_id
	when not matched by target then insert (dataset_id, attr_id, value) values (@dataset_id, S.attr_id, S.value)
	when matched then update set V.value = S.value;
  end

  drop table #qerent_attrs;
  drop table #qerent_attrs_raw;
end
go

alter procedure vdt.sp_get_site_reports
  @site nvarchar(100),
  @dataset_id int,
  @user_id int
as
begin
  set nocount on;

  declare @reports table (
    title nvarchar(50),
	sproc nvarchar(50),
	args nvarchar(100),
	renderer nvarchar(50),
	value_format nvarchar(50));

  insert into @reports (title, sproc, args, renderer, value_format) values ('WAIO KPI', 'vdt.sp_get_system_kpis', '@dataset_id,@user_id', 'SimpleTable', '');
  if @site <> 'WAIO'
  begin
    insert into @reports (title, sproc, args, renderer, value_format) values (@site + ' Volume KPI', 'vdt.sp_get_site_volume_kpis', '@site_name,@dataset_id,@user_id', 'SimpleTable', '');
    insert into @reports (title, sproc, args, renderer, value_format) values (@site + ' Cost KPI', 'vdt.sp_get_site_cost_kpis', '@site_name,@dataset_id,@user_id', 'SimpleTable', '');
  end
  else
  begin
    insert into @reports (title, sproc, args, renderer, value_format) values ('OOR Tonnes', 'vdt.sp_get_mining_oor', '@dataset_id,@user_id', 'SimpleTable', '');
    insert into @reports (title, sproc, args, renderer, value_format) values ('WAIO Costs', 'vdt.sp_get_system_total_cost', '@dataset_id,@user_id', 'ColumnChart', 'A$M');
    insert into @reports (title, sproc, args, renderer, value_format) values ('WAIO Cost Changes', 'vdt.sp_get_system_cost_waterfall', '@dataset_id,@user_id', 'ColumnChart', '$/t');
    insert into @reports (title, sproc, args, renderer, value_format) values ('System Capacity', 'vdt.sp_get_system_tonnes', '@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
  end
  insert into @reports (title, sproc, args, renderer, value_format) values ('Incremental OOR Tonnes', 'vdt.sp_get_mining_tonnes_waterfall', '@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
  if @site not in ('Rail', 'Port', 'WAIO')
  begin
    insert into @reports (title, sproc, args, renderer, value_format) values ('Mine Capacity (Ore Tonnes)', 'vdt.sp_get_capacity_chart', '@site_name,@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
    insert into @reports (title, sproc, args, renderer, value_format) values ('System Capacity', 'vdt.sp_get_system_tonnes', '@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
	insert into @reports (title, sproc, args, renderer, value_format) values ('Process Costs', 'vdt.sp_get_mine_total_cost_chart', '@site_name,@dataset_id,@user_id', 'ColumnChart', 'A$M');
	insert into @reports (title, sproc, args, renderer, value_format) values ('Cost Changes ($/t OOR)', 'vdt.sp_get_mine_cost_waterfall', '@site_name,@dataset_id,@user_id', 'ColumnChart', '$/t');
	insert into @reports (title, sproc, args, renderer, value_format) values ('Rehandle Cost', 'vdt.sp_get_mine_rehandle_cost_per_tonne', '@site_name,@dataset_id,@user_id', 'SimpleTable', '$/t');
	insert into @reports (title, sproc, args, renderer, value_format) values ('Rehandle Cost', 'vdt.sp_get_mine_rehandle_cost_total', '@site_name,@dataset_id,@user_id', 'SimpleTable', 'A$M');	
	insert into @reports (title, sproc, args, renderer, value_format) values ('Process Efficiency', 'vdt.sp_get_mine_process_efficiencies', '@site_name,@dataset_id,@user_id', 'SimpleTable', '');	
  end
  if @site = 'Rail'
  begin
    insert into @reports (title, sproc, args, renderer, value_format) values ('System Capacity', 'vdt.sp_get_system_tonnes', '@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
    insert into @reports (title, sproc, args, renderer, value_format) values ('Rail Costs', 'vdt.sp_get_rail_total_cost', '@dataset_id,@user_id', 'ColumnChart', 'A$M');
    insert into @reports (title, sproc, args, renderer, value_format) values ('Rail Cost Changes', 'vdt.sp_get_rail_cost_waterfall', '@dataset_id,@user_id', 'ColumnChart', '$/t');
  end
  if @site = 'Port'
  begin
    insert into @reports (title, sproc, args, renderer, value_format) values ('Port Capacity', 'vdt.sp_get_port_capacity_chart', '@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
    insert into @reports (title, sproc, args, renderer, value_format) values ('System Capacity', 'vdt.sp_get_system_tonnes', '@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
    insert into @reports (title, sproc, args, renderer, value_format) values ('Port Costs', 'vdt.sp_get_port_total_cost', '@dataset_id,@user_id', 'ColumnChart', 'A$M');
    insert into @reports (title, sproc, args, renderer, value_format) values ('Port Cost Changes', 'vdt.sp_get_port_cost_waterfall', '@dataset_id,@user_id', 'ColumnChart', '$/t');
  end
  select * from @reports;
end
go

alter procedure [vdt].[sp_get_system_tonnes]
  @dataset_id int,
  @user_id int
as

with rawdata as (
select * from vdt.data
where attribute in ('Value Chain Tonnes', 'Value Chain Stock', 'Headroom') and [function] is null
  and dataset_id=@dataset_id
  AND (select sec_level from vdt.[user] where [user_id] = @user_id) >=  attribute_sec_level
)
,capacity as (
  select org_group, sum(base_value) as capacity
  from rawdata group by org_group
)
,stockplustonnes as (
  select org_group, sum(value) as spt
  from rawdata where attribute <> 'Headroom' group by org_group
)
,data as (
select D.org_group, D.attribute, D.base_value,
  case when D.attribute='Headroom' then
    case when S.spt > C.capacity then 0 else C.capacity - S.spt end
  else D.value end as value from rawdata D
  left join capacity C on D.org_group=C.org_group
  left join stockplustonnes S on D.org_group=S.org_group
)
,series as (
select 'Base Case' as series, org_group as [group], attribute as [component], base_value as value,
  case attribute when 'Headroom' then 3 when 'Value Chain Stock' then 2 else 1 end as stack_order,
  case attribute when 'Headroom' then 'rgb(216,222,231)' when 'Value Chain Tonnes' then 'black' else '#aaa' end as fill_color,
  '' as fill_pattern
from data
union all
select 'Scenario' as series, org_group as [group], attribute as [component], value as value,
  case attribute when 'Headroom' then 3 when 'Value Chain Stock' then 2 else 1 end as stack_order,
  case attribute when 'Headroom' then 'rgb(216,222,231)' when 'Value Chain Tonnes' then 'orange' else 'rgb(255,203,106)' end as fill_color,
  '' as fill_pattern
from data
)
select * from series
order by case [group]
  when 'Mines' then 1
  when 'Rail' then 2
  when 'Port' then 3
  else 4
end
go

commit transaction Version3
go

PRINT 'Database has been updated successfully to version 3'
set noexec off;


--------------------------------------------------- Version 4 update ------------------------------------------------------------------

declare @cur_version int = (select max(db_version) from vdt.config)
IF @cur_version >= 4
begin
  print 'Skipping database update to v4; already at version ' + cast(@cur_version as nvarchar)
  set noexec on
end

begin transaction Version4;
go

set xact_abort on;
set nocount on;

INSERT INTO vdt.config([db_version],[updated_on]) VALUES(4,  getdate())
go

alter procedure [vdt].[sp_get_mine_total_cost_chart]
  @site_name nvarchar(100),
  @dataset_id int,
  @user_id int
as
begin
  declare @basecase_name nvarchar(100);
  declare @scenario_name nvarchar(100);
  
  select @basecase_name=coalesce(B.dataset_name, V.dataset_name), @scenario_name=V.dataset_name
  from vdt.dataset V left join vdt.scenario S on S.view_dataset_id=V.dataset_id
  left join vdt.dataset B on S.base_dataset_id=B.dataset_id
  where V.dataset_id=@dataset_id;

  with totals as (
    select [function] as obj, attribute as attr, value, base_value
    from vdt.data
    where attribute in ('Fixed cost', 'Variable cost')
    and activity is null
    and org_group='Mines' and location=@site_name
	and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
    and dataset_id=@dataset_id)
    
  ,lineitems as (
	select *
    from vdt.data
    where attribute in ('Fixed cost', 'Variable cost')
    and cost_type is null and equipment is null and (activity is not null or [function]='Overheads')
	and (activity <> 'Load' and activity <> 'Haul') and (equipment_type='Plant' or equipment_type is null)
	and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
    and dataset_id=@dataset_id and org_group='Mines' and location=@site_name)
  
  ,subtotals as (
	  select [function] as obj, attribute as attr, sum(value) as value, sum(base_value) as base_value
	  from lineitems group by [function], attribute)

  ,sna as (
  select T.obj, T.attr, T.value - S.value as value, T.base_value - S.base_value as base_value
  from subtotals S inner join totals T on S.obj=T.obj and S.attr=T.attr
  where T.obj <> 'Overheads')

  ,pivot_data as (
    select
      coalesce(activity, 'Mine Overheads') as [group],
      attribute as component,
      value as value,
	  base_value
    from lineitems
    union all
    select
	case S.obj
	  when 'Mining' then 'Mine Svc & Ovh'
	  when 'Processing' then 'Proc Svc & Ovh'
	end as [group],
  	S.attr as component,
  	value as value,
	base_value
    from sna S)

  ,data as (
    select @basecase_name as series, [group], [component], [base_value] as value,
	  case when [component]='Fixed cost' then 1 else 2 end as stack_order,
	  case when [component]='Fixed cost' then '#000' else '#aaa' end as fill_color, '' as fill_pattern
	from pivot_data
	union all
    select @scenario_name as series, [group], [component], [value] as value,
	  case when [component]='Fixed cost' then 1 else 2 end as stack_order,
	  case when [component]='Fixed cost' then '#ffa500' else '#ffcb6a' end as fill_color, '' as fill_pattern
	from pivot_data)

  ,grouped as (
	select series, case [group]
	  when 'Drill' then 'Drill & Blast'
	  when 'Blast' then 'Drill & Blast'
	  when 'Load' then 'Load & Haul'
	  when 'Haul' then 'Load & Haul'
	  when 'OFH' then 'Processing'
	  when 'OFR' then 'Processing'
	  when 'TLO' then 'Processing'
	  when 'Proc Svc & Ovh' then 'Processing'
	  else [group]
	end as [group],
	component, value, stack_order, fill_color, fill_pattern
	from data)

  select series, [group], [component], sum(value) as value, stack_order, fill_color, fill_pattern
  from grouped group by series, [group], component, stack_order, fill_color, fill_pattern
  order by
    case when [series]=@basecase_name then 1 else 2 end,
    case [group]
      when 'Drill & Blast' then 1
       when 'Load & Haul' then 2
       when 'Mine Svc & Ovh' then 3
       when 'Beneficiation' then 4
       when 'Processing' then 5
       else 6
    end
end
go

alter procedure [vdt].[sp_get_mine_cost_waterfall]
  @site_name nvarchar(100),
  @dataset_id int,
  @user_id int
as
begin
  declare @basecase_name nvarchar(100);
  declare @scenario_name nvarchar(100);
  
  select @basecase_name=coalesce(B.dataset_name, V.dataset_name), @scenario_name=V.dataset_name
  from vdt.dataset V left join vdt.scenario S on S.view_dataset_id=V.dataset_id
  left join vdt.dataset B on S.base_dataset_id=B.dataset_id
  where V.dataset_id=@dataset_id;
  
  declare @base_tons float;
  declare @scen_tons float;
  select @scen_tons=value, @base_tons=base_value from vdt.data where org_group='Mines' and location=@site_name
   and [function] is null and attribute='OOR'
   and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
   and dataset_id=@dataset_id;

  if @base_tons = 0 set @base_tons = 1;
  if @scen_tons = 0 set @scen_tons = 1; -- charts won't make sense anyway, so avoid an error message...

  with totals as (
    select [function] as obj, attribute as attr, value, base_value
    from vdt.data
    where attribute in ('Fixed cost', 'Variable cost')
    and activity is null
    and org_group='Mines' and location=@site_name
	and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
    and dataset_id=@dataset_id)
    
  ,lineitems as (
	select *
    from vdt.data
    where attribute in ('Fixed cost', 'Variable cost')
    and cost_type is null and equipment is null and (activity is not null or [function]='Overheads')
	and (activity <> 'Load' and activity <> 'Haul') and (equipment_type='Plant' or equipment_type is null)
	and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
    and dataset_id=@dataset_id and org_group='Mines' and location=@site_name)
  
  ,subtotals as (
	  select [function] as obj, attribute as attr, sum(value) as value, sum(base_value) as base_value
	  from lineitems group by [function], attribute)

  ,sna as (
  select T.obj, T.attr, T.value - S.value as value, T.base_value - S.base_value as base_value
  from subtotals S inner join totals T on S.obj=T.obj and S.attr=T.attr
  where T.obj <> 'Overheads')

  ,pivot_data as (
    select
      coalesce(activity, 'Mine Overheads') as [group],
      attribute as component,
      value as value,
	  base_value
    from lineitems
    union all
    select
	case S.obj
	  when 'Mining' then 'Mine Svc/Ovh'
	  when 'Processing' then 'Proc Svc/Ovh'
	end as [group],
  	S.attr as component,
  	value as value,
	base_value
    from sna S)

  ,grouped as (
	select case [group]
	  when 'Drill' then 'D&B'
	  when 'Blast' then 'D&B'
	  when 'Load' then 'L&H'
	  when 'Haul' then 'L&H'
	  when 'Load & Haul' then 'L&H'
	  when 'OFH' then 'Proc.'
	  when 'OFR' then 'Proc.'
	  when 'TLO' then 'Proc.'
	  when 'Proc Svc/Ovh' then 'Proc.'
	  when 'Mine Overheads' then 'Mine Ovh.'
	  when 'Beneficiation' then 'Bene.'
	  else [group]
	end as [group],
	value - base_value as delta
	from pivot_data)

  ,agg as (
	select [group], sum([delta]) / @base_tons as [delta] from grouped group by [group]
	union all
	select 'Vol. Dil.' as [group], (sum(value)/@scen_tons - sum(value)/@base_tons) as [delta] from totals where obj is null)
  
  ,withidx as (
    select row_number() over (order by case [group]
         when 'D&B' then 1
         when 'L&H' then 2
         when 'Mine Svc/Ovh' then 3
         when 'Bene.' then 4
         when 'Proc.' then 5
		 when 'Vol. Dil.' then 999
         else 6
       end) as num, [group], [delta]
	from agg
	)

  ,stacked as (
    select cast(0 as int) as num, cast('Base' as nvarchar) as [group], cast(0 as float) as base, sum(base_value)/@base_tons as height, sum(base_value)/@base_tons as cum
	from totals where obj is null
	union all
	select cast(R.num as int), cast(R.[group] as nvarchar) as [group],
	  case when delta < 0 then P.cum + delta else P.cum end as base,
	  abs(delta) as height,
	  P.cum + delta as cum
	from withidx R inner join stacked P on P.num = R.num-1)

  ,pivoted as (
    select [num], [group],
      case when [num]=0 then height else 0 end as total,
	  base as transparent, 
	  case when num=0 then 0 when base=cum then height else 0 end as decrease, 
	  case when num=0 then 0 when base=cum then 0 else height end as increase
    from stacked
    union all
	select 999 as num, 'Scenario' as [group], sum(value)/@scen_tons as total, 0 as transparent, 0 as decrease, 0 as increase
	from totals where obj is null)

  select 'Change in tonnes' as series, [group], 'Total' as [component], total as value, '#0000c0' as fill_color, '' as fill_pattern, 1 as stack_order from pivoted
  union all
  select 'Change in tonnes' as series, [group], 'Transparent' as [component], transparent as value, 'rgba(0,0,0,0)' as fill_color, '' as fill_pattern, 2 as stack_order from pivoted
  union all
  select 'Change in tonnes' as series, [group], 'Increase' as [component], increase as value, '#008800' as fill_color, '' as fill_pattern, 3 as stack_order from pivoted
  union all
  select 'Change in tonnes' as series, [group], 'Decrease' as [component], decrease as value, '#880000' as fill_color, '' as fill_pattern, 4 as stack_order from pivoted
end
go

alter procedure [vdt].[sp_get_site_cost_kpis]
  @site_name nvarchar(100),
  @dataset_id int,
  @user_id int
as
select
  [attribute] as KPI,
  attribute_unit as [Unit],
  case when base_value=0 then 0 else value/base_value-1 end as [% Change:{0:2%}],
  value as [Scenario:_format],
  base_value as [Baseline:_format],
  [format] as _format
from vdt.data
left join vdt.unit_format on data.attribute_unit=unit_format.unit
where [function] is null and attribute_is_kpi<>0 and attribute_is_cost=1
and dataset_id=@dataset_id and (org_group='Mines' and location=@site_name or org_group=@site_name)
and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
go

alter procedure [vdt].[sp_get_capacity_chart]
	@site_name nvarchar(100),
	@dataset_id int,
    @user_id int
AS 
BEGIN 
  SET NOCOUNT ON;

with data as (
select location, 'Base Case' as series,
  case when Location='Whaleback' and activity='OFH' then 'CD+Bene' else activity end as [group],
  attribute as component, base_value as value,
  case attribute when 'Stacked VCT' then 'transparent' when 'Value Chain Tonnes' then 'black' else '#aaa' end as fill_color,
  case attribute when 'Stacked VCT' then 'empty' when 'Value Chain Tonnes' then 'solid' else 'hatched' end as fill_pattern
from vdt.data where attribute in (
  'Value Chain Tonnes', 'Stockpile Capacity Contribution', 'Stacked VCT', 'Internal Capacity')
  AND dataset_id = @dataset_id
  and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
union all

select location, 'Scenario' as series,
  case when Location='Whaleback' and activity='OFH' then 'CD+Bene' else activity end as [group],
  attribute as component, value,
  case attribute when 'Stacked VCT' then 'transparent' when 'Value Chain Tonnes' then 'orange' else 'rgb(255,203,106)' end as fill_color,
  case attribute when 'Stacked VCT' then 'empty' when 'Value Chain Tonnes' then 'solid' else 'hatched' end as fill_pattern
from vdt.data where attribute in (
  'Value Chain Tonnes', 'Stockpile Capacity Contribution', 'Stacked VCT', 'Internal Capacity')
  AND dataset_id = @dataset_id
  and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
)

,headroom_agg as (
select T.location, T.[group], C.value - T.value as value
from data T inner join data C on T.location=C.location and T.series=C.series and T.[group]=C.[group]
where T.component='Value Chain Tonnes' and C.component='Internal Capacity' and T.series='Scenario')

,process_subtotal as (
select series, location, [group], sum(value) as value
from data where component<>'Internal Capacity' group by series, location, [group]
)

,capacity as (
select H.location, H.[group], H.value + D.value as total_capacity
from headroom_agg H inner join process_subtotal D on H.location=D.location and H.[group]=D.[group]
where D.series='Scenario'
)

,data_w_hroom as (
select * from data where component <> 'Internal Capacity'
union all
select P.location, P.series, P.[group], 'Headroom' as component, C.total_capacity - P.value as value,
  'rgb(216,222,231)' as fill_color, 'top_dash' as fill_pattern
from process_subtotal P inner join capacity C on P.location=C.location and P.[group]=C.[group]
)

select * , case component
  when 'Stacked VCT' then 1
  when 'Value Chain Tonnes' then 2
  when 'Stockpile Capacity Contribution' then 3
  when 'Headroom' then 4
end as stack_order
from data_w_hroom
where location=@site_name
order by
case [group]
  when 'Drill' then 1
  when 'Blast' then 2
  when 'Load' then 3
  when 'Haul' then 4
  when 'Beneficiation' then 5
  when 'OFH' then 6
  when 'CD+Bene' then 6
  when 'OFR' then 7
  when 'TLO' then 8
  else 7 end,
case series
  when 'Base Case' then 1
  else 2
end,stack_order

END 
  

GO

alter procedure [vdt].[sp_get_system_tonnes]
  @dataset_id int,
  @user_id int
as

with rawrawdata as (
select * from vdt.data
where attribute in ('Value Chain Tonnes', 'Value Chain Stock', 'Headroom', 'Internal Capacity') and [function] is null
  and location is null
  and dataset_id=@dataset_id
  AND (select sec_level from vdt.[user] where [user_id] = @user_id) >=  attribute_sec_level
)
,rawdata as (
select * from rawrawdata where attribute <> 'Internal Capacity'
)
,capacity as (
  select org_group, sum(value) as capacity
  from rawrawdata where attribute in ('Internal Capacity', 'Value Chain Stock') group by org_group
)
,stockplustonnes as (
  select org_group, sum(value) as spt
  from rawrawdata where attribute not in ('Headroom', 'Internal Capacity') group by org_group
)
,data as (
select D.org_group, D.attribute, D.base_value,
  case when D.attribute='Headroom' then
    case when S.spt > C.capacity then 0 else C.capacity - S.spt end
  else D.value end as value from rawdata D
  left join capacity C on D.org_group=C.org_group
  left join stockplustonnes S on D.org_group=S.org_group
)
,series as (
select 'Base Case' as series, org_group as [group], attribute as [component], base_value as value,
  case attribute when 'Headroom' then 3 when 'Value Chain Stock' then 2 else 1 end as stack_order,
  case attribute when 'Headroom' then 'rgb(216,222,231)' when 'Value Chain Tonnes' then 'black' else '#aaa' end as fill_color,
  '' as fill_pattern
from data
union all
select 'Scenario' as series, org_group as [group], attribute as [component], value as value,
  case attribute when 'Headroom' then 3 when 'Value Chain Stock' then 2 else 1 end as stack_order,
  case attribute when 'Headroom' then 'rgb(216,222,231)' when 'Value Chain Tonnes' then 'orange' else 'rgb(255,203,106)' end as fill_color,
  '' as fill_pattern
from data
)
select * from series
order by case [group]
  when 'Mines' then 1
  when 'Rail' then 2
  when 'Port' then 3
  else 4
end
go

alter procedure [vdt].[sp_get_port_capacity_chart]
	@dataset_id int,
	@user_id int
AS 
BEGIN 
  SET NOCOUNT ON;
  with rawdata as (
    select coalesce(location, 'Car Dumpers') as [process], attribute, value, base_value
    from vdt.data where attribute in ('Value Chain Tonnes', 'Value Chain Stock', 'Headroom', 'Internal Capacity')
    and  org_group='Port' and [function] is not null
	and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
    and dataset_id=@dataset_id
  )
  ,data as (
    select * from rawdata where attribute <> 'Internal Capacity'
  )
  ,capacity as (
  select process, sum(value) as capacity
  from rawdata where attribute in ('Value Chain Stock', 'Internal Capacity') group by process
  )
  ,production as (
    select process, sum(value) as value, sum(base_value) as base_value
    from data where attribute <> 'Headroom' group by process
  )
  ,points as (
    select * from data where attribute <> 'Headroom'
    union all
    select P.process, 'Capacity Delta' as attribute, C.capacity - P.value as value, C.capacity - P.base_value as base_value
    from production P inner join capacity C on P.process=C.process
  )
  ,result as (
    select 'Base Case' as series, process as [group], attribute as [component], base_value as value,
      case attribute when 'Value Chain Tonnes' then 1 when 'Value Chain Stock' then 2 else 3 end as stack_order,
      case attribute when 'Capacity Delta' then 'rgb(216,222,231)' when 'Value Chain Tonnes' then 'black' else '#aaa' end as fill_color,
      case attribute when 'Capacity Delta' then 'top_dash' else 'solid' end as fill_pattern
    from points
    union all
    select 'Scenario' as series, process as [group], attribute as [component], value as value,
      case attribute when 'Value Chain Tonnes' then 1 when 'Value Chain Stock' then 2 else 3 end as stack_order,
      case attribute when 'Capacity Delta' then 'rgb(216,222,231)' when 'Value Chain Tonnes' then 'orange' else 'rgb(255,203,106)' end as fill_color,
      case attribute when 'Capacity Delta' then 'top_dash' else 'solid' end as fill_pattern
    from points
  )
  select * from result
  order by series, case [group] when 'Car Dumpers' then 1 when 'Reclaimers' then 2 else 3 end
END
go


ALTER procedure [vdt].[sp_get_attribution_analysis_chart_data]
	@BaseDatasetId int,
	@BenchmarkDatasetId int,
	@user_id int
AS
BEGIN
	SET NOCOUNT ON;

		SELECT 
			CASE A.is_cost
				WHEN 1 THEN CT.ct_name 
				ELSE A.attr_name 
			END as attribute, 
			CT.ct_name as cost_type,
			A.is_cost, 
			UF.[format] as [format],
			AV.impact_on_target, 
			DS.value as scenario_value, 
			DB.value as benchmark_value, 
			OG.og_name as org_group,
			FN.func_name as [function],
			ACT.act_name as activity,
			WS.ws_name as workstream,
			LOC.loc_name as location,
			ETP.eqp_type_name as equipment_type,
			EQP.eqp_name as equipment
		
		FROM [vdt].[attribution] AA
			inner JOIN [vdt].[attribution_value] AV ON (AV.attribution_id = AA.attribution_id) 		
			left join vdt.attribute A on A.attr_id = AV.attr_id
			left join vdt.unit_format UF on A.unit = UF.unit
			left join vdt.location LOC on A.loc_id=LOC.loc_id
			left join vdt.[workstream] WS on A.ws_id=WS.ws_id
			left join vdt.activity ACT on A.act_id=ACT.act_id
			left join vdt.eqp_type ETP on A.eqp_type_id=ETP.eqp_type_id
			left join vdt.equipment EQP on A.eqp_id=EQP.eqp_id
			left join vdt.cost_type CT on A.ct_id=CT.CT_id
			left join vdt.org_group OG on A.og_id=OG.og_id
			left join vdt.[function] FN on A.func_id=FN.func_id
			left join [vdt].[data] DS on (DS.dataset_id =  @BaseDatasetId AND DS.attr_id = A.attr_id)
			left join [vdt].[data] DB on (DB.dataset_id =  @BenchmarkDatasetId AND DB.attr_id = A.attr_id)

		WHERE AA.base_dataset_id = @BaseDatasetId
		AND AA.benchmark_dataset_id = @BenchmarkDatasetId
		AND(select sec_level from vdt.[user] where [user_id] = @user_id)  >=  A.sec_level

END

GO


ALTER procedure [vdt].[sp_get_filters]
as
begin
  set nocount on;
  begin
    -- it's a mining location: activity, workstream, equipment, cost type, attribute
	with attributes as (
	  select * from vdt.attribute_category
	  where  activity <> 'Overheads' and [function] <> 'Overheads'
	  and (attribute_is_kpi<>0 or attribute_is_lever<>0))
	
	select distinct 'Location' as filter, 'loc_name' as colname, cast(loc_id as nvarchar) as id, loc_name as value
	from location where loc_name is not null
	union all
	select distinct 'Activity' as filter, 'act_id' as colname, cast(act_id as nvarchar) as id, activity as value
	from attributes where activity is not null
	union all
	select distinct 'Workstream' as filter, 'ws_id' as colname, cast(ws_id as nvarchar) as id, workstream as value
	from attributes where workstream is not null
	union all
	select distinct 'Equipment' as filter, 'eqp_id' as colname, cast(eqp_id as nvarchar) as id, equipment as value 
	from attributes where equipment is not null and attribute_is_cost=0
	union all
	select distinct 'Cost Type' as filter, 'ct_id' as colname, cast(ct_id as nvarchar) as id, cost_type as value 
	from attributes where cost_type is not null
	union all
	select distinct 'Attribute' as filter, 'attribute' as colname, attribute as id, attribute as value 
	from attributes
  end
end
GO


commit transaction Version4
go

PRINT 'Database has been updated successfully to version 4'
set noexec off;



--------------------------------------------------- Version 5 update ------------------------------------------------------------------

declare @cur_version int = (select max(db_version) from vdt.config)
IF @cur_version >= 5
begin
  print 'Skipping database update to v5; already at version ' + cast(@cur_version as nvarchar)
  set noexec on
end

begin transaction Version5;
go

set xact_abort on;
set nocount on;

INSERT INTO vdt.config([db_version],[updated_on]) VALUES(5,  getdate())
go

drop procedure staging.sp_import_excel
go
drop type staging.ExcelImportType
go
CREATE TYPE [staging].[ExcelImportType] AS TABLE(
	[Sheet] [nvarchar](100) NULL,
	[Org_Group] [nvarchar](100) NULL,
	[Location] [nvarchar](100) NULL,
	[Function] [nvarchar](100) NULL,
	[Activity] [nvarchar](100) NULL,
	[Workstream] [nvarchar](100) NULL,
	[Equipment_Type] [nvarchar](100) NULL,
	[Equipment] [nvarchar](100) NULL,
	[Cost_Type] [nvarchar](100) NULL,
	[Product] [nvarchar](100) NULL,
	[Attribute] [nvarchar](100) NULL,
	[Unit] [nvarchar](100) NULL,
	[Cost?] [nvarchar](100) NULL,
	[Value] [float] NULL
)
go
alter table vdt.attribute add is_calculated bit not null default 0
go
update vdt.attribute set is_calculated=1-is_lever
go
alter view staging.qerent_import as
select V.dataset_id, Q.object_path, Q.attr_name, coalesce(C.new_value, V.value) as value
from vdt.value V inner join vdt.attribute A on V.attr_id=A.attr_id
inner join vdt.dataset D on V.dataset_id=D.dataset_id
inner join staging.qerent_attr_ids Q on A.attr_id=Q.attr_id and D.model_id=Q.model_id
left join vdt.scenario S on S.view_dataset_id=V.dataset_id
left join vdt.scenario_change C on S.scenario_id=C.scenario_id and C.attr_id=A.attr_id
where A.is_calculated=0
go

alter procedure [staging].[sp_import_qerent_model_structure] (
    @filename nvarchar(256),
	@data staging.QerentStructureType readonly)
as
begin
  set nocount on

  -- debugging purposes only
  if object_id(N'staging.temp_qerent_import', N'U') is not null
    drop table staging.temp_qerent_import;
  select * into staging.temp_qerent_import from @data;
  -- end debugging

  -- Set up the entry in the model table, if it doesn't already exist.
  if left(@filename, 1) = '_' set @filename = '_debug'
  declare @model_id int = null
  declare @should_copy_data bit = 0
  select @model_id=model_id from vdt.model where [filename]=@filename
  if @model_id is null
  begin
    insert into vdt.model ([filename], [file_date]) values (@filename, current_timestamp)
	set @model_id=SCOPE_IDENTITY()
  end
  else
  begin
    update vdt.model set file_date=current_timestamp where model_id=@model_id
  end;
  set @should_copy_data = 1;

  -- This lengthy query sets up a view of how the attributes from Qerent should be mapped into the vdt.attributes table.
  -- The result of this will get stored in #qerent_attrs later.
  with QAttrs as (
  select * from @data)
  
  ,DrillFleets as (
  select [Object Path], [O2] as Mine, [O5] as Fleet from QAttrs where O1='Mines' and O4='Drill' and [Attribute]='Target tonnes')
  
  ,DrillProd as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream, F.Mine as location,
    'Drills' as equipment_type, F.Fleet as equipment, null as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from DrillFleets F inner join QAttrs A on F.[Object Path]=A.[Object Path]
  )--where A.[Attribute] not in ('Headroom', 'Cost', 'Fixed cost', 'Variable cost'))
  
  ,DrillFleetCostLevers as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity,
    case when substring([O7], 1, 11)='Maintenance' then 'Maintenance' else 'Operations' end as workstream,
    F.Mine as location, 'Drills' as equipment_type, F.Fleet as equipment, coalesce([O8], [O7]) as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A inner join DrillFleets F on substring(A.[Object Path], 1, len(F.[Object Path]) + 7) = F.[Object Path] + '.Costs.'
  where left(A.[Type],1)='C')
  
  ,DrillOperationsCostLevers as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream,
    A.[O2] as location, null as equipment_type, null as equipment, coalesce([O7], [O6]) as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Drill' and [O5]='Operations' and [O6] is not null
  and left(A.[Type],1) = 'C'
  and (A.[O6] <> 'Fuels & Oils' or A.[O7] is not null))
  
  ,DrillSummary as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream,
    A.[O2] as location, null as equipment_type, null as equipment, null as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Drill' and [O5] is null
  and [Attribute] not in ('Use of Headroom'))
  
  ,DrillStock as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream,
    A.[O2] as location, 'Stockpile' as equipment_type, 'Drill Stock' as equipment, null as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Drill' and [O5]='Drill Inventory'
  )
  
  ,Blast as (
  select 'Mines' as org_group, 'Mining' as [function], 'Blast' as activity, 'Operations' as workstream,
    A.[O2] as location,
    case when [O5]='Blast Inventory' then 'Stockpile' else null end as equipment_type,
    case when [O5]='Blast Inventory' then [O5] else null end as equipment,
    [O6] as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Blast'
  )

  ,LoadHaul as (
  select 'Mines' as org_group, 'Mining' as [function],
    case when [O5] is null or [O5]='Operations' then 'Load & Haul' else [O5] end as activity,
	'Operations' as workstream,
    A.[O2] as location,
    case when [O5]='Load' then left([O6], len([O6])-1) when [O6] is null then null when [O5]='Haul' then 'Truck' else null end as equipment_type,
    case when [O5]='Load' then [O7] else [O6] end as equipment,
    case [O5] when 'Operations' then [O6] when 'Load' then [O9] else [O8] end as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Load & haul'
  )
  
  ,MineServicesAndOverheads as (
  select 'Mines' as org_group, 'Mining' as [function],
    [O4] as activity,
	case when [O4] is null then null when [O5]='Operations' or [O4]='Overheads' then 'Operations' else 'Support' end as workstream,
    A.[O2] as location,
    case when [O4] is null then null when [O5]='Operations' then null when [O4]='Overheads' then [O5] else 'Support' end as equipment_type,
    case when [O5]='Operations' then null when [O4]='Overheads' then [O6] else [O5] end as equipment,
    case when [O4]='Overheads' then [O7] else [O6] end as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Mining' and ([O4] is null or [O4] not in ('Drill', 'Blast', 'Load & haul'))
  )
  
  ,OverheadsMines as (
  select 'Mines' as org_group, 'Mining' as [function],
    'Overheads' as activity,
	coalesce([O4], 'Operations') as workstream,
    null as location,
    null as equipment_type,
    [O3] as equipment,
    coalesce([O5], [O4], [O3]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O2]='Overheads Mines'
  )

  ,ProcessingPlants as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	'Operations' as workstream,
    [O2] as location,
    'Plant' as equipment_type,
    [O5] as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O6] is null and [O4] not in ('Non Allocated Cost', 'Overheads')
  )

  ,ProcessingPlantCosts as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	case when [O8]='Maintenance' then 'Maintenance' else 'Operations' end as workstream,
    [O2] as location,
    'Plant' as equipment_type,
    [O7] as equipment,
    coalesce([O9], [O8]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O6]='Costs'
  )
  
  ,ProcessingNonAllocatedAndOverheads as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	[O5] as workstream,
    [O2] as location,
    case when [O7] is not null then [O6] else null end as equipment_type,
    null as equipment,
    coalesce([O7], [O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O4] in ('Non Allocated Cost', 'Overheads')
  )

  ,ProcessingTopLevel as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	null as workstream,
    [O2] as location,
    null as equipment_type,
    null as equipment,
    coalesce([O7], [O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O4] is null
  )
  
  ,MinesOverheads as (
  select 'Mines' as org_group, 'Overheads' as [function],
    [O4] as activity,
	case when [O5]='Maintenance' then [O5] else 'Operations' end as workstream,
    [O2] as location,
    case when [O5]='Maintenance' then null else [O5] end as equipment_type,
    null as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 3) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Overheads'
  )

  ,MinesTopLevel as (
  select 'Mines' as org_group, null as [function],
    null as activity,
	null as workstream,
    [O2] as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3] is null
  )
   
  ,RailVolume as (
  select
    'Rail' as org_group,
	case [O2] when 'Mines OOR' then 'Mainline' when 'Mines OFH' then 'Shuttle' else [O2] end as [function],
    'Rail' as activity,
	'Operations' as workstream,
    case when [O3]='Virtual Stockpile' then null else coalesce([O4], [O3]) end as location,
    null as equipment_type,
    null as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and substring(A.[Type], 1, 1) <> 'C' and [O2] is not null
  )

  ,RailProdCosts as (
  select
    'Rail' as org_group,
	case when [O2] in ('Mainline', 'Shuttle') then 'Production' else [O2] end as [function],
    case when [O2] in ('Mainline', 'Shuttle') then 'Operations' else [O3] end as activity,
	coalesce([O4], 'Direct Cost') as workstream,
    case when [O2] in ('Mainline', 'Shuttle') then coalesce([O3], [O2]) else null end as location,
    null as equipment_type,
    null as equipment,
    coalesce([O6], [O5], 'Diesel') as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and substring(A.[Type], 1, 1) = 'C' and [O2] not in ('Maintenance', 'Overheads') and [O2] is not null
  )

  ,RailOverheads as (
  select
    'Rail' as org_group,
	[O2] as [function],
    [O3] as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    coalesce([O5], [O4]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and [O2]='Overheads'
  )

  ,RailMaintenance as (
  select
    'Rail' as org_group,
	[O2] as [function],
    [O3] as activity,
	case when [o6] is null then 'Supporting Cost' else [o5] end as workstream,
    null as location,
    case when [O4] <> 'Overheads' and [o5] is not null then [o4] else null end as equipment_type,
    null as equipment,
    coalesce([O6], [O5], [O4]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and [O2]='Maintenance'
  )

  ,RailTopLevel as (
  select
    [O1] as org_group,
	null as [function],
    null as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and [O2] is null
  )

  ,PortInflow as (
  select
    [O1] as org_group,
	'Production' as [function],
    [O2] as activity,
	'Operations' as workstream,
    [O4] as location,
    case when [O3] is null then null else 'Car Dumper' end as equipment_type,
    [O3] as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Inflow'
  )

  ,PortOutflow as (
  select
    [O1] as org_group,
	'Production' as [function],
    [O3] as activity,
	'Operations' as workstream,
    coalesce([O6], [O4]) as location,
    left([O7], len([o7])-1) as equipment_type,
    [O8] as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O3]='Outflow'
  )

  ,PortProductionCosts as (
  select
    [O1] as org_group,
	[O2] as [function],
    [O4] as activity,
	case when [O6] is null then [O4] else [O5] end as workstream,
    [O3] as location,
    left([O7], len([o7])-1) as equipment_type,
    [O8] as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O3]<>'Outflow' and [O2]='Production'
  )

  ,PortSiteMaintenance as (
  select
    [O1] as org_group,
	[O2] as [function],
    case when [O4]='Overheads' then 'Overheads' else 'Maintenance' end as activity,
	case when [O4]='Overheads' then [O5] else 'Maintenance' end as workstream,
    [O3] as location,
    case when [O4]='Overheads' then null else left([O4], len([O4])-1) end as equipment_type,
    case when [O4]='Overheads' then null else [O5] end as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Maintenance' and [O3] in ('Nelson Point', 'Finucane Island')
  )

  ,PortMaintenance as (
  select
    [O1] as org_group,
	[O2] as [function],
    [O3] as activity,
	case when [O5] is null then 'Operations' when [O4]='Overheads' then [O5] when [O4] in ('Nelson Point', 'Finucane Island') then 'Operations' when [O4]='Other' then null else [O4] end as workstream,
    case when [O4] in ('Nelson Point', 'Finucane Island') then [O4] else null end as location,
    null as equipment_type,
    null as equipment,
    coalesce([O6], [O5], [O4]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Maintenance' and [O3] not in ('Nelson Point', 'Finucane Island')
  )

  ,PortMarine as (
    select
    [O1] as org_group,
	[O2] as [function],
    [O3] as activity,
	case when [O5] is null then 'Operations' else [O4] end as workstream,
    null as location,
    case when [O3]='Demurrage' and [O4]<>'Despatch' then [O4] else null end as equipment_type,
    null as equipment,
    case when [O3]='Demurrage' then 'Demurrage' else coalesce([O5], [O4]) end as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Marine'
  )

  ,PortOverheads as (
  select
    [O1] as org_group,
	[O2] as [function],
    [O3] as activity,
	'Operations' as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    [O4] as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Overheads'
  )

  ,PortTopLevel as (
  select
    [O1] as org_group,
	null as [function],
    null as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2] is null
  )

  ,FunctionsCosts as (
  select
    'WAIO' as org_group,
	[O1] as [function],
    [O2] as activity,
	[O3] as workstream,
    [O4] as location,
    [O5] as equipment_type,
    [O6] as equipment,
    [O7] as cost_type,
	[O8] as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 3) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1] in ('Functions', 'Logistic & Infrastructure', 'Operations Infrastructure', 'Other', 'Assumptions')
  )

  ,Revenue as (
  select 'WAIO' as org_group, 'Revenue' as [function],
    'Sales' as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	[O2] as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 3) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='EBITDA'
  )

  ,AllAttrs as (
    select * from DrillProd
    union all select * from DrillFleetCostLevers
    union all select * from DrillOperationsCostLevers
    union all select * from DrillSummary
    union all select * from DrillStock
    union all select * from Blast
	union all select * from LoadHaul
	union all select * from MineServicesAndOverheads
	union all select * from ProcessingPlants
	union all select * from ProcessingPlantCosts
	union all select * from ProcessingNonAllocatedAndOverheads
	union all select * from ProcessingTopLevel
	union all select * from MinesOverheads
	union all select * from MinesTopLevel
	union all select * from OverheadsMines
	union all select * from RailVolume
	union all select * from RailProdCosts
	union all select * from RailOverheads
	union all select * from RailMaintenance
	union all select * from RailTopLevel
	union all select * from PortInflow
	union all select * from PortOutflow
	union all select * from PortProductionCosts
	union all select * from PortSiteMaintenance
	union all select * from PortMaintenance
	union all select * from PortMarine
	union all select * from PortOverheads
	union all select * from PortTopLevel
	union all select * from FunctionsCosts
	union all select * from Revenue
  )

  select * into #qerent_attrs_raw from AllAttrs;

  -- Update category values for each category
  with Names as (select distinct org_group from #qerent_attrs_raw)
  insert into vdt.org_group (og_name) select org_group from Names
  where not exists (select * from vdt.org_group where og_name=Names.org_group)
  and Names.org_group is not null;

  with Names as (select distinct [function] from #qerent_attrs_raw)
  insert into vdt.[function] (func_name) select [function] from Names
  where not exists (select * from vdt.[function] where func_name=Names.[function])
  and Names.[function] is not null;

  with Names as (select distinct activity from #qerent_attrs_raw)
  insert into vdt.activity (act_name) select activity from Names
  where not exists (select * from vdt.activity where act_name=Names.activity)
  and Names.activity is not null;

  with Names as (select distinct workstream from #qerent_attrs_raw)
  insert into vdt.workstream (ws_name) select workstream from Names
  where not exists (select * from vdt.workstream where ws_name=Names.workstream)
  and Names.workstream is not null;

  with Names as (select distinct location from #qerent_attrs_raw)
  insert into vdt.location (loc_name) select location from Names
  where not exists (select * from vdt.location where loc_name=Names.location)
  and Names.location is not null;

  with Names as (select distinct equipment_type from #qerent_attrs_raw)
  insert into vdt.eqp_type (eqp_type_name) select equipment_type from Names
  where not exists (select * from vdt.eqp_type where eqp_type_name=Names.equipment_type)
  and Names.equipment_type is not null;

  with Names as (select distinct equipment from #qerent_attrs_raw)
  insert into vdt.equipment (eqp_name) select equipment from Names
  where not exists (select * from vdt.equipment where eqp_name=Names.equipment)
  and Names.equipment is not null;

  with Names as (select distinct cost_type from #qerent_attrs_raw)
  insert into vdt.cost_type (ct_name) select cost_type from Names
  where not exists (select * from vdt.cost_type where ct_name=Names.cost_type)
  and Names.cost_type is not null;

  with Names as (select distinct product from #qerent_attrs_raw)
  insert into vdt.product (prod_name) select product from Names
  where not exists (select * from vdt.product where prod_name=Names.product)
  and Names.product is not null;
  

  -- Join back to the qerent attrs to get the category IDs
  with WithIds as (
	select I.name as attr_name, I.unit, I.sec_level, I.is_cost, I.is_lever, I.is_calculated, I.is_aggregate, I.is_kpi,
	  O.og_id, F.func_id, A.act_id, W.ws_id, L.loc_id, ET.eqp_type_id, E.eqp_id, C.ct_id, P.prod_id,
	  I.value, I.path as qerent_path, I.attribute as qerent_attribute
	from #qerent_attrs_raw I
	left join vdt.org_group O on I.org_group=O.og_name
	left join vdt.[function] F on I.[function]=F.[func_name]
	left join vdt.activity A on I.activity=A.act_name
	left join vdt.workstream W on I.workstream=W.ws_name
	left join vdt.location L on I.location=L.loc_name
	left join vdt.eqp_type ET on I.equipment_type=ET.eqp_type_name
	left join vdt.equipment E on I.equipment=E.eqp_name
	left join vdt.cost_type C on I.cost_type=C.ct_name
	left join vdt.product P on I.product=P.prod_name
  )
  
  select * into #qerent_attrs from WithIds;

  -- Now we have a view of what the attributes should like, based on this model.  Next job is to match up existing attributes and get their IDs.
  insert into staging.qerent_attr_ids (model_id, attr_id, object_path, attr_name)
  select @model_id, A.attr_id, Q.qerent_path, Q.qerent_attribute
  from #qerent_attrs Q inner join vdt.attribute A
  on Q.attr_name=A.attr_name
  and coalesce(Q.og_id, -1)=coalesce(A.og_id, -1)
  and coalesce(Q.func_id, -1)=coalesce(A.func_id, -1)
  and coalesce(Q.act_id, -1)=coalesce(A.act_id, -1)
  and coalesce(Q.ws_id, -1)=coalesce(A.ws_id, -1)
  and coalesce(Q.loc_id, -1)=coalesce(A.loc_id, -1)
  and coalesce(Q.eqp_type_id, -1)=coalesce(A.eqp_type_id, -1)
  and coalesce(Q.eqp_id, -1)=coalesce(A.eqp_id, -1)
  and coalesce(Q.ct_id, -1)=coalesce(A.ct_id, -1)
  and coalesce(Q.prod_id, -1)=coalesce(A.prod_id, -1)
  and not exists (select * from staging.qerent_attr_ids X where object_path=Q.qerent_path and attr_name=Q.qerent_attribute)

  -- Now update is_cost etc on existing attributes
  update vdt.attribute set unit=Q.unit, sec_level=Q.sec_level, is_cost=Q.is_cost, is_lever=Q.is_lever, is_calculated=Q.is_calculated,
                           is_aggregate=Q.is_aggregate, is_kpi=Q.is_kpi
  from #qerent_attrs Q inner join staging.qerent_attr_ids I on Q.qerent_path=I.object_path and Q.qerent_attribute=I.attr_name
  where attribute.attr_id=I.attr_id and I.model_id=@model_id

  -- Add any new attributes to the database
  insert into vdt.attribute (attr_name, unit, sec_level, is_cost, is_lever, is_calculated, is_aggregate, is_kpi, og_id, func_id, act_id, ws_id, loc_id, eqp_type_id, eqp_id, ct_id, prod_id)
  select attr_name, coalesce(unit, ''), sec_level, is_cost, is_lever, is_calculated, is_aggregate, is_kpi, og_id, func_id, act_id, ws_id, loc_id, eqp_type_id, eqp_id, ct_id, prod_id
  from #qerent_attrs Q
  where not exists (select * from staging.qerent_attr_ids E where E.object_path=Q.qerent_path and E.attr_name=Q.qerent_attribute and E.model_id=@model_id);
  
  -- And finally link up the new qerent_attr_ids
  insert into staging.qerent_attr_ids (model_id, attr_id, object_path, attr_name)
  select @model_id, A.attr_id, Q.qerent_path, Q.qerent_attribute
  from #qerent_attrs Q inner join vdt.attribute A
  on Q.attr_name=A.attr_name
  and coalesce(Q.og_id, -1)=coalesce(A.og_id, -1)
  and coalesce(Q.func_id, -1)=coalesce(A.func_id, -1)
  and coalesce(Q.act_id, -1)=coalesce(A.act_id, -1)
  and coalesce(Q.ws_id, -1)=coalesce(A.ws_id, -1)
  and coalesce(Q.loc_id, -1)=coalesce(A.loc_id, -1)
  and coalesce(Q.eqp_type_id, -1)=coalesce(A.eqp_type_id, -1)
  and coalesce(Q.eqp_id, -1)=coalesce(A.eqp_id, -1)
  and coalesce(Q.ct_id, -1)=coalesce(A.ct_id, -1)
  and coalesce(Q.prod_id, -1)=coalesce(A.prod_id, -1)
  and not exists (select * from staging.qerent_attr_ids X where object_path=Q.qerent_path and attr_name=Q.qerent_attribute)

  -- Copy data over from the model
  declare @dataset_id int = null;
  select @dataset_id = dataset_id from vdt.dataset where origin='model' and dataset_name='Model Data - ' + @filename;
  if @dataset_id is null
  begin
    declare @cat_id int = (select category_id from vdt.dataset_category where category_name='Scenario');
	insert into vdt.dataset (model_id, dataset_name, origin, category_id, last_update)
	values (@model_id, 'Model Data - ' + @filename, 'model', @cat_id, current_timestamp);
	set @dataset_id = SCOPE_IDENTITY();
  end
  if @dataset_id is not null
  begin
    delete from vdt.value where dataset_id=@dataset_id;
	insert into vdt.value (dataset_id, attr_id, value)
	select @dataset_id, I.attr_id, Q.value from staging.qerent_attr_ids I
	inner join #qerent_attrs Q on I.[object_path] = Q.[qerent_path] and I.[attr_name] = Q.[qerent_attribute] and I.model_id=@model_id;
  end

  drop table #qerent_attrs;
  drop table #qerent_attrs_raw;
end
go

create procedure [staging].[sp_import_excel]
  @dataset_name nvarchar(200),
  @model_id int,
  @user_id int,
  @description nvarchar(1000),
  @category nvarchar(100),
  @data staging.ExcelImportType readonly
as
begin
  set nocount on;

  declare @results table (severity nvarchar(20), [message] nvarchar(200));
  declare @shouldCopyData bit = 0
  -- severity is one of: info, warning, error
  insert into @results (severity, [message]) values ('info', 'Starting data import');

/***********************SUMMARY************************** 
Temp tables that exist are the following:
• #Final_Calc_Dataset - The input sheet
• #MiningCostDrivers - Majority of the cost drivers for mining
• #MiningCostRates;   
• #retrieve_attribute_id;    
• #final_attribute;   
• #fulljoin;   
• #ProductionTime - calcs to convert the hours into percentages for production data 
• #CostRates  - Includes the cost rate calc
• #ActiveRakesCalc  
• #HaulAdjustments - Includes the backcals for haul adjustments.
• #LoadAdjustments - Includes the backcals for load adjustments.
• #PortCostDrivers - Includes the port back calculations
*/

select * into #Final_Calc_Dataset from @data;

-- set blanks to null
update #Final_Calc_Dataset set Org_Group = null where Org_Group = '' ;
update #Final_Calc_Dataset set Location = null where Location = '' ;
update #Final_Calc_Dataset set [Function] = null where [Function] = '' ;
update #Final_Calc_Dataset set Activity = null where Activity = '' ;
update #Final_Calc_Dataset set Equipment_Type = null where Equipment_Type = '' ;
update #Final_Calc_Dataset set Equipment = null where Equipment = '' ;
update #Final_Calc_Dataset set Workstream = null where Workstream = '' ;
update #Final_Calc_Dataset set Cost_Type = null where Cost_Type = '' ;
update #Final_Calc_Dataset set Product = null where Product = '' ;
update #Final_Calc_Dataset set Attribute = null where Attribute = '' ;

 --Table updates to conform to the attribute fact table and back calculations
update #Final_Calc_Dataset set attribute = 'Tonnes blasted' where attribute = 'Tonnes of ore blasted' ;
update #Final_Calc_Dataset set Equipment_Type = 'Loader' where Equipment_Type = 'Loaders' ;
update #Final_Calc_Dataset set Equipment_Type = 'Excavator' where Equipment_Type = 'Excavators' ;
update #Final_Calc_Dataset set Attribute = 'Closing stock' where  Attribute = 'Closing balance' and org_group = 'Port' ;
update #Final_Calc_Dataset set Attribute = 'L/F split' where  Attribute = 'L/F split ratio' ;
update #Final_Calc_Dataset set Attribute = 'Total movement tonnes' where	Attribute = 'Total movement'	and Activity is not null 
																		and Workstream is not null and Equipment_Type is not null 
																		and Equipment is not null ;
update #Final_Calc_Dataset set Attribute = 'Target Tonnes' where Attribute = 'Throughput'; 
update #Final_Calc_Dataset set Attribute = 'Average no. of drills' where Attribute = 'Average no of drills'; 
update #Final_Calc_Dataset set Attribute = 'Starved/blocked' where Attribute = 'Starved/block time'; 
update #Final_Calc_Dataset set Attribute = 'Unscheduled process downtime excl. starve/block' where Attribute = 'Unscheduled operating loss time (exclude starve/block time)'; 
update #Final_Calc_Dataset set Equipment_Type = 'CFR Ships' Where attribute = 'CFR ratio'
update #Final_Calc_Dataset set Equipment_Type = 'FOB Ships' Where attribute = 'FOB ratio'


-------------------######################################################################################################################-----------------------	
-------------------######################################################################################################################-----------------------
-------------------######################################################################################################################-----------------------
----------------------------------------------------------------------------Mining------------------------------------------------------------------------------

--=====================================================================INITIAL CHECKS===========================================================================

-- check if tonnes of ore blasted has missing values
insert into @results (severity, [message])
select 'warning', Location + ' tonnes blasted is zero or blank' from #Final_Calc_Dataset where Attribute='Tonnes blasted' and (Value is null or Value = 0)


-- check if drill stock has missing values
insert into @results (severity, [message])
select 'warning', Location + ' drill stock is zero or blank' from #Final_Calc_Dataset where Equipment = 'Drill Stock' and (Value is null or Value = 0)
;


--=====================================================================Calculations===========================================================================
With DrillDensity as (
			select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Density'  as 'Attribute', c.Unit, c.[Cost?] 
				,case when pb.[Value] = 0 then '0' else (pa.[Value]) / pb.[Value] end as  [Value]
				FROM #Final_Calc_Dataset C
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'') 
				inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.activity,'') = coalesce(pb.activity,'')
				where c.Activity = 'Drill' and pa.Attribute = 'Tonnes drilled' and pb.Attribute = 'Volume drilled' and c.Unit = 'tpa')
			-- drill inventory opening balance
	,DrillInventoryOpeningBal as		
			(select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], 'Drill Stock' as 'Equipment', c.Cost_Type, c.Product, 'Opening Balance'  as 'Attribute', c.Unit, c.[Cost?] 
				,c.Value+ pb.Value - (select sum(pa.Value))  as  [Value]--, c.Value ggsg, pb.value sdsfs, pa.value sdsa
				FROM #Final_Calc_Dataset C
				inner join #Final_Calc_Dataset pa on  coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') 
				inner join #Final_Calc_Dataset pb on  coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') 
				where c.Equipment = 'Drill Stock'  and pb.attribute='Tonnes blasted' and pa.attribute= 'Tonnes Drilled' and pa.Equipment like 'Drill Production%'
				group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.Unit, c.[Cost?],pa.Value, pb.Value, c.Value)
	,DisplacedVolume as 
			-- Displaced Volume
			(select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Displaced Volume'  as 'Attribute', c.Unit, c.[Cost?] 
				,case when c.value*pb.value = 0 then 0 else pa.[Value]/(c.[Value]*pb.[Value]) end as  [Value]
				FROM #Final_Calc_Dataset C
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'') 
				inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.activity,'') = coalesce(pb.activity,'')
				where pa.attribute='Volume drilled' and pb.attribute='Meters drilled per rig' and c.Attribute = 'Average no. of drills')
			-- cost explosive per kg
	,CostPerExplosive as		
			( select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost explosive per kg'  as 'Attribute', c.Unit, c.[Cost?] 
				,case when (pa.[Value]*pb.[Value]) = 0 then 0 else c.[Value]/(pa.[Value]*pb.[Value]) end as  [Value]
				--, c.value as llsk, pa.value sdjfm, pb.value sjjfs 
				FROM #Final_Calc_Dataset C
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'') 
				inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.activity,'') = coalesce(pb.activity,'')
				where pa.activity='Blast' and pa.attribute='Powder factor' and pb.attribute='Tonnes blasted' and c.cost_type = 'Consumables')
	,DieselPricePerLitreHaul as (
			-- Equipment Price per Litre, check values being imported - Haul
			select distinct  
			C.[Sheet], c.[Org_Group], C.Location, C.[function], 'Haul' as 'Activity', 'Operations' as 'Workstream', C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Diesel price per litre'  as 'Attribute', c.Unit, c.[Cost?]
					,case when pa.[Value] in ('0', NULL) then '0' else (c.[Value]/ pa.[Value]) end as  [Value]
					FROM #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'')
					where c.org_group = 'Mines' and  c.Cost_Type = 'Diesel' and pa.attribute='Litres consumed' and c.Activity = 'Haul')
	,DieselPricePerLitreLoad as (
			-- Equipment Price per Litre, check values being imported - Load
			select distinct  
			C.[Sheet], c.[Org_Group], C.Location, C.[function], 'Load' as 'Activity', 'Operations' as 'Workstream', C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Diesel price per litre'  as 'Attribute', c.Unit, c.[Cost?]
					,case when pa.[Value] in ('0', NULL) then '0' else (c.[Value] / pa.[Value]) end as  [Value]
					FROM #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'')
					where c.org_group = 'Mines' and  c.Cost_Type = 'Diesel' and pa.attribute='Litres consumed' and c.Activity = 'Load')
				-- Burn Rate, only applicable to load
	,BurnRate as (
			select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, 'Diesel' as Cost_Type, c.Product, 'Burn Rate'  as 'Attribute', c.Unit, c.[Cost?]					
					,case when pa.[Value] in ('0', NULL)  or pb.[Value] in ('0', NULL) 
					then 0 else (c.[Value]/(pa.[Value]/pb.[Value])) end  as  [Value]
					FROM #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'')
					inner join #Final_Calc_Dataset pb on coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'')  and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.activity,'') = coalesce(pb.activity,'')
					where c.attribute='Litres consumed' and  pa.attribute='Total movement tonnes' and pb.attribute = 'Net rate')
	,RhTonnesperc as (
			-- rehandle tonnes %
			select distinct  c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RH tonnes %'  as 'Attribute', c.Unit, c.[Cost?]  
					,case when pa.[Value] in ('0', NULL)  
					then 0 else (c.[Value]/pa.[Value]) end  as  [Value]
					FROM #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'')
					where c.attribute='Rehandle movement' and  pa.attribute='Total movement tonnes'
			 )  

				 Select a.* into #MiningCostDrivers from (  
				select * from DrillDensity union all
				select * from DrillInventoryOpeningBal union all
				select * from DisplacedVolume union all
				select * from CostPerExplosive union all
				select * from DieselPricePerLitreHaul union all
				select * from DieselPricePerLitreLoad union all
				select * from BurnRate union all
				select * from RhTonnesperc ) a;

--select * from #MiningCostDrivers
-- Check drill stock sizes, if density is greater than a particular value
-- investigate cost per kg explosives
-- if the sum of drill stock is larger than x% of total tonnes then flag
insert into @results (severity, [message])
select 'warning', Location + ' cost explosive per kg calculated to be less than $0.01' from #MiningCostDrivers where Attribute='Cost explosive per kg' and Value < 0.01
;

with FleetsWithDieselBurnRate as (
select Location, Activity, Equipment_Type, Equipment from #Final_Calc_Dataset
where activity in ('Load', 'Haul') and Cost_Type='Diesel' and Attribute='Variable Cost' and (Value is null or Value <> 0)
)
insert into @results (severity, [message])
select 'warning', F.Location + ' ' + F.Equipment + ' diesel burn rate/price not calculated - check tonnes'
from FleetsWithDieselBurnRate F left join #MiningCostDrivers C on F.Location=C.Location and F.Activity=C.Activity
and F.Equipment_Type=C.Equipment_Type and F.Equipment=C.Equipment and C.Attribute = 'Diesel price per litre'
where (C.Value is null or C.Value = 0)
;
--Net rate calcs & Checks
-- OEE BackCalcs


with CalendarTime as (
			-- Calendar Time hours
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Calendar time'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value as Value
							from #Final_Calc_Dataset c
							where c.Attribute = 'Calendar time' )

	, CalenderTimeNotAggregate as (
				-- Calendar Time not aggregated
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Calendar time Not Aggregate'  as 'Attribute', c.Unit, c.[Cost?]
							, case when ca.Value = 0 then 0 else c.Value/ca.Value end as Value
							from CalendarTime c
							inner join #Final_Calc_Dataset ca on c.Activity = ca.Activity and c.Equipment = ca.Equipment
							where c.Attribute = 'Calendar time' and ca.Attribute = 'Average number of units'
									) 

	,StandbyTime as (
			-- Standby Time
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Standby time'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
			from #Final_Calc_Dataset c
			where c.Attribute = 'Standby time' )

	,ScheduledEquipDowntime as (
			-- scheduled equipment downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Scheduled equipment downtime raw'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value as Value
							from #Final_Calc_Dataset c
							where c.Attribute = 'Scheduled equipment downtime' )-- select * from ScheduledEquipDowntime

	,UnscheduledEquipDowntime as (
			-- unscheduled equipment downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Unscheduled equipment downtime raw'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
						from #Final_Calc_Dataset c
						where c.Attribute = 'Unscheduled equipment downtime' )

	,ScheduledProcessDowntime as (
			-- Scheduled Process Downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Scheduled process downtime raw'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
						from #Final_Calc_Dataset c
						where c.Attribute = 'Scheduled process downtime' )
--  Unscheduled process downtime excl. starve/block
	,UnscheduledProcessDowntime_exclsb as (
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Unscheduled process downtime excl. starve/block raw'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value as Value
							from #Final_Calc_Dataset c
							where c.Attribute in ('Unscheduled process downtime', 'Unscheduled process downtime excl. starve/block')) 
-- Starve Block time
	,Starve_Block as (
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Starved/blocked time raw'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value as Value
							from #Final_Calc_Dataset c
							where c.Attribute = 'Starved/blocked') --select * from Starve_Block
-- Production Time
	,ProductionTime as ( select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Production Time'  as 'Attribute', c.Unit, c.[Cost?]
									,ISNULL(c.Value,0) - (ISNULL(ca.Value,0) + ISNULL(cb.Value,0) + ISNULL(cc.Value,0) + ISNULL(cd.Value,0) +  ISNULL(ce.Value,0) + ISNULL(cf.Value,0))  as Value
									--,c.Value ss,ca.Value sdas,cb.Value dsad,cc.Value fsaa,cd.Value fsa ,ce.Value fssa ,cf.Value faa
						from #Final_Calc_Dataset c
						left join StandbyTime							ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
						left join ScheduledEquipDowntime				cb on coalesce(c.org_group ,'') = coalesce(cb.org_group ,'') and coalesce(c.location  ,'') = coalesce(cb.Location  ,'') and coalesce(c.[function],'') = coalesce(cb.[function],'')  and coalesce(c.equipment,'') = coalesce(cb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cb.equipment_type,'') and coalesce(c.activity,'') = coalesce(cb.activity,'') and coalesce(c.workstream,'') = coalesce(cb.workstream,'')
						left join UnscheduledEquipDowntime				cc on coalesce(c.org_group ,'') = coalesce(cc.org_group ,'') and coalesce(c.location  ,'') = coalesce(cc.Location  ,'') and coalesce(c.[function],'') = coalesce(cc.[function],'')  and coalesce(c.equipment,'') = coalesce(cc.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cc.equipment_type,'') and coalesce(c.activity,'') = coalesce(cc.activity,'') and coalesce(c.workstream,'') = coalesce(cc.workstream,'')
						left join ScheduledProcessDowntime				cd on coalesce(c.org_group ,'') = coalesce(cd.org_group ,'') and coalesce(c.location  ,'') = coalesce(cd.Location  ,'') and coalesce(c.[function],'') = coalesce(cd.[function],'')  and coalesce(c.equipment,'') = coalesce(cd.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cd.equipment_type,'') and coalesce(c.activity,'') = coalesce(cd.activity,'') and coalesce(c.workstream,'') = coalesce(cd.workstream,'')
						left join UnscheduledProcessDowntime_exclsb		ce on coalesce(c.org_group ,'') = coalesce(ce.org_group ,'') and coalesce(c.location  ,'') = coalesce(ce.Location  ,'') and coalesce(c.[function],'') = coalesce(ce.[function],'')  and coalesce(c.equipment,'') = coalesce(ce.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ce.equipment_type,'') and coalesce(c.activity,'') = coalesce(ce.activity,'') and coalesce(c.workstream,'') = coalesce(ce.workstream,'')
						left join Starve_Block							cf on coalesce(c.org_group ,'') = coalesce(cf.org_group ,'') and coalesce(c.location  ,'') = coalesce(cf.Location  ,'') and coalesce(c.[function],'') = coalesce(cf.[function],'')  and coalesce(c.equipment,'') = coalesce(cf.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cf.equipment_type,'') and coalesce(c.activity,'') = coalesce(cf.activity,'') and coalesce(c.workstream,'') = coalesce(cf.workstream,'')
						where c.Attribute = 'Calendar time') --select * from ProductionTime
--LeverCalculation 
	,UnscheduledEquipDowntimeBc as (
			-- unscheduled equipment downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Unscheduled equipment downtime'  as 'Attribute','%' as 'Unit', c.[Cost?]
						, case when (c.Value + ca.Value) = 0 then 0 else c.Value / (c.Value + ca.Value) end as Value
						from #Final_Calc_Dataset c
						inner join ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
						where c.Attribute = 'Unscheduled equipment downtime' )  

	,ScheduledProcessDowntimeBc as (
			-- Scheduled Process Downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Scheduled process downtime'  as 'Attribute','%' as 'Unit', c.[Cost?]
						, case when (c.Value + ca.Value) = 0 then 0 else c.Value / (c.Value + ca.Value) end as Value
						from #Final_Calc_Dataset c
						inner join ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
						where c.Attribute = 'Scheduled process downtime' ) --select * from ScheduledProcessDowntimeBc

--  Unscheduled process downtime excl. starve/block
	,UnscheduledProcessDowntime_exclsbBc as (
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Unscheduled process downtime excl. starve/block'  as 'Attribute', '%' as 'Unit', c.[Cost?]
						, case when (c.Value + ca.Value) = 0 then 0 else c.Value / (c.Value + ca.Value) end as Value
						from #Final_Calc_Dataset c
						inner join ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
						where c.Attribute = 'Unscheduled process downtime excl. starve/block') --select * from UnscheduledProcessDowntime_exclsbBc
	,CalculatedNetRate as ( 
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Calculated Net Rate'  as 'Attribute', 't/hr' as 'Unit', c.[Cost?]
					, case when ca.Value = 0 then 0 else c.value / ca.Value end as Value
					from #Final_Calc_Dataset c
					inner join ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
					where c.Attribute = 'Total movement tonnes')
				
				
			select a.* into #ProductionTime from (
				select * from UnscheduledEquipDowntimeBc			union all
				select * from CalendarTime							union all
				select * from StandbyTime							union all
				select * from ScheduledEquipDowntime				union all
				select * from UnscheduledEquipDowntime				union all
				select * from ScheduledProcessDowntime				union all
				select * from UnscheduledProcessDowntime_exclsb		union all
				select * from ScheduledProcessDowntimeBc			union all
				select * from UnscheduledProcessDowntime_exclsbBc	union all
				select * from CalenderTimeNotAggregate				union all
				select * from CalculatedNetRate						union all
				select * from ProductionTime
				) a;

-- if a mismatch here - investigate
--Select count(*) from #Final_Calc_Dataset  where attribute not in ('Fixed Cost', 'Variable Cost') and attribute = 'Calendar Time';
--Select * from #ProductionTime where Attribute = 'Calendar Time';
-- check if calendar time is greater than a particular value
--select * from #ProductionTime;

insert into @results (severity, [message])
select 'error', Location + ' ' + Equipment + ' production time less than zero'
from #ProductionTime where Attribute='Production Time' and Value < 0

--- Checks to ensure net rate matches total movement 
-- Check this again - You need the raw net rate to check otherwise it makes no sense!!
insert into @results (severity, [message])
select case when V.variance > 0.2 then 'error' else 'warning' end,
  V.Location + ' ' + V.Equipment + ' variance between total movement and net rate x production time is ' + cast(cast(V.variance*100 as int) as nvarchar) + '%'
from (select a.Location, a.Activity, a.Equipment_Type, a.Equipment,
  case
    when a.Value=b.Value*c.Value then 0
	when a.Value <> b.Value*c.Value and (a.Value = 0 or b.Value*c.Value=0) then 1
	else (b.Value*c.Value)/ a.Value - 1
  end as variance
  from #Final_Calc_Dataset a
  	inner join #Final_Calc_Dataset b on a.Location=b.Location and a.Activity=b.Activity and a.Equipment_Type=b.Equipment_Type and a.Equipment = b.Equipment
  	inner join #ProductionTime c on a.Location=c.Location and a.Activity=c.Activity and a.Equipment_Type=c.Equipment_Type and a.Equipment = c.Equipment
  	where a.Attribute = 'Total movement tonnes' and b.Attribute = 'Net Rate' and c.Attribute = 'Production Time') V
  where V.variance > 0.05
  	;
	

-- Load adjustments
with TotalProductiveMovementLoad as ( 
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total Productive Movement'  as 'Attribute', c.Unit, c.[Cost?] 
				, sum(distinct c.value) - sum( distinct pa.value) as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Attribute = 'Total Movement tonnes' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Load'
					group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] 
					 ) --select * from TotalProductiveMovementLoad
					 --done
	
	,TotalRehandleMovementLoad as ( 
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total Rehandle Movement'  as 'Attribute', c.Unit, c.[Cost?]
					,  sum(distinct c.value)  as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where  c.Activity = 'Load'  and c.Attribute = 'Rehandle movement' 
					group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] 
					) --select * from TotalRehandleMovementLoad
					--done
	
	,ReportProductiveMovement as (
						Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, 'Report Productive Movement'  as 'Attribute', c.Unit, c.[Cost?]
								,   sum(distinct c.value)  as Value
				from #Final_Calc_Dataset c 
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
				where  c.Attribute = 'Productive movement' and c.Activity is null
				group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, c.Unit, c.[Cost?] ) --select * from ReportProductiveMovement
				--done	
	,ReportRehandleMovement as (
				select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, 'Report Rehandle Movement'  as 'Attribute', c.Unit, c.[Cost?]
								, c.value - pa.value as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where  c.Attribute = 'Total Movement' and pa.Attribute = 'Productive movement'
					)-- select * from ReportRehandleMovement 
					-- done
	
	,RateAdjPMLoad as (
				Select C.[Sheet], c.[Org_Group], C.Location, 'Adjusted Productive Movement Rate factor' as Attribute
					,case when sum(c.Value) = 0 then 0 else sum(distinct pa.value)/sum (distinct c.Value) end as Value
					--,c.Value sfsf, pa.Value sfffss
					from TotalProductiveMovementLoad c, ReportProductiveMovement pa 
					where c.Location = pa.Location
					group by  C.Location, c.Sheet, c.Org_Group
					) --select * from RateAdjPMLoad  
					--done
	
	,RateAdjRHLoad as (
				Select 'Adjusted Rehandle Movement Rate factor' as Attribute, c.Location
				,case when sum(distinct c.Value) = 0 then 0 else sum(distinct pa.value)/sum( distinct c.Value) end as Value
					from TotalRehandleMovementLoad c, ReportRehandleMovement pa
					where c.Location = pa.Location
					group by c.location
					) -- select * from RateAdjRHLoad
					-- missing RH rates
	
	,RHTonnespercLoad as (
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Tonnes Movement Ratio'  as 'Attribute', c.Unit, c.[Cost?]
					, case when c.Value = 0 then 0 else pa.Value / c.Value end as Value--, pa.Value ssdsd, c.Value gddga
					from  #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'Total movement tonnes' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Load'
					
					) --select * from RHTonnespercLoad

	,RHhoursLoad as (
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Hours'  as 'Attribute', c.Unit, c.[Cost?]
					, case when c.Value = 0 then 0 else pa.Value / c.Value end as Value
					from  #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'RH rate' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Load'
				) --select * from RHhoursLoad

	,ProductionHrs as ( -- Total Operating time
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Production Time'  as 'Attribute', c.Unit, c.[Cost?]
					, case when pa.Value = 0 then 0 else (c.Value) / (pa.Value) end as Value
					from  #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
				--	inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pb.cost_type,'') and coalesce(c.workstream,'') = coalesce(pb.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'Total movement tonnes' and pa.Attribute = 'Net rate' --and c.Activity = 'Load' and pb.Attribute = 'Average number of units' and pb.Activity = 'Load'
						) --select * from ProductionHrs

	,PMRateLoad as ( 
				select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'PM rate'  as 'Attribute', c.Unit, c.[Cost?]
					, case when pa.Value - pb.Value = 0 then 0 else c.Value/(pa.Value - pb.Value) end as Value
					from TotalProductiveMovementLoad c
					inner join ProductionHrs pa  on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					inner join RHhoursLoad pb on		coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pb.cost_type,'') and coalesce(c.workstream,'') = coalesce(pb.workstream,'')
					where c.Attribute = 'Total Productive Movement' and pa.Attribute = 'Production Time' and pb.Attribute = 'Rehandle Hours')
					--select * from PMRateLoad
					-- Done
	,RHRateLoad as (Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Rate %'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
					from #Final_Calc_Dataset c
					where c.Activity = 'Load' and c.Attribute = 'RH rate')  --select * from RHRateLoad
  
	-- backcalcs starting
	,PMRateAdj_LoadBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted PM rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from PMRateLoad c, RateAdjPMLoad b 
							where c.Location = b.Location and b.Org_Group = c.Org_Group )  -- select * from PMRateAdj_LoadBc
	
	,RHRateAdj_LoadBc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted RH rate'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*b.Value as Value
								from RHRateLoad c, RateAdjRHLoad b
								where c.Location = b.Location)  --select * from RHRateAdj_LoadBc
	
	,ProductiveTonnes_LoadBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Productive Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*(b.Value -d.Value) as Value
									from PMRateAdj_LoadBc c
									inner join ProductionHrs b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
									inner join RHhoursLoad d on coalesce(c.Activity, '') = coalesce(d.Activity,'') and coalesce(c.org_group ,'') = coalesce(d.org_group ,'') and coalesce(c.location  ,'') = coalesce(d.Location  ,'') and coalesce(c.[function],'') = coalesce(d.[function],'') and coalesce(c.equipment,'') = coalesce(d.equipment,'') and coalesce(c.equipment_type,'') = coalesce(d.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(d.cost_type,'') and coalesce(c.workstream,'') = coalesce(d.workstream,'')
									where c.Location = b.Location and b.Attribute = 'Production Time' and c.Attribute = 'Adjusted PM rate' and d.Attribute = 'Rehandle Hours') --select * from ProductiveTonnes_LoadBc
	
	,RehandleTonnes_LoadBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Rehandle Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
									, c.Value*b.Value as Value
									from RHRateAdj_LoadBc c
									inner join RHhoursLoad b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
									where c.location = b.location) --select * from RehandleTonnes_LoadBc
	
	,TotalRHTonnes_LoadBc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Total RH Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*b.Value as Value
								from RHRateAdj_LoadBc c
								inner join RHhoursLoad b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
								) --select * from TotalRHTonnes_LoadBc
	, TotalRHPerMineLoad as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, NULL as [Equipment_type], 'NULL' As equipment, c.Cost_Type, c.Product, 'Adjusted Total RH Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, sum(c.Value*b.Value) as Value
								from RHRateAdj_LoadBc c
								inner join RHhoursLoad b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
								group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, c.Unit, c.[Cost?]
								
								) -- select * from TotalRHPerMine

	,TargetTonnes_Bc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Target Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value + b.Value as Value
							from ProductiveTonnes_LoadBc c
							inner join RehandleTonnes_LoadBc b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
							where c.Location = b.Location)  --select * from TargetTonnes_Bc
	

	/*Additional rates to be added to both load & haul*/

	,Load_AdjDesignRate as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Design Rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjPMLoad b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Design Rate' and c.Activity = 'Load') --select * from Load_AdjDesignRate

	,Adj_TM as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total Movement tonnes'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjPMLoad b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Total Movement tonnes' and c.Activity = 'Load') --select * from Adj_TM where Location = 'Whaleback'

	,Adj_RM as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Movement tonnes'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjPMLoad b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Rehandle movement' and c.Activity = 'Load') --select * from Adj_RM

	,Rehandle_Other as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], b.Activity, C.Workstream, NULL as equipment_type, NULL as equipment, NULL as Cost_Type, NULL as Product, 'Rehandle Other'  as 'Attribute', c.Unit, c.[Cost?] 
							,c.Value - b.Value as Value
							from  (select sum(value) as value, Activity, Location as Location from Adj_RM where activity = 'Load' group by Location, activity ) b
							inner join ReportRehandleMovement c on coalesce(c.location  ,'') = coalesce(b.Location  ,'') 
							where c.Location = b.Location 
					)  --select * from Rehandle_Other


			select a.* into #LoadAdjustments from (
			select * from Load_AdjDesignRate union all
			select * from Rehandle_Other a	union all
			Select * from RehandleTonnes_LoadBc union all
			Select * from PMRateAdj_LoadBc union all
			select * from RHRateAdj_LoadBc union all
			select * from TargetTonnes_Bc) a;

-- Mismatch - Investigate
--Select count(distinct Equipment)*5 from #Final_Calc_Dataset where activity = 'Load' and attribute not in ('Fixed Cost', 'Variable Cost')
-- ensure that the total productive movement has values
--Select * from #LoadAdjustments where equipment = 'WB LBHR 996 EXC'

-- Haul adjustments
with TotalProductiveMovementHaul as ( 
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total Productive Movement'  as 'Attribute', c.Unit, c.[Cost?] 
				, sum(distinct c.value) - sum( distinct pa.value) as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Attribute = 'Total Movement tonnes' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Haul'
					group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] 
					 ) --select * from TotalProductiveMovementHaul
					 --done
	
	,TotalRehandleMovementHaul as ( 
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total Rehandle Movement'  as 'Attribute', c.Unit, c.[Cost?]
					,  sum(distinct c.value)  as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where  c.Activity = 'Haul'  and c.Attribute = 'Rehandle movement' 
					group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] 
					) --select * from TotalRehandleMovementHaul
					--done
	
	,ReportProductiveMovement as (
						Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, 'Report Productive Movement'  as 'Attribute', c.Unit, c.[Cost?]
								,   sum(distinct c.value)  as Value
				from #Final_Calc_Dataset c 
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
				where  c.Attribute = 'Productive movement' and c.Activity is null
				group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, c.Unit, c.[Cost?] ) --select * from ReportProductiveMovement
				--done	
	,ReportRehandleMovement as (
				select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, 'Report Rehandle Movement'  as 'Attribute', c.Unit, c.[Cost?]
								, c.value - pa.value as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where  c.Attribute = 'Total Movement' and pa.Attribute = 'Productive movement'
					)-- select * from ReportRehandleMovement 
					-- done
	
	,RateAdjPMHaul as (
				Select C.[Sheet], c.[Org_Group], C.Location, 'Adjusted Productive Movement Rate factor' as Attribute
					,case when sum(c.Value) = 0 then 0 else sum(distinct pa.value)/sum (distinct c.Value) end as Value
					--,c.Value sfsf, pa.Value sfffss
					from TotalProductiveMovementHaul c, ReportProductiveMovement pa 
					where c.Location = pa.Location
					group by  C.Location, c.Sheet, c.Org_Group
					) --select * from RateAdjPMHaul  
					--done
	
	,RateAdjRHHaul as (
				Select 'Adjusted Rehandle Movement Rate factor' as Attribute, c.Location
				,case when sum(distinct c.Value) = 0 then 0 else sum(distinct pa.value)/sum( distinct c.Value) end as Value
					from TotalRehandleMovementHaul c, ReportRehandleMovement pa
					where c.Location = pa.Location
					group by c.location
					) -- select * from RateAdjRHHaul
					-- missing RH rates
	
	,RHTonnespercHaul as (
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Tonnes Movement Ratio'  as 'Attribute', c.Unit, c.[Cost?]
					, case when c.Value = 0 then 0 else pa.Value / c.Value end as Value--, pa.Value ssdsd, c.Value gddga
					from  #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'Total movement tonnes' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Haul'
					
					) --select * from RHTonnespercHaul

	,RHhoursHaul as (
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Hours'  as 'Attribute', c.Unit, c.[Cost?]
					, case when c.Value = 0 then 0 else pa.Value / c.Value end as Value
					from  #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'RH rate' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Haul'
				) --select * from RHhoursHaul

	,ProductionHrs as ( -- Total Operating time
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Production Time'  as 'Attribute', c.Unit, c.[Cost?]
					, case when pa.Value = 0 then 0 else (c.Value) / (pa.Value) end as Value
					from  #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
				--	inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pb.cost_type,'') and coalesce(c.workstream,'') = coalesce(pb.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'Total movement tonnes' and pa.Attribute = 'Net rate' --and c.Activity = 'Haul' and pb.Attribute = 'Average number of units' and pb.Activity = 'Haul'
						) --select * from ProductionHrs

	,PMRateHaul as ( 
				select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'PM rate'  as 'Attribute', c.Unit, c.[Cost?]
					, case when pa.Value - pb.Value = 0 then 0 else c.Value/(pa.Value - pb.Value) end as Value
					from TotalProductiveMovementHaul c
					inner join ProductionHrs pa  on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					inner join RHhoursHaul pb on		coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pb.cost_type,'') and coalesce(c.workstream,'') = coalesce(pb.workstream,'')
					where c.Attribute = 'Total Productive Movement' and pa.Attribute = 'Production Time' and pb.Attribute = 'Rehandle Hours')
					--select * from PMRateHaul
					-- Done
	,RHRateHaul as (Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Rate %'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
					from #Final_Calc_Dataset c
					where c.Activity = 'Haul' and c.Attribute = 'RH rate')  --select * from RHRateHaul
  
	-- backcalcs starting
	,PMRateAdj_HaulBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted PM rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from PMRateHaul c, RateAdjPMHaul b 
							where c.Location = b.Location and b.Org_Group = c.Org_Group )  -- select * from PMRateAdj_HaulBc
	
	,RHRateAdj_HaulBc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted RH rate'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*b.Value as Value
								from RHRateHaul c, RateAdjRHHaul b
								where c.Location = b.Location)  --select * from RHRateAdj_HaulBc
	
	,ProductiveTonnes_HaulBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Productive Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*(b.Value -d.Value) as Value
									from PMRateAdj_HaulBc c
									inner join ProductionHrs b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
									inner join RHhoursHaul d on coalesce(c.Activity, '') = coalesce(d.Activity,'') and coalesce(c.org_group ,'') = coalesce(d.org_group ,'') and coalesce(c.location  ,'') = coalesce(d.Location  ,'') and coalesce(c.[function],'') = coalesce(d.[function],'') and coalesce(c.equipment,'') = coalesce(d.equipment,'') and coalesce(c.equipment_type,'') = coalesce(d.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(d.cost_type,'') and coalesce(c.workstream,'') = coalesce(d.workstream,'')
									where c.Location = b.Location and b.Attribute = 'Production Time' and c.Attribute = 'Adjusted PM rate' and d.Attribute = 'Rehandle Hours') --select * from ProductiveTonnes_HaulBc
	
	,RehandleTonnes_HaulBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Rehandle Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
									, c.Value*b.Value as Value
									from RHRateAdj_HaulBc c
									inner join RHhoursHaul b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
									where c.location = b.location) --select * from RehandleTonnes_HaulBc
	
	,TotalRHTonnes_HaulBc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Total RH Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*b.Value as Value
								from RHRateAdj_HaulBc c
								inner join RHhoursHaul b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
								) --select * from TotalRHTonnes_HaulBc
	, TotalRHPerMineHaul as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, NULL as [Equipment_type], 'NULL' As equipment, c.Cost_Type, c.Product, 'Adjusted Total RH Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, sum(c.Value*b.Value) as Value
								from RHRateAdj_HaulBc c
								inner join RHhoursHaul b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
								group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, c.Unit, c.[Cost?]
								
								) -- select * from TotalRHPerMine

	,TargetTonnes_Bc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Target Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value + b.Value as Value
							from ProductiveTonnes_HaulBc c
							inner join RehandleTonnes_HaulBc b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
							where c.Location = b.Location)  --select * from TargetTonnes_Bc
	
	
	/*Additional rates to be added to both load & haul*/
	,Haul_AdjDesignRate as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type , c.Product , 'Design Rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjPMHaul b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Design Rate' and c.Activity = 'Haul') --select * from Haul_AdjDesignRate

	,Adj_TM as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total Movement tonnes'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjPMHaul b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Total Movement tonnes' and c.Activity = 'Haul') --select * from Adj_TM where Location = 'Whaleback'

	,Adj_RM as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product , 'Rehandle Movement tonnes'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjPMHaul b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Rehandle movement' and c.Activity = 'Haul') --select * from Adj_RM

	,Rehandle_Other as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], b.Activity, C.Workstream, NULL as equipment_type, NULL as equipment, NULL as Cost_Type, NULL as Product, 'Rehandle Other'  as 'Attribute', c.Unit, c.[Cost?] 
							,c.Value - b.Value as Value
							from  (select sum(value) as value, Activity, Location as Location from Adj_RM where activity = 'Haul' group by Location, activity ) b
							inner join ReportRehandleMovement c on coalesce(c.location  ,'') = coalesce(b.Location  ,'') 
							where c.Location = b.Location 
					)  --select * from Rehandle_Other


			select a.* into #HaulAdjustments from (
			select * from Haul_AdjDesignRate a	union all
			select * from Rehandle_Other a	union all
			Select * from RehandleTonnes_HaulBc union all
			Select * from PMRateAdj_HaulBc union all
			select * from RHRateAdj_HaulBc union all
			select * from TargetTonnes_Bc) a;

-- Mismatch - Investigate
--Select count(distinct Equipment)*5 from #Final_Calc_Dataset where activity = 'Haul' and attribute not in ('Fixed Cost', 'Variable Cost')
--Select * from #HaulAdjustments			

insert into @results (severity, [message])
select 'error', Location + ' ' + Equipment + ' calculated target tonnes < 0'
from #HaulAdjustments where Attribute='Target Tonnes' and Value < 0
;

-------------------######################################################################################################################-----------------------	
-------------------######################################################################################################################-----------------------
-------------------######################################################################################################################-----------------------
--------------------------------------------------Rail----------------------------------------------------------------------------------------------------------


--Re rail recon calculations
With RailInvTransit as (select distinct  NULL as [Sheet], NULL as [Org_Group], null as Location, null as [function], null as Activity, null as Workstream, null as [Equipment_type], null as equipment, null as Cost_Type, null as Product, 'Rail inventory transit' as Attribute, null as  Unit, null as [Cost?]
							 , sum(distinct b.value) - sum(distinct a.Value) as Value
							from #Final_Calc_Dataset a , #Final_Calc_Dataset b
						where a.Activity = 'TLO' and a.Attribute = 'Target tonnes' and a.equipment not in ('OB24 TLO','OB18 TLO')
						and b.Org_Group = 'Port' and b.Activity = 'Inflow' and b.Attribute = 'Target Tonnes') --select * from RailInvTransit

	,CurrentActiveRakes as (
					select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] , c.Value as Value
						from #Final_Calc_Dataset c
						where c.[Function] = 'Mainline' and c.Attribute = 'Active Rakes')

	, TotalOOR as (
					select C.[Sheet], c.[Org_Group], NULL as Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Total OOR' as Attribute, c.Unit, c.[Cost?] 
							, sum(c.Value) as Value
						from #Final_Calc_Dataset c
						where c.Activity = 'TLO' and c.Attribute = 'Target Tonnes' and c.Equipment not in ('OB24 TLO','OB18 TLO')
						group by C.[Sheet], c.[Org_Group],  C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] ) --select * from TotalOOR

	--Throughput will be 'target tonnes'
	, OORbyLocation as (
					select C.[Sheet], c.[Org_Group], c.Location as Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] 
							, sum(c.Value) as Value
						from #Final_Calc_Dataset c
						where c.Activity = 'TLO' and c.Attribute = 'Target Tonnes' and c.Equipment not in ('OB24 TLO','OB18 TLO')
						group by C.[Sheet],c.Location, c.[Org_Group],  C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] ) --select * from OORbyLocation
	, MaximumTonnes as (
					select C.[Sheet], c.[Org_Group], c.Location as Location, NULL as [function], NULL as Activity, NULL as Workstream, NULL as [Equipment_type], NULL as Equipment, NULL as Cost_Type, null as Product, 'Maximum tonnes constraint' as Attribute, c.Unit, c.[Cost?] 
							, 1000000 as Value
						from #Final_Calc_Dataset c
						where c.Activity = 'TLO' and c.Attribute = 'Target Tonnes' and c.Equipment not in ('OB24 TLO','OB18 TLO')
						 ) 
						--select * from MaximumTonnes

	, OORbyLocationAndEquip as (
				select C.[Sheet], c.[Org_Group], c.Location as Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment, c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] 
						, sum(c.Value) as Value
					from #Final_Calc_Dataset c
					where c.Activity = 'TLO' and c.Attribute = 'Target Tonnes' and c.Equipment not in ('OB24 TLO','OB18 TLO')
					group by C.[Sheet],c.Location, c.[Org_Group],  C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?], c.Equipment ) --select * from OORbyLocationAndEquip

	, TimeAtMine as (
					select C.[Sheet], c.[Org_Group], c.Location, 'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], c.Equipment, c.Cost_Type, c.Product, 'Time at mine' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
					,sum(c.value) as Value 
						from #Final_Calc_Dataset c
						where c.Attribute = 'queue to load' or c.Attribute = 'Pre Load' or c.Attribute = 'Train Load' or c.Attribute = 'Post Load'
								or c.Attribute = 'mine to mine queue' or c.Attribute = 'mine 1 pre load' or c.Attribute = 'mine 1 train load'
								or c.Attribute = 'mine 1 to mine 2' or c.Attribute = 'mine 2 train load' or c.Attribute = 'mine 2 post load'
						group by C.[Sheet], c.Location, c.[Org_Group], C.Activity, C.Workstream, C.[Equipment_type],c.Equipment, c.Cost_Type, c.Product, c.[Cost?] )

	, TotalPortInflow as (
					select C.[Sheet], c.[Org_Group], c.Location, 'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Port Ore' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
							, sum(c.value) as Value 
					from #Final_Calc_Dataset c
						where c.Org_Group = 'Port' and c.Activity = 'Inflow' and c.Attribute = 'Target Tonnes'
						group by C.[Sheet], c.[Org_Group], c.Location,  C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?] 
						)

	, NoOfOreCars as (
						select C.[Sheet], c.[Org_Group], c.Location, 'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'No. of Ore Cars' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
						, c.Value as Value
							from #Final_Calc_Dataset c
							where c.org_group = 'Rail' and c.attribute in ('No of ore cars', 'No. of ore cars') and c.[function] = 'mainline'
						) 

	, OreCarTonnage as (
						select C.[Sheet], c.[Org_Group], c.Location,'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Ore car tonnage' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
						, c.Value as Value
							from #Final_Calc_Dataset c
							where c.org_group = 'Rail' and c.attribute in ('Ore car tonnage') and c.[function] = 'mainline'
						) 

	, RakeTonnes as (
						select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Rake tonnes' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
						, c.Value*ca.Value as Value
							from OreCarTonnage c
							inner join NoOfOreCars ca on coalesce(c.Activity, '') = coalesce(ca.Activity,'') and coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.[function]  ,'') = coalesce(ca.[function]  ,'') 
								
						) 

	, DepPerDay as ( --match the max departures per day to this
						select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Departures per Day' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
						, case when ca.Value = 0 then 0 else c.Value/ca.Value/365 end as Value
							from OORbyLocation c
							inner join RakeTonnes ca on coalesce(c.Location, '') = coalesce(ca.Location,'') 
								
						) --select * from DepPerDay

	, ToFromJunction as (select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'To/From Junction' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								, sum(c.Value) as Value
								from #Final_Calc_Dataset c
									where c.org_group = 'Rail' and  c.attribute = 'Junction to mine queue' or c.attribute = 'Mine queue to junction'
								group by C.[Sheet], c.[Org_Group], c.Location, C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?], c.[Function] ) 

	, CarDumperWeight as (	
						select  C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'CD Weight' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								,case when sum(b.Value) = 0 then 0 else sum(c.Value)/sum(b.Value) end as Value
								from #Final_Calc_Dataset c, (select sum(value) as Value from #Final_Calc_Dataset  where Equipment in ('CD1', 'CD2','CD3','CD4','CD5') and Attribute = 'Target Tonnes') b
									where c.org_group = 'Port' and c.Equipment in ('CD1', 'CD2','CD3','CD4','CD5') and c.Attribute = 'Target Tonnes'
								group by C.[Sheet], c.[Org_Group], c.Location, C.Activity, C.Workstream, C.[Equipment_type], c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.[Function] )
								--select * from CarDumperWeight
									
	, CarDumperCycle as (
						select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'CD Cycle' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								, sum(c.Value) as Value
								from #Final_Calc_Dataset c
									where  c.Attribute in ('Queue to Dump', 'Dump')
								group by C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.[Cost?] 
							) --select * from CarDumperCycle

	, CDCycleContribution as (
						select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'CD Cycle Contribution' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								, sum(c.Value)*sum(ca.Value) as Value
								from CarDumperCycle c
								inner join CarDumperWeight ca on coalesce(c.equipment, '') =  coalesce(ca.equipment, '')
								group by C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.[Cost?] 
							) --select * from CycleContribution

	, NelsonFuncicaneWeight as (
						select C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment , c.Cost_Type, c.Product, 'NF Weight' as 'Attribute', '%' as 'unit', c.[Cost?] 
								,sum(c.Value) as Value 
								from
								(
										select  a.[Sheet], a.[Org_Group], a.[Function], a.Activity, a.Workstream, a.[Equipment_type], a.Equipment , a.Cost_Type, a.Product, a.[Cost?]
											,case when a.Equipment in ('CD1','CD2', 'CD3') then 'Nelson Point' else 'Finucane Island' end as Location, 'CD Weight' as Reference
											,case when sum(b.Value) = 0 then 0 else  sum(a.Value)/sum(b.Value) end as Value
											from #Final_Calc_Dataset a, (select sum(value) as Value from #Final_Calc_Dataset  where Equipment in ('CD1', 'CD2','CD3','CD4','CD5') and Attribute = 'Target Tonnes') b
											where a.org_group = 'Port' and  a.Equipment in ('CD1', 'CD2','CD3','CD4','CD5') and a.Attribute = 'Target Tonnes'
											group by a.Equipment, a.[Sheet], a.[Org_Group], a.Location, a.[Function], a.Activity, a.Workstream, a.[Equipment_type], a.Equipment , a.Cost_Type, a.Product, a.[Cost?])  c 
									group by  C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type] , c.Cost_Type, c.Product,  c.[Cost?] 
									)

	, NFCycle as (
					select C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment , c.Cost_Type, c.Product, 'NF Cycle' as 'Attribute', '%' as 'unit', c.[Cost?] 
							,  sum(c.Value) as Value
							from #Final_Calc_Dataset c
								where   c.Attribute in ( 'Port to dumper queue' ,'Post dump')
								group by C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type] , c.Cost_Type, c.Product, c.[Cost?] ) --select * from NFCycle
								--select * from #Final_Calc_Dataset where attribute like '%dump%'
	, NFCycleContribution as ( 
								select C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment , c.Cost_Type, c.Product, 'NFCycle Contribution' as 'Attribute', '%' as 'unit', c.[Cost?] 
								,  sum(c.Value)*sum(ca.Value) as Value
								from NFCycle c
								inner join NelsonFuncicaneWeight ca on ca.Location = c.Location
								group by C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?] 
									) --select * from NFCycleContribution

				, TimeAtPort as ( select c.value + ca.value as value
								from (select sum(value) as value from NFCycleContribution) c, (select sum(value) as value from  CDCycleContribution) ca
										) --select * from TimeAtPort
					
				, RestOfCycle as ( select c.value+ca.value as value
						from 
							(select sum(value) as value from #Final_Calc_Dataset where Attribute in ('Empty travel to junction','Loaded travel from junction')) c,
							TimeAtPort ca) --select * from RestOfCycle
					--select * from #Final_Calc_Dataset where attribute like '%loaded%'
				, TotalDepPerDay as ( select sum(value) as Value from DepPerDay)
					
				, CycleTime as (select C.[Sheet], c.[Org_Group], cb.Location, 'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], c.Equipment, c.Cost_Type, c.Product, 'Cycle Time' as 'Attribute', 'hr' as 'unit', c.[Cost?]
									,c.value + cb.Value + ca.value as value
 									from ToFromJunction c,
									(select case when a.Location in ('Whaleback','Jimblebar','Eastern Ridge') then 'east' else 'west' end as Region, a.Location,a.Value from TimeAtMine a) cb
									, RestOfCycle ca
									where c.Location = cb.Region) 	
														
	,AvgRakeTons as (
						select C.[Sheet], c.[Org_Group], NULL as location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Avg Rake Tonnes' as 'Attribute', 't' as 'unit', c.[Cost?]
						,case when cb.Value = 0 then 0 else sum(c.Value*ca.value)/cb.Value end as value
						from TotalDepPerDay cb, RakeTonnes c
						inner join DepPerDay ca on c.Location = ca.Location
						group by C.[Sheet], c.[Org_Group], c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?], cb.Value
						) --select * from AvgRakeTons

	,AvgTimeAtMine as (
						select C.[Sheet], c.[Org_Group], NULL as location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Avg Time at Mine' as 'Attribute', 't' as 'unit', c.[Cost?]
								,case when cb.Value = 0 then 0 else sum(c.Value*ca.value)/cb.Value end as value
								from TotalDepPerDay cb, TimeAtMine c
								inner join DepPerDay ca on c.Location = ca.Location
								group by C.[Sheet], c.[Org_Group], c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?], cb.Value
							) --select * from AvgTimeAtMine	

	,AvgToFromJunction as (		
							select Ca.[Sheet], ca.[Org_Group], NULL as location, ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], NULL as Equipment, ca.Cost_Type, null as Product, 'Avg To From Junction' as 'Attribute', 't' as 'unit', ca.[Cost?]
								,case when c.Value = 0 then 0 else sum(cb.Value*ca.value)/c.Value end as value
								from TotalDepPerDay c, ToFromJunction ca
										inner join (select case when a.Location in ('Whaleback','Jimblebar','Eastern Ridge') then 'east' else 'west' end as Region, a.Location,a.Value from DepPerDay a) cb
										on ca.Location = cb.Region
								group by Ca.[Sheet], ca.[Org_Group], ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], ca.Cost_Type, ca.[Cost?],c.Value
						) 
									
	,AvgRestOfCycle as ( 
							select ca.[Sheet], ca.[Org_Group], NULL as location, ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], NULL as Equipment, ca.Cost_Type, null as Product, 'Avg Rest of Cycle' as 'Attribute', 't' as 'unit', ca.[Cost?]
								, case when cb.Value = 0 then 0 else  sum(c.Value*ca.value)/cb.Value end as value, c.value lsds, cb.Value dsss
								from TotalDepPerDay cb, RestOfCycle c, DepPerDay ca
								group by Ca.[Sheet], ca.[Org_Group], ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], ca.Cost_Type, ca.[Cost?], cb.Value
											,c.value, ca.value) 

	,AvgTotalCycle as ( 
							select ca.[Sheet], ca.[Org_Group], NULL as location, ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], NULL as Equipment, ca.Cost_Type, null as Product, 'Avg Total of Cycle' as 'Attribute', 't' as 'unit', ca.[Cost?]
								, case when cb.Value = 0 then 0 else sum(c.Value*ca.value)/cb.Value end as value
								from TotalDepPerDay cb, CycleTime c, DepPerDay ca
								where ca.Location = c.Location
								group by Ca.[Sheet], ca.[Org_Group], ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], ca.Cost_Type, ca.[Cost?], cb.Value) 
								--select * from AvgTotalCycle

	,NumberActiveRakes as (	select	c.[Sheet], 'Rail' as Org_group, NULL as location, 'Mainline' as [function], NULL as Activity, NULL as Workstream,  NULL as Equipment_Type, NULL as Equipment, c.Cost_Type, null as Product, 'Active Rakes' as 'Attribute', 't' as 'unit', c.[Cost?]
								--select 'Rail' as Org_group, 'Mainline' as [function], 'Active Rakes' as Reference
								, ((a.value + d.Value/(365*b.value))*(c.value/24)) as value
								from AvgTotalCycle c, RailInvTransit d, AvgRakeTons b, TotalDepPerDay a) --select * from NumberActiveRakes

	,LoadTimePerTrain as ( select ca.[Sheet], ca.[Org_Group],  ca.location, ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type],ca.Equipment, ca.Cost_Type, ca.Product, ca.Attribute as 'Attribute', 'h' as 'unit', ca.[Cost?]
								, ca.Value--, sum(c.Value*ca.value)/cb.Value as value
								from #Final_Calc_Dataset ca
								where Attribute in ( 'Train load', 'Mine 1 Train Load', 'Mine 2 Train Load')
								) --select * from LoadTimePerTrain

	,TotalDepTrains as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Total Departure Trains' as 'Attribute', '#' as 'unit', c.[Cost?] 
						, c.Value * 365/2 as Value
							from DepPerDay c) --select * from TotalDepTrains

	, TotalLoadHours as (select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], b.Equipment, c.Cost_Type, c.Product, 'Total Load Hours' as 'Attribute', 'h' as 'unit', c.[Cost?] 
							, c.Value * ca.Value as Value
								from LoadTimePerTrain c 
								inner join TotalDepTrains ca on c.Location = ca.Location 
								inner join  
								(select distinct b.Location, c.Equipment as oc, c.Attribute
										, case	
											when c.Attribute = 'Mine 1 Train Load' then 'TLO1'
											when c.Attribute = 'Mine 2 Train Load' then 'TLO2'
											when c.Attribute = 'Train load' and c.Location = 'Eastern Ridge' then 'OB25 TLO'
											when c.Attribute = 'Train load' and c.Location = 'Whaleback' then 'TLO'
											when c.Attribute = 'Train load' and c.Location = 'Jimblebar' then 'JMB TLO'
											when c.Attribute = 'Train load' and c.Location = 'Area C' then 'TLO'
											else '' end as Equipment
												from #Final_Calc_Dataset b  
												inner join LoadTimePerTrain c	on b.Location = c.Location)
									 d on c.Location = d.Location  and d.Attribute = c.Attribute
								inner join #Final_Calc_Dataset b on coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.workstream  ,'') = coalesce(b.workstream  ,'') and d.Equipment = b.Equipment
								where b.Activity = 'TLO' and b.Attribute = 'Target Tonnes' and b.Equipment not in ('OB24 TLO','OB18 TLO')
							) --select * from TotalLoadHours

	, EffectiveLoadingHours as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], b.equipment, c.Cost_Type, c.Product, 'Effective Loading Hours'  as 'Attribute', c.Unit, c.[Cost?] 
							,case when b.Value = 0 then 0 else c.value/b.Value end as Value
							from OORbyLocationAndEquip c
							inner join #Final_Calc_Dataset b on  coalesce(c.org_group ,'') = coalesce(b.org_group , '') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') 
							where b.Attribute = 'Net rate' and b.Activity = 'TLO' and b.Equipment not in ('OB24 TLO','OB18 TLO') ) --select * from EffectiveLoadingHours
	
	, TLODowntimeLoading as (	select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Effective Loading Hours'  as 'Attribute', c.Unit, c.[Cost?] 
										,c.value - b.Value as Value, c.Value shdh, b.Value shhsbd
										from TotalLoadHours c
										inner join EffectiveLoadingHours b on c.Location = b.Location and c.Equipment = b.Equipment) --select * from TLODowntimeLoading
	
	, TotalTLOdowntimeExcSchMain as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total TLO downtime exc sch. maint.'  as 'Attribute', c.Unit, c.[Cost?] 
										,sum(c.value) as Value
										from #ProductionTime c 
										where c.Attribute in ('Scheduled process downtime raw','Unscheduled equipment downtime raw','Unscheduled process downtime excl. starve/block raw')
										and c.Activity = 'TLO' and c.Equipment not in ('OB24 TLO','OB18 TLO')
										group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] )

	, DTImpactingTrains as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Downtime Impacting Trains                     '  as 'Attribute', '%' as unit, c.[Cost?] 
									, case when b.Value = 0 then 0 else c.Value / b.Value end as Value
									from TLODowntimeLoading c
									inner join TotalTLOdowntimeExcSchMain b on c.Equipment = b.Equipment  and c.Location = b.Location 			 
								)

	, DumpTime as			(select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'Dump Time' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								, sum(c.Value) as Value
									from #Final_Calc_Dataset c
										where  c.Attribute in ( 'Dump')
									group by C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.[Cost?])

	, CarDumperTonnes as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #Final_Calc_Dataset c
										where  c.Attribute in ( 'Target Tonnes') and c.equipment in ('CD1','CD2','CD3','CD4','CD5')				
									)

	, CarDumperNetRate as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #Final_Calc_Dataset c
										where  c.Attribute in ( 'Net Rate') and c.equipment in ('CD1','CD2','CD3','CD4','CD5')
									)

	, CarDumperProductionTime as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.Attribute, c.unit, c.[Cost?] 
									, c.Value as Value
									from #ProductionTime c
									where   c.equipment in ('CD1','CD2','CD3','CD4','CD5') and c.attribute = 'Production Time'
									)

	, CarDumperUnscheduledEqp as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.Attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #ProductionTime c
									where   c.equipment in ('CD1','CD2','CD3','CD4','CD5') and c.attribute = 'Unscheduled equipment downtime raw')

	, CarDumperScheduledProcess as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.Attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #ProductionTime c
									where   c.equipment in ('CD1','CD2','CD3','CD4','CD5') and c.attribute = 'Scheduled process downtime raw')

	, CarDumperUnschedProcess as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.Attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #ProductionTime c
									where   c.equipment in ('CD1','CD2','CD3','CD4','CD5') and c.attribute = 'Unscheduled process downtime excl. starve/block raw'
									) --select * from CarDumperUnschedProcess
						--	select * from #ProductionTime
	, HoursOfDumpDownTime as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'Hours of Dump Downtime CD' as 'Attribute', c.unit, c.[Cost?] 
								, case when cc.value*ca.Value-cb.Value = 0 then 0 else c.Value/cc.value*ca.Value-cb.Value end as Value
									from CarDumperTonnes c
									inner join DumpTime					ca on c.equipment = ca.equipment
									inner join CarDumperProductionTime	cb on c.equipment = cb.equipment
									, AvgRakeTons				cc 
									) --select * from HoursOfDumpDownTime

	, DowntimeImpactingTrainsCD as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'Hours of Downtime CD' as 'Attribute', c.unit, c.[Cost?] 
								, case when (ca.Value + cb.Value + cc.Value) = 0 then 0 else c.Value/(ca.Value + cb.Value + cc.Value) end as Value
								--, c.Value wwds, ca.Value sdfa, cb.Value sdsdfa, cc.Value sdajjff
									from HoursOfDumpDownTime c
									inner join CarDumperUnscheduledEqp ca on c.equipment = ca.equipment
									inner join CarDumperUnschedProcess	cb on c.equipment = cb.equipment
									inner join CarDumperScheduledProcess cc on c.equipment = cc.equipment
									) --select * from DowntimeImpactingTrainsCD
	, MaximumRakes as (
					select top 1 NULL as [Sheet], 'Rail' as [Org_Group], NULL as Location, 'Shuttle' as [function], 'Rail' as Activity, 'Operations' as Workstream, NULL as [Equipment_type], NULL as Equipment, NULL as Cost_Type, null as Product, 'Maximum allowable active rakes' as Attribute, NULL as Unit, NULL as [Cost?] 
							, 6 as Value
						)
					select a.* into #ActiveRakesCalc from 
					(
						select * from NumberActiveRakes union all
						select * from DTImpactingTrains union all
						select * from RailInvTransit    union all
						select * from MaximumTonnes     union all
						select * from MaximumRakes		union all
						select * from TotalOOR			union all
						select * from DowntimeImpactingTrainsCD
						) a

 if (select abs(b.value/a.Value) as value from #ActiveRakesCalc a,#ActiveRakesCalc b where a.Attribute = 'Total OOR' and  b.Attribute = 'Rail inventory transit') > 0.1
 insert into @results (severity, [message]) values ('warning', 'Mainline calculated rail inventory transit > 10% of total OOR')

 declare @ar_calc float = (select value from #ActiveRakesCalc where Attribute='Active Rakes')
 declare @ar_var float = (select abs(@ar_calc / b.Value - 1) from #Final_Calc_Dataset b where b.Attribute = 'Active Rakes' and b.[function] = 'Mainline');
if @ar_var >= 0.01
insert into @results (severity, [message]) select
  case when @ar_var > 0.05 then 'error' else 'warning' end,
  'Active rakes calculated from cycle (' + cast(@ar_calc as nvarchar) + ') differs from supplied value by ' + cast(cast(@ar_var*100 as int) as nvarchar) + '%'
;
		-------------------######################################################################################################################-----------------------	
		-------------------######################################################################################################################-----------------------
		-------------------######################################################################################################################-----------------------
		--------------------------------------------------------------------------------Port----------------------------------------------------------------------------
; 
	With Screened as (
	-- Screened
	select distinct  c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Screened'  as 'Attribute', c.Unit, c.[Cost?]
			,c.[Value]*(1 - pa.[Value]) as [Value]
			FROM #Final_Calc_Dataset c
			left join #Final_Calc_Dataset pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.workstream, '') = coalesce(pa.workstream,'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.location,'') = coalesce(pa.location,'')
			where  c.Attribute = 'Lump' and pa.Attribute = 'LRP Bypass') --select * from Screened
	-- RSF
	,RSF as (
	select distinct  c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RSF'  as 'Attribute' ,c.Unit, c.[Cost?] 
			,case when  pa.value = 0 or (1 + (c.[Value]/(pa.value))) = 0 then 0 else (c.[Value]/(pa.value))/(1 + (c.[Value]/(pa.value))) end as [Value]
			FROM #Final_Calc_Dataset c
			left join Screened pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.workstream, '') = coalesce(pa.workstream,'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.location,'') = coalesce(pa.location,'')
			where  c.Attribute = 'Screen stack' and pa.Attribute = 'Screened' ) --select * from RSF

				-- Yard outflow
				,YardOutflow as ( select distinct c.sheet, C.[Org_Group], C.Location, 'Yard Outflow'  as 'Attribute' ,c.Unit, c.[Cost?]
								, sum(c.value) as Value
								from #Final_Calc_Dataset c
									where c.Org_Group = 'Port' and c.Activity = 'Outflow' and c.Equipment_Type = 'Shiploader' and c.Attribute = 'Target Tonnes'
								group by  c.sheet, C.[Org_Group], C.Location,c.Unit, c.[Cost?]) -- select * from YardOutflow

	-- Lump ratio
	,LR as (select distinct  c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Lump ratio'  as 'Attribute' ,c.Unit, c.[Cost?] 
			,case when ca.value = 0 then 0 else c.[Value] / ca.[Value] end as [Value]
			FROM #Final_Calc_Dataset c
			inner join YardOutflow ca on ca.Location = c.Location and ca.Org_Group = c.Org_Group
			where  c.Attribute = 'Lump' ) 
				
	-- DSO
	,DSO as (select distinct  c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'DSO'  as 'Attribute', c.Unit, c.[Cost?] 
			,ca.[Value] * c.[Value] as [Value]
			FROM #Final_Calc_Dataset c
			inner join #Final_Calc_Dataset ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'')  and coalesce(c.workstream, '') = coalesce(ca.workstream,'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.location,'') = coalesce(ca.location,'')
			where  ca.Attribute = 'Yard Inflow' and c.Attribute = 'DL%' )	
		
	-- Screen Stack Per Ton outflow
	, ScreenStackPerTon as (select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Screen stack per ton outflow'  as 'Attribute' , c.Unit, c.[Cost?]  
								,case when (1-pb.Value) = 0 then 0 else (pb.Value * pa.Value *(1 - c.[Value])) / (1 - pb.Value) end as [Value]
								from   #Final_Calc_Dataset c
								inner join LR pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'')  and coalesce(c.workstream, '') = coalesce(pa.workstream,'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.location,'') = coalesce(pa.location,'')
								inner join RSF pb on coalesce(c.org_group ,'') = coalesce(pb.org_group ,'')  and coalesce(c.workstream, '') = coalesce(pb.workstream,'')  and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.location,'') = coalesce(pb.location,'')
								where c.Attribute = 'LRP Bypass') 	 
		 
	--Reclaimed 
	,Reclaimed as (select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Reclaimed'  as 'Attribute', c.Unit, c.[Cost?] 
						,(ca.Value + (ca.Value*pe.Value) - c.Value) as [Value] 
						from   DSO c
						inner join YardOutflow ca on ca.Location = c.Location and ca.Org_Group = c.Org_Group  
						inner join ScreenStackPerTon pe on coalesce(c.org_group ,'') = coalesce(pe.org_group ,'') and coalesce(c.[function],'') = coalesce(pe.[function] ,'')  and coalesce(c.location,'') = coalesce(pe.location,'')
							) 

					-- Reclaimer Throughput
				,ReclaimerThroughput as ( select distinct c.sheet, C.[Org_Group], C.Location, 'Reclaimer Throughput'  as 'Attribute' 
								, sum(c.value) as Value
								from #Final_Calc_Dataset c
									where c.Org_Group = 'Port' and c.Activity = 'Outflow' and c.Equipment_Type = 'Reclaimer' and c.Attribute = 'Target Tonnes'
								group by  c.sheet, C.[Org_Group], C.Location) 

	--Write off adjustments
	,WriteOffAdj as (	select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Write off adjustments'  as 'Attribute', c.Unit, c.[Cost?] 
								,  c.Value - ca.Value  as [Value] 
								from  Reclaimed c
								inner join ReclaimerThroughput ca on    coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location ,'') = coalesce(ca.location ,'') 
									) 
	--Inventory change 
	,InventoryChange as (select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Inventory change'  as 'Attribute', c.Unit, c.[Cost?]
							,c.Value - ca.Value + cb.Value as [Value] 
									from   #Final_Calc_Dataset c
									inner join YardOutflow ca on    coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location ,'') = coalesce(ca.location ,'')
									inner join WriteOffAdj cb on coalesce(c.org_group ,'') = coalesce(cb.org_group ,'') and coalesce(c.[function],'') = coalesce(cb.[function] ,'') and coalesce(c.workstream, '') = coalesce(cb.workstream,'')  and coalesce(c.equipment,'') = coalesce(cb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cb.equipment_type,'') and coalesce(c.location,'') = coalesce(cb.location,'')
									where c.Attribute = 'Yard Inflow') 
	-- opening stock
	,OpeningStock as ( 
					select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Opening stock'  as 'Attribute', c.Unit, c.[Cost?] 
				,c.Value - ca.Value as [Value] 
				from   #Final_Calc_Dataset c
						inner join InventoryChange ca on    coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location,'') = coalesce(ca.location,'')
						where c.Attribute = 'Closing stock')
	-- Total Ore Handled
	,TotalOreHandled as (select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total ore handled'  as 'Attribute', c.Unit, c.[Cost?] 
						,pe.Value + c.Value - pe.Value + pa.Value + pb.Value as [Value] 
							from   #Final_Calc_Dataset c
							inner join DSO pe		on coalesce(c.org_group ,'') = coalesce(pe.org_group ,'') and coalesce(c.[function],'') = coalesce(pe.[function] ,'')  and coalesce(c.location,'') = coalesce(pe.location,'')
							inner join Reclaimed pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.[function],'') = coalesce(pa.[function] ,'')  and coalesce(c.location,'') = coalesce(pa.location,'')
							inner join Screened pb	on coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.[function],'') = coalesce(pb.[function] ,'')  and coalesce(c.location,'') = coalesce(pb.location,'')
							where c.Attribute = 'Yard Inflow')
	--select * from #Final_Calc_Dataset where Equipment like 'SL C%'
	, SLConVConsumables as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
								,case when sum (distinct ca.Value) + sum(distinct cb.value) = 0 
								then 0 
								else (c.Value/(sum (distinct ca.Value) + sum(distinct cb.value))) end as Value
								from #Final_Calc_Dataset c 
								inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Reclaimed' as 'Attribute' , sum(a.Value) as Value 
													from Reclaimed a where a.Attribute = 'Reclaimed' group by a.Location) ca on c.Location = ca.location
								inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Screened' as 'Attribute' , sum(a.Value) as Value 
													from Screened a where a.Attribute = 'Screened' group by a.Location) cb on c.Location = cb.location
								where c.Cost_Type = 'Consumables' and ca.Attribute = 'Reclaimed' and c.Equipment = 'SL Conv Syst' and cb.Attribute = 'Screened'
								group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.Value )
	, SLConVMaterials as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
								,case when sum (distinct ca.Value) + sum(distinct cb.value) = 0 
								then 0 
								else (c.Value/(sum (distinct ca.Value) + sum(distinct cb.value))) end as Value
								from #Final_Calc_Dataset c 
								inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Reclaimed' as 'Attribute' , sum(a.Value) as Value 
													from Reclaimed a where a.Attribute = 'Reclaimed' group by a.Location) ca on c.Location = ca.location
								inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Screened' as 'Attribute' , sum(a.Value) as Value 
													from Screened a where a.Attribute = 'Screened' group by a.Location) cb on c.Location = cb.location
								where c.Cost_Type = 'Maintenance Materials' and ca.Attribute = 'Reclaimed' and c.Equipment = 'SL Conv Syst' and cb.Attribute = 'Screened'
								group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.Value )	
	Select a.* into #PortCostDrivers from (
			select * from Screened union all
			select * from RSF union all
			select * from LR union all
			select * from DSO union all
			select * from ScreenStackPerTon union all
			select * from Reclaimed union all
			select * from WriteOffAdj union all
			select * from InventoryChange union all
			select * from OpeningStock union all
			select * from TotalOreHandled union all
			select * from SLConVMaterials union all
			select * from SLConVConsumables
	) a
; 
 
		-------------------######################################################################################################################-----------------------	
		-------------------######################################################################################################################-----------------------
		-------------------######################################################################################################################-----------------------
		--------------------------------------------------------------------------Cost Rates----------------------------------------------------------------------------
select a.* into #MiningCostRates from (
	-- drills
	select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, c.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost Rate' as Attribute, 'A$/m' as Unit, c.[Cost?]
	,case when (ca.[Value]*da.[Value])=0 then 0 else c.[Value]/(ca.[Value]*da.[Value]) end as 'Value'
		from #Final_Calc_Dataset c
		inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '')  and coalesce(c.Equipment_type, '') = coalesce(ca.Equipment_type, '')
		inner join #Final_Calc_Dataset da on coalesce(da.org_group, '') = coalesce(c.org_group, '') and coalesce(da.location, '') = coalesce(c.location, '') and coalesce(da.[function], '') = coalesce(c.[function], '')   and coalesce(c.Equipment, '') = coalesce(da.Equipment, '') and coalesce(c.Equipment_type, '') = coalesce(da.Equipment_type, '')
		where c.Activity ='drill' and  ca.Attribute = 'Average no. of drills' and  da.Attribute = 'Meters drilled per rig' and c.Cost_Type is not null
	union all
	-- Overall Cost rate drill
	select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, c.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost Rate' as Attribute, 'A$/m' as Unit, c.[Cost?]
	,case when (ca.[Value])=0 then 0 else c.[Value]/(ca.[Value]) end as 'Value'
		from #Final_Calc_Dataset c
		inner join (select c.Location, sum(c.Value*ca.Value) as value  from #Final_Calc_Dataset c
							inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '')  and coalesce(c.Equipment_type, '') = coalesce(ca.Equipment_type, '')
							where  c.Attribute = 'Average no. of drills' and  ca.Attribute = 'Meters drilled per rig'
							group by c.Location) ca on c.Location = ca.Location
		where c.Activity = 'Drill' and Equipment_Type is null and c.Cost_Type is not null
	union all
	-- blast cost rates 
	select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', '$/t' as [Unit], c.[Cost?]
	,case when ca.[Value] = 0 then 0 else (C.[Value] / ca.[Value]) end as Value
		from #Final_Calc_Dataset c
		inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '') and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '')
		where c.[Function] ='Mining' and c.Activity = 'Blast' and ca.Attribute = 'Tonnes blasted' and c.Cost_Type <> 'Consumables' 
	union all
	-- Load & Haul diesel cost rates
	select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', c.Unit, c.[Cost?]
	,case when cb.value = 0 then 0 else ca.value * cb.value end as Value
		from #Final_Calc_Dataset c
		inner join #MiningCostDrivers ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') ---and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') 
		inner join #MiningCostDrivers cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(cb.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') --and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') 
		where c.[Function] ='Mining' and ca.Attribute = 'Diesel price per litre' and cb.Attribute = 'Burn Rate' and c.Cost_Type = 'Diesel' and c.Equipment in ('WB LBHR 996 EXC','WB LBHR 9400 EXC','WB CAT 994 FEL','KOM 1200 FEL','WB CAT 793F DT','WB CAT 793C DT', 'ER LBHR 9250 EXC','ER LBHR 9400 EXC','ER CAT 992 FEL','ER CAT 993 FEL','ER CAT 994 FEL','ER CAT 793F DT','ER CAT 785C DT','MAC LBHR 996 EXC','MAC HIT 3600 EXC','MAC LBHR 9400 EXC','MAC KOM 1200 FEL','MAC CAT 793F DT','MAC CAT 793D DT','MAC CAT 789C DT','Liebherr 996 Manned','Liebherr 996 AHPT','Liebherr 9400 Manned','Liebherr 9400 AHPT','CAT 994 Manned','CAT 994 AHPT','YND LBHR 996 EXC','YND LBHR 9400 EXC','YND CAT 994 FEL','YND KOM 1200 FEL','YND LET 1850 FEL','YND CAT 793F DT','YND CAT 785C DT')
	) a;
	-- Mine Services cost rates
		--Mine Services - Part 1 (Calculating Productive Movement)

	-- Other Cost rates (Rail & Port)
		with productive_mvmt as (
		select distinct  c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream
		,sum ((1-c.[Value])*pa.[Value]) as  [Value]
		FROM #MiningCostDrivers c
		inner join #Final_Calc_Dataset pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'')
		where c.attribute='RH tonnes %' and  pa.attribute='Total movement tonnes' and c.Activity='Haul'
		group by c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream
	 		)
		--Mine Services - Part 2 (Calculating Cost Rates)
	,MineServices as (select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', c.Unit, c.[Cost?]
						,case when ca.value = 0 then 0 else c.[Value]/ca.[Value] end  as Value 
						from #Final_Calc_Dataset c
						inner join productive_mvmt ca on coalesce(ca.org_group, '') = coalesce(c.org_group ,'')  and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  
						where  c.Activity ='Mine Services')
	,PortThroughPut as (
						select  case when C.Location in ('North Yard', 'South Yard') then 'Nelson Point' else 'Finucane Island' end as location
								, sum(DISTINCT c.value) as value
									from #Final_Calc_Dataset c
								inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') 
								where c.Attribute = 'Target Tonnes' and c.Org_Group = 'Port' and c.Activity = 'Outflow'
						group by C.Location)

	, PortOpsCostRate as ( select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', c.Unit, c.[Cost?]
								,case when sum(distinct a.value) = 0 then 0 else  c.Value / sum(distinct a.value) end as value
								from #Final_Calc_Dataset c
								inner join ( select case when Location in ('North Yard', 'South Yard') then 'Nelson Point' else 'Finucane Island' end location , sum(distinct value) value from #PortCostDrivers where Attribute = 'Total ore handled' group by location) a on a.Location = c.Location
								where c.Attribute = 'Variable Cost' and c.Cost_Type = 'Electricity'
								group by c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Equipment, c.Cost_Type, c.Product,c.Unit, c.[Cost?], c.value
								)
	--Rail - Diesel Cost Rate
	--[Tonnes per rake]

	,tonsperRake as		(select distinct c.sheet, C.[Org_Group], Ca.[Location], C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Equipment, c.Cost_Type, c.Product, 'Tons per rake'  as 'Attribute', 't/rake' as Unit, c.[Cost?]
						,((c.[Value])*(ca.[Value])) as value
						from #Final_Calc_Dataset c
						inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  
						where c.Org_Group ='Rail' and c.Attribute='No of ore cars' /*and c.[Function]='Mainline'*/ and ca.Org_Group ='Rail' and ca.Activity ='Rail' and ca.Attribute = 'Ore car tonnage' 
						),

		--[OOR]
	OOR as				(select distinct c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, 'OOR'  as 'Attribute', 'tpa' as Unit, c.[Cost?]
						,sum(c.[Value]) as [Value]
						from #Final_Calc_Dataset c 
						where Activity = 'TLO' and Attribute = 'Target Tonnes' and Equipment in ('TLO','OB25 TLO','TLO','JMB TLO','TLO1','TLO2')
						group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, c.[Attribute], c.[Unit], c.[Cost?]
						),

	--[No. rakes] =  ([OOR]/[Tonnes per rake])
	NumberOfRakes as	(select distinct c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Cost_Type, c.Product, 'No. rakes'  as 'Attribute', '#' as Unit, c.[Cost?]
						,case when ca.value = 0 then 0 else (c.[Value]/ca.[Value]) end as value
						from OOR c
						inner join tonsperRake ca on coalesce(c.[Location],'') = coalesce(ca.[Location],'')  
						),

	--[Diesel Volume] = ([Diesel Consumption per trip]*[No. locos]*[No. rakes])
	DieselVolume as		(select distinct c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Cost_Type, c.Product, 'Diesel Volume'  as 'Attribute', 'l' as Unit, c.[Cost?]
						,(c.[Value])*(ca.[Value])*2 as value
						from #Final_Calc_Dataset c
						inner join NumberOfRakes ca on coalesce(c.[Location],'') = coalesce(ca.[Location],'') 
						where c.Org_Group ='Rail' and c.Activity ='Rail' and c.Attribute = 'Diesel consumption per trip'
						), 
				
	--[Total Diesel Volume] = ([Diesel Consumption per trip]*[No. locos]*[No. rakes])
	TotDieselVolume as	(select distinct c.sheet, C.[Org_Group], C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, 'Diesel Volume'  as 'Attribute', 'l' as Unit, c.[Cost?]
						,sum(c.[Value]) as [Value]
						from DieselVolume c
						group by c.sheet, C.[Org_Group], C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, c.[Attribute], c.[Unit], c.[Cost?]
						),-- select * from TotDieselVolume

	--[Diesel Cost Rate] = ([Diesel Fixed Cost]/[Total Diesel Volume])
	DieselCostRate as	(select distinct c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/L' as Unit, c.[Cost?]
						,case when ca.Value = 0 then 0 else (c.[Value]/ca.[Value]) end as value
						from #Final_Calc_Dataset c
						inner join TotDieselVolume ca on coalesce(ca.org_group, '') = coalesce(c.org_group ,'')
						where c.Org_Group ='Rail' and c.Cost_Type='Diesel' 
						)
	,ActualThroughput as	(select distinct c.sheet, 'Rail' as [Org_Group], C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, 'Actual throughput'  as 'Attribute', 'tpa' as Unit, c.[Cost?]
						,sum(c.[Value]) as [Value]
						from #Final_Calc_Dataset c 
						where Activity = 'TLO' and Attribute = 'Target Tonnes' and Equipment in ('TLO','OB25 TLO','TLO','JMB TLO','TLO1','TLO2')
						group by c.sheet, C.[Org_Group], C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, c.[Attribute], c.[Unit], c.[Cost?]
						),

	OtherCostRate as	(select distinct c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]
						,case when ca.Value = 0 then 0 else (c.[Value]/ca.[Value]) end as value
						from #Final_Calc_Dataset c
						inner join ActualThroughput ca on coalesce(ca.org_group, '') = coalesce(c.org_group ,'')
						where c.Org_Group ='Rail' and c.Workstream='Direct Cost' and c.Cost_Type='Other')
	,RateLoss as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Rate Loss'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
						,case when ca.value = 0 then 0 else 1 - (c.Value/ca.Value) end as Value
						from #Final_Calc_Dataset c 
						inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') 
						where c.Attribute = 'Net Rate' and ca.Attribute = 'Design Rate')
				
	, STKConsumables as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
						,case when sum(ca.value) = 0 then 0 else (c.Value/sum (distinct ca.Value)) end as Value
						from #Final_Calc_Dataset c 
						inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Ore Inflow' as 'Attribute' , sum(a.Value) as Value 
											from #Final_Calc_Dataset a where a.Attribute = 'Yard Inflow' group by a.Location) ca on c.Location = ca.location
						where c.Cost_Type = 'Consumables' and ca.Attribute = 'Ore Inflow' and c.Equipment = 'STK Conv Syst'
						group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.Value )
				
	, STKMaintenenceMaterials as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
						,case when sum(distinct ca.value) = 0 then 0 else (c.Value/sum (distinct ca.Value)) end as Value
						from #Final_Calc_Dataset c 
						inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Ore Inflow' as 'Attribute' , sum(a.Value) as Value 
											from #Final_Calc_Dataset a where a.Attribute = 'Yard Inflow' group by a.Location) ca on c.Location = ca.location
						where c.Cost_Type = 'Maintenance Materials' and ca.Attribute = 'Ore Inflow' and c.Equipment = 'STK Conv Syst'
						group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.Value )
	-- Load & Haul Cost rates
	,LHCostRateseqp as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
						,case when sum(distinct ca.value) = 0 then 0 else (sum(c.Value)/sum (distinct ca.Value)) end as Value
						from #Final_Calc_Dataset c
						inner join ( select distinct c.equipment ,case when c.Value = 0 then 0 else  cb.Value/c.Value end as value 
											from #Final_Calc_Dataset c 
											inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(cb.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_type, '') = coalesce(cb.cost_type, '')
											where c.Activity in ('load', 'haul') and c.Attribute = 'Net Rate' and cb.Attribute = 'Total movement tonnes') ca on c.Equipment = ca.Equipment
						where c.Cost_Type <> 'Diesel' and c.Cost_Type is not null
						group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?]  )
	,LandHCostRates as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
		,case when sum(distinct ca.value) = 0 then 0 else (sum(c.Value)/sum (distinct ca.Value)) end as Value
		from #Final_Calc_Dataset c
		inner join ( select distinct c.Location ,case when sum(c.Value) = 0 then 0 else  sum(cb.Value - c.Value) end as value 
							from #Final_Calc_Dataset c 
							inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(cb.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_type, '') = coalesce(cb.cost_type, '')
							where  c.Attribute = 'Rehandle movement' and cb.Attribute = 'Total movement tonnes' and c.Activity in ('haul')
							group by c.Location) ca on c.Location = ca.Location
		where  c.Cost_Type is not null and c.Activity = 'Load & Haul'
		group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?]  )
				
	,OB18CostRate as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, 'OB18 Proc Dir O_H' as Equipment, 'Electricity' as 'Cost_Type', c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
		,case when sum(distinct c.value) = 0 then 0 else (sum(cb.Value)/sum (distinct c.Value)) end as Value
		from #Final_Calc_Dataset c
		inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') 
		where  c.Attribute = 'Target Tonnes'  and cb.Cost_Type is not null and cb.Equipment = 'OB18 Proc Dir O_H'
		group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?]  )
	--OFR Cost rates
	,OFRCostRate as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
		,case when ca.value = 0 then 0 else (c.Value/ca.Value) end as Value
		from #Final_Calc_Dataset c
			inner join ( select a.Location, sum(a.Value) as Value from #Final_Calc_Dataset a where a.Activity = 'OFR' and a.Attribute = 'Target Tonnes' group by a.Location) ca on c.Location = ca.Location
			where c.Cost_Type is not null and c.Activity = 'OFR' and c.Cost_Type = 'Electricity'	)
	--Unallocated costs
	,UnallocatedRates as (select  c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
								, case when ca.Value = 0 then 0 else c.Value/ca.Value end as Value
								from #Final_Calc_Dataset c
								inner join ( select a.Location, sum(a.Value) as Value from #Final_Calc_Dataset a where a.Activity = 'OFR' and a.Attribute = 'Target Tonnes' group by a.Location) ca on c.Location = ca.Location
								where c.Cost_Type is not null and  c.Workstream = 'Operations' and c.Cost_Type = 'Electricity' and c.Activity = 'Non Allocated Cost')
	--Port demurrage cost rates
	,CargoSize as (select  c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, cb.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cargo Size'  as 'Attribute', 't' as Unit, c.[Cost?]  
								, case when c.Value = 0 then 0 else c.Value*cb.value/c.Value end as Value
								from #Final_Calc_Dataset c
								inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_Type, '') = coalesce(cb.cost_Type, '') 
								where c.attribute = 'Average ship size' and cb.attribute = 'Cargo size baseline')

	, LaytimeAllowed as (select  c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, cb.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Laytime Allowed'  as 'Attribute', 't' as Unit, c.[Cost?]  
								, case when cb.Value = 0 then 0 else (c.Value/cb.value) + ca.Value end as Value
								from CargoSize c
								inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_Type, '') = coalesce(cb.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') 
								inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') and coalesce(c.cost_Type, '') = coalesce(ca.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') 
								where c.attribute = 'Cargo Size' and cb.attribute = 'Contract rate' and ca.attribute = 'Turn time/free time'
							
							)
	, DaysPerShip as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Days Per Ship'  as 'Attribute', 't' as Unit, c.[Cost?]  
								, ca.value - c.Value as Value
								from LaytimeAllowed c
								inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') and coalesce(c.cost_Type, '') = coalesce(ca.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') 
								where ca.Attribute = 'Laytime used') --select * from DaysPerShip
-- Work from here
	, TotalShips as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, NULL as Equipment, c.Cost_Type, c.Product, 'Total Ships'  as 'Attribute', 't' as Unit, c.[Cost?]  
								,case when c.value = 0 then 0 else  Sum(ca.value)/c.value end as Value
								from #Final_Calc_Dataset c
								inner join #Final_Calc_Dataset ca ON C.org_group = ca.org_group
								where ca.Attribute = 'Target Tonnes' and  ca.Equipment_Type = 'Shiploader' and c.attribute = 'Average ship size' 
								group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Cost_Type, c.Product, c.[Cost?] ,c.value
								
						)
	, CFRFOBShips as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.attribute, 't' as Unit, c.[Cost?]  
								, c.value*ca.Value as Value
								from #Final_Calc_Dataset c, TotalShips ca
								where c.Attribute in ( 'FOB ratio' , 'CFR Ratio')) --select * from CFRFOBShips

	, TotalDays as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Days Per Ship'  as 'Attribute', 't' as Unit, c.[Cost?]  
								, ca.value - c.Value as Value
								from DaysPerShip c
								inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') and coalesce(c.cost_Type, '') = coalesce(ca.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') 
								where ca.Attribute = 'Laytime used')

	, DemurrageCostRate as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', 't' as Unit, c.[Cost?]  
								,case when (c.value*ca.Value) = 0 then 0 else cb.value/(c.value*ca.Value) end as Value
								from DaysPerShip c
								inner join CFRFOBShips ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') and coalesce(c.cost_Type, '') = coalesce(ca.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') 
								inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_Type, '') = coalesce(cb.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') 
								where cb.attribute = 'Variable Cost'
								) 


	select a.* into #CostRates from 
	(	
		select * from MineServices union all
		select * from PortOpsCostRate union all
		select * from OtherCostRate union all
		select * from DieselCostRate union all
		select * from RateLoss union all
		select * from STKConsumables union all
		select * from STKMaintenenceMaterials union all
		select * from LHCostRateseqp union all
		select * from LandHCostRates union all
		select * from OFRCostRate union all
		select * from OB18CostRate union all
		select * from DemurrageCostRate union all
		select * from UnallocatedRates) a;


--######################################################################################
--################################## NB CHANGES ########################################
--######################################################################################
Select * into #Final_Calc_Dataset_Complete from #Final_Calc_Dataset ;


-- Update 
--Other updates to ensure that records match after calculations

update #Final_Calc_Dataset_Complete set Attribute = 'Target Tonnes' where Attribute = 'Tonnes Drilled';  -- this is an assumption
--update #Final_Calc_Dataset_Complete set Attribute = 'Blasted Tonnes' where Attribute = 'Tonnes Blasted';


update #Final_Calc_Dataset_Complete set Attribute = 'No of ore cars' where Attribute = 'No. of ore cars';
update #Final_Calc_Dataset_Complete set Attribute = 'Port to dumper queue Finucane Island' where attribute = 'Port to dumper queue' and location = 'Finucane Island';
update #Final_Calc_Dataset_Complete set Attribute = 'Port to dumper queue Nelson Point' where attribute = 'Port to dumper queue' and location = 'Nelson Point';
update #Final_Calc_Dataset_Complete set Attribute = 'Post dump Finucane Island' where attribute = 'Post dump' and location = 'Finucane Island';
update #Final_Calc_Dataset_Complete set Attribute = 'Post dump Nelson Point' where attribute = 'Post dump' and location = 'Nelson Point';
update #Final_Calc_Dataset_Complete set Attribute = 'Junction to mine queue east' where attribute like 'Junction to mine queue' and location = 'east';
update #Final_Calc_Dataset_Complete set Attribute = 'Junction to mine queue west' where attribute = 'Junction to mine queue' and location = 'west';
update #Final_Calc_Dataset_Complete set Attribute = 'Mine queue to junction east' where attribute like 'Mine queue to junction' and location = 'east';
update #Final_Calc_Dataset_Complete set Attribute = 'Mine queue to junction west' where attribute = 'Mine queue to junction' and location = 'west';
update #Final_Calc_Dataset_Complete set Location = NULL where Attribute like 'Port to dumper queue%';
update #Final_Calc_Dataset_Complete set Location = NULL where Attribute like 'Post dump%';
update #Final_Calc_Dataset_Complete set Location = NULL where Attribute like 'Junction to mine queue%';
update #Final_Calc_Dataset_Complete set Location = NULL where Attribute like 'Mine queue to junction%';

update #Final_Calc_Dataset_Complete set Attribute = 'Scheduled equipment downtime' where Attribute = 'Scheduled maintenance time';
update #Final_Calc_Dataset_Complete set Attribute = 'Unscheduled equipment downtime' where Attribute = 'Unscheduled maintenance time';
update #Final_Calc_Dataset_Complete set Attribute = 'Scheduled process downtime' where Attribute = 'Scheduled operating loss time';
update #Final_Calc_Dataset_Complete set Attribute = 'Unscheduled process downtime excl. starve/block' where Attribute = 'Unscheduled operating loss time (exclude starve/block time)';
update #Final_Calc_Dataset_Complete set Attribute = 'Scheduled standby hours' where Attribute = 'Standby time' and Activity in ('load','haul','drill')
update #Final_Calc_Dataset_Complete set Attribute = 'Scheduled standby time' where Attribute = 'Standby time' and Activity not in ('load','haul','drill')
update #Final_Calc_Dataset_Complete set Attribute = 'Standby time' where Attribute in ('Standby time', 'Scheduled standby time', 'Scheduled standby hours') and activity in ('Load','Haul','OFH','OFR','TLO','Beneficiation','Inflow','Outflow','Drill');
update #CostRates set Equipment = 'OB18 Proc Dir O_H' where Equipment = 'OB18' and Activity = 'OFH'


update #Final_Calc_Dataset_Complete set Attribute = 'Rehandle tonnes' where Attribute = 'Rehandle movement' and Activity in ('load', 'haul')
--update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes processed' where Attribute = 'Target Tonnes' and Activity in ('load', 'haul')
--update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes processed' where Attribute = 'Target Tonnes' and  Activity in ('OFH','OFR','Beneficiation','Inflow','Outflow')

update #Final_Calc_Dataset_Complete set Location = 'North Yard' where Attribute in ( 'CD1 to North Yard', 'CD2 to North Yard', 'CD3 to North Yard', 'CD4 to North Yard', 'CD5 to North Yard') 
update #Final_Calc_Dataset_Complete set Location = 'East Yard' where Attribute in ( 'CD1 to East Yard', 'CD2 to East Yard', 'CD3 to East Yard', 'CD4 to East Yard', 'CD5 to East Yard')
update #Final_Calc_Dataset_Complete set Location = 'West Yard' where Attribute in ( 'CD1 to West Yard', 'CD2 to West Yard', 'CD3 to West Yard', 'CD4 to West Yard', 'CD5 to West Yard') 
update #Final_Calc_Dataset_Complete set Location = 'South Yard' where Attribute in ( 'CD1 to South Yard', 'CD2 to South Yard', 'CD3 to South Yard', 'CD4 to South Yard', 'CD5 to South Yard') 

update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes transferred' where Attribute in ( 'CD1 to North Yard', 'CD2 to North Yard', 'CD3 to North Yard', 'CD4 to North Yard', 'CD5 to North Yard') 
update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes transferred' where Attribute in ( 'CD1 to East Yard', 'CD2 to East Yard', 'CD3 to East Yard', 'CD4 to East Yard', 'CD5 to East Yard')
update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes transferred' where Attribute in ( 'CD1 to West Yard', 'CD2 to West Yard', 'CD3 to West Yard', 'CD4 to West Yard', 'CD5 to West Yard') 
update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes transferred' where Attribute in ( 'CD1 to South Yard', 'CD2 to South Yard', 'CD3 to South Yard', 'CD4 to South Yard', 'CD5 to South Yard') 

update #Final_Calc_Dataset_Complete set Location = Equipment where Attribute = 'Queue to Dump'
update #Final_Calc_Dataset_Complete set Equipment = NULL where Attribute = 'Queue to Dump'

update #Final_Calc_Dataset_Complete set Cost_Type = 'Consumables' where Attribute = 'Powder Factor' and Activity = 'Blast'
update #Final_Calc_Dataset_Complete set Attribute = 'Unscheduled process downtime excl. starve/block' where Attribute = 'Unscheduled process downtime' and Activity = 'TLO'
update #Final_Calc_Dataset_Complete 
set Value = ca.Value
from #Final_Calc_Dataset_Complete c
inner join #ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'') and coalesce(c.attribute,'') = coalesce(ca.attribute,'')

-- Update Active Rakes
update #Final_Calc_Dataset_Complete set Value = b.value
		from #ActiveRakesCalc b
		inner join #Final_Calc_Dataset_Complete a on a.Org_Group = b.Org_group and a.[Function] = b.[function]
		where a.Attribute = 'Active Rakes' and  a.[Function] = 'mainline'

update #ActiveRakesCalc set Attribute = 'TLO downtime affecting loading' where location in ('Area C','Eastern Ridge','Jimblebar','Whaleback') and Equipment like '%TLO%'
update #ActiveRakesCalc set Attribute = 'TLO 1 downtime affecting loading' where location in ('Yandi') and Equipment = 'TLO1'
update #ActiveRakesCalc set Attribute = 'TLO 2 downtime affecting loading' where location in ('Yandi') and Equipment = 'TLO2'
update #ActiveRakesCalc set [function] = 'Mainline' where location in ('Area C','Eastern Ridge','Jimblebar','Whaleback', 'Yandi') and Attribute not in ('Maximum tonnes constraint','Maximum allowable active rakes')
update #ActiveRakesCalc set Equipment = NULL where location in ('Area C','Eastern Ridge','Jimblebar','Whaleback', 'Yandi')

update #ActiveRakesCalc set Attribute = 'CD downtime affecting dumping' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set location = Equipment where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Org_group = 'Rail' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set [function] = 'Mainline' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Activity = 'Rail' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Workstream = 'Operations' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Equipment_Type = NULL where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Equipment = NULL where Equipment in ('CD1','CD2','CD3','CD4','CD5')

update #Final_Calc_Dataset_Complete set Equipment_Type = NULL Where attribute = 'CFR ratio'
update #Final_Calc_Dataset_Complete set Equipment_Type = NULL Where attribute = 'FOB ratio'
;


----
--- Create an upadate into the results table for the assumptions
--- 
/*update #Final_Calc_Dataset_Complete set Value = 100000000 where Attribute = 'Maximum tonnes constraint'
update #Final_Calc_Dataset_Complete set Value = 6 where Attribute = 'Maximum allowable active rakes'*/

select a.* into #final_attribute from 
(	select * from #MiningCostDrivers A union all
	select * from #MiningCostRates union all
	select * from #CostRates		union all
	select * from #PortCostDrivers union all
	select * from #LoadAdjustments union all
	select * from #ActiveRakesCalc union all
	select * from #HaulAdjustments union all
	select * from #Final_Calc_Dataset_Complete where not (Activity in ('Load', 'Haul') and Attribute='Design rate')
	) a


select a.* into #retrieve_attribute_id from (
select distinct a.*, og.og_id, l.loc_id, f.func_id, ac.act_id, ws.ws_id, et.eqp_type_id, e.eqp_id, ct.ct_id, prod.prod_id  from 
	#final_attribute a
	left join vdt.org_group og on a.Org_Group = og.og_name
	left join vdt.location l on l.loc_name = a.Location
	left join vdt.[function] f on f.func_name = a.[Function]
	left join vdt.activity ac on ac.act_name = a.Activity 
	left join vdt.workstream ws on ws.ws_name = a.Workstream
	left join vdt.eqp_type et on et.eqp_type_name = a.Equipment_Type 
	left join vdt.equipment e on e.eqp_name  = a.Equipment
	left join vdt.cost_type ct on ct.ct_name = a.Cost_Type 
	left join vdt.product prod on prod.prod_name = a.Product) a
;

insert into @results (severity, [message])
select 'info', cast(count(*) as nvarchar) + ' data points mapped from Excel' from #retrieve_attribute_id

select c.* into #fulljoin from (
select b.attr_id, b.attribute as model_attribute, a.Org_Group, a.Location, a.[Function], a.Activity, a.Workstream, a.Equipment_Type, a.Equipment, a.Cost_Type, a.Product, a.Attribute, a.Value
from vdt.attribute_category b full outer join #retrieve_attribute_id a 
on									coalesce(a.og_id		,-1)	= coalesce(b.og_id 		,-1)
								and coalesce(b.loc_id		,-1)	= coalesce(a.loc_id 	,-1)
								and coalesce(a.func_id		,-1)	= coalesce(b.func_id 	,-1)
								and coalesce(a.act_id		,-1)	= coalesce(b.act_id 	,-1)
								and coalesce(a.ws_id		,-1)	= coalesce(b.ws_id		,-1)
								and coalesce(a.eqp_id		,-1)	= coalesce(b.eqp_id		,-1)
								and coalesce(a.eqp_type_id	,-1)	= coalesce(b.eqp_type_id,-1)
								and coalesce(a.ct_id		,-1)	= coalesce(b.ct_id		,-1)
								and coalesce(a.prod_id      ,-1)    = coalesce(b.prod_id    ,-1)
								and coalesce(a.Attribute	,'')	= coalesce(b.attribute 	,'') where b.attribute_is_lever = 1) c 


insert into @results (severity, [message])
select /*top 25*/ 'error', concat(org_group, '-', Location, '-', [Function], '-', [Activity], '-', Workstream, '-',
                              Equipment_Type, '-', Equipment, '-', Cost_Type, '-', Attribute, ' has no corresponding lever in the model')
from #fulljoin where attr_id is null;
if (select count(*) from #fulljoin where attr_id is null) > 25
insert into @results (severity, [message]) values ('error', 'More than 25 rows in the Excel file have no corresponding lever in the model')

insert into @results (severity, [message])
select /*top 25*/ 'error', concat(C.org_group, '-', C.Location, '-', C.[Function], '-', C.[Activity], '-', C.Workstream, '-',
                              C.Equipment_Type, '-', C.Equipment, '-', C.Cost_Type, '-', C.Attribute, ' was not mapped from Excel')
from vdt.attribute_category C inner join #fulljoin F on C.attr_id=F.attr_id
where F.org_group is null;
if (select count(*) from #fulljoin where org_group is null) > 25
insert into @results (severity, [message]) values ('error', 'More than 25 levers in the model do not have corresponding rows in the Excel file')

insert into @results (severity, [message])
select 'error', concat('Duplicate row: ', org_group, '-', location, '-', [function], '-', activity, '-', workstream, '-',
   equipment_type, '-', equipment, '-', cost_type, '-', attribute, '=', cast(value as nvarchar)) from #fulljoin where attr_id in (
select attr_id from #fulljoin where org_group is not null group by attr_id having count(*) > 1)
and org_group is not null order by attr_id

declare @err_count int = (select count(*) from @results where severity='error');
if @err_count > 0
begin
  insert into @results (severity, [message]) values ('info', 'Not creating data set due to ' + cast(@err_count as nvarchar) + ' errors');
end
else
begin
  insert into @results (severity, [message]) values ('info', 'Creating data set');
  declare @dataset_id int;

  insert into vdt.dataset (model_id, dataset_name, origin, last_update, [description], created, category_id, deleted)
  select @model_id, @dataset_name, 'user', CURRENT_TIMESTAMP, @description, CURRENT_TIMESTAMP, category_id, 0
  from vdt.dataset_category where category_name=@category;
  set @dataset_id=SCOPE_IDENTITY();

  insert into vdt.value (dataset_id, attr_id, value) select @dataset_id, attr_id, value from #backcalcs

  insert into @results (severity, [message]) values ('id', cast(@dataset_id as nvarchar));
  insert into @results (severity, [message]) values ('info', 'Data import complete');
end


  -- return report to the user
  select * from @results;
end
GO

ALTER procedure [staging].[sp_import_sensitivity] (
  @dataset_id int,
  @pc_change float,
  @target_object_path nvarchar(256),
  @target_attr nvarchar(100),
  @target_base_value float,
  @data staging.QerentSensitivityType readonly)
as
begin
  set nocount on

  declare @target_attr_id int
  select @target_attr_id=attr_id from staging.qerent_attr_ids
  where object_path=@target_object_path and attr_name=@target_attr
  if @target_attr_id is null
  begin
    raiserror (N'Invalid attribute %s[%s]', 10, 1, @target_object_path, @target_attr)
	return
  end
  
  declare @model_id int
  select @model_id=model_id from vdt.dataset where dataset_id=@dataset_id

  declare @sensitivity_id int
  select @sensitivity_id=sensitivity_id from vdt.sensitivity
  where dataset_id=@dataset_id and target_attr_id=@target_attr_id
  if @sensitivity_id is null
  begin
    insert into vdt.sensitivity (dataset_id, percent_change, target_attr_id, target_base_value, last_update)
	values (@dataset_id, @pc_change, @target_attr_id, @target_base_value, CURRENT_TIMESTAMP)
	set @sensitivity_id=SCOPE_IDENTITY()
  end;

  delete from vdt.sensitivity_value where sensitivity_id=@sensitivity_id;

  insert into vdt.sensitivity_value (sensitivity_id, attr_id, impact_of_increase, impact_of_decrease)
  select @sensitivity_id, Q.attr_id, D.[Impact of Increase] as impact_of_increase, D.[Impact of Decrease] as impact_of_decrease
  from @data D inner join staging.qerent_attr_ids Q on D.[Object Path]=Q.object_path and D.Attribute=Q.attr_name and Q.model_id=@model_id;

  update vdt.sensitivity set target_base_value=@target_base_value, last_update=CURRENT_TIMESTAMP where sensitivity_id=@sensitivity_id;
end

GO

ALTER procedure [staging].[sp_import_attribution] (
  @base_dataset_id int,
  @benchmark_dataset_id int,
  @is_cumulative bit,
  @target_object_path nvarchar(256),
  @target_attr nvarchar(100),
  @target_base_value float,
  @data staging.QerentAttributionType readonly)
as
begin
  set nocount on

  declare @target_attr_id int
  select @target_attr_id=attr_id from staging.qerent_attr_ids
  where object_path=@target_object_path and attr_name=@target_attr
  if @target_attr_id is null
  begin
    raiserror (N'Invalid attribute %s[%s]', 10, 1, @target_object_path, @target_attr)
	return
  end
  
  declare @model_id int
  select @model_id=model_id from vdt.dataset where dataset_id=@base_dataset_id

  declare @attribution_id int
  select @attribution_id=attribution_id from vdt.attribution
  where base_dataset_id=@base_dataset_id and benchmark_dataset_id=@benchmark_dataset_id
  and target_attr_id=@target_attr_id and is_cumulative=@is_cumulative
  if @attribution_id is null
  begin
    insert into vdt.attribution (base_dataset_id, benchmark_dataset_id, is_cumulative, target_attr_id, target_base_value, last_update)
	values (@base_dataset_id, @benchmark_dataset_id, @is_cumulative, @target_attr_id, @target_base_value, CURRENT_TIMESTAMP)
	set @attribution_id=SCOPE_IDENTITY()
  end;

  delete from vdt.attribution_value where attribution_id=@attribution_id;

  insert into vdt.attribution_value (attribution_id, attr_id, impact_on_target, seq_number)
  select @attribution_id, Q.attr_id, D.[Impact on Target] as impact_on_target, D.[Sequence] as seq_number
  from @data D inner join staging.qerent_attr_ids Q on D.[Object Path]=Q.object_path and D.Attribute=Q.attr_name and Q.model_id=@model_id;

  update vdt.attribution set target_base_value=@target_base_value, last_update=CURRENT_TIMESTAMP where attribution_id=@attribution_id;
end
GO

alter procedure [vdt].[sp_get_override_values_by_dataset_and_site]
@dataset_id int  , 
@site_name nvarchar(100),
@user_id int
AS 
BEGIN 
     SET NOCOUNT ON 

SELECT [attr_id], value
  FROM [vdt].[data]
  WHERE dataset_id = @dataset_id
  AND ((org_group='Mines' and location = @site_name) or (org_group=@site_name))
  AND (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level

END 


GO

commit transaction Version5;
go


PRINT 'Database has been updated successfully to version 5'
set noexec off;


--------------------------------------------------- Version 6 update ------------------------------------------------------------------

declare @cur_version int = (select max(db_version) from vdt.config)
IF @cur_version >= 6
begin
  print 'Skipping database update to v6; already at version ' + cast(@cur_version as nvarchar)
  set noexec on
end

begin transaction Version6;
go

set xact_abort on;
set nocount on;

INSERT INTO vdt.config([db_version],[updated_on]) VALUES(6,  getdate())
go



alter procedure staging.sp_update_scenario_from_qerent (
  @dataset_id int,
  @data staging.QerentDataType readonly)
as
begin
  set nocount on

  /* This can happen after a dataset import */
  insert into vdt.value (dataset_id, attr_id, value)
  select @dataset_id, A.attr_id, D.Value
  from @data D inner join staging.qerent_attr_ids A
    on D.[Object Path]=A.object_path
	and D.[Attribute]=A.attr_name
  where A.attr_id not in (select attr_id from vdt.value where dataset_id=@dataset_id)

  update vdt.value set value.value = D.[Value]
  from @data D inner join staging.qerent_attr_ids A
    on D.[Object Path]=A.object_path
	and D.[Attribute]=A.attr_name
  where value.attr_id=A.attr_id and value.dataset_id=@dataset_id;
  
  update vdt.dataset set last_update=CURRENT_TIMESTAMP
  where dataset_id=@dataset_id;
end

go

alter procedure [vdt].[sp_get_mine_cost_waterfall]
  @site_name nvarchar(100),
  @dataset_id int,
  @user_id int
as
begin
  declare @basecase_name nvarchar(100);
  declare @scenario_name nvarchar(100);
  
  select @basecase_name=coalesce(B.dataset_name, V.dataset_name), @scenario_name=V.dataset_name
  from vdt.dataset V left join vdt.scenario S on S.view_dataset_id=V.dataset_id
  left join vdt.dataset B on S.base_dataset_id=B.dataset_id
  where V.dataset_id=@dataset_id;
  
  declare @base_tons float;
  declare @scen_tons float;
  select @scen_tons=value, @base_tons=base_value from vdt.data where org_group='Mines' and location=@site_name
   and [function] is null and attribute='OOR'
   and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
   and dataset_id=@dataset_id;

  if @base_tons = 0 set @base_tons = 1;
  if @scen_tons = 0 set @scen_tons = 1; -- charts won't make sense anyway, so avoid an error message...

  set @basecase_name = 'Base Case';
  set @scenario_name = 'Scenario';

  with totals as (
    select [function] as obj, attribute as attr, value, base_value
    from vdt.data
    where attribute in ('Fixed cost', 'Variable cost')
    and activity is null
    and org_group='Mines' and location=@site_name
	and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
    and dataset_id=@dataset_id)
    
  ,lineitems as (
	select *
    from vdt.data
    where attribute in ('Fixed cost', 'Variable cost')
    and cost_type is null and equipment is null and (activity is not null or [function]='Overheads')
	and (activity <> 'Load' and activity <> 'Haul') and (equipment_type='Plant' or equipment_type is null)
	and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
    and dataset_id=@dataset_id and org_group='Mines' and location=@site_name)
  
  ,subtotals as (
	  select [function] as obj, attribute as attr, sum(value) as value, sum(base_value) as base_value
	  from lineitems group by [function], attribute)

  ,sna as (
  select T.obj, T.attr, T.value - S.value as value, T.base_value - S.base_value as base_value
  from subtotals S inner join totals T on S.obj=T.obj and S.attr=T.attr
  where T.obj <> 'Overheads')

  ,pivot_data as (
    select
      coalesce(activity, 'Mine Overheads') as [group],
      attribute as component,
      value as value,
	  base_value
    from lineitems
    union all
    select
	case S.obj
	  when 'Mining' then 'Mine Svc/Ovh'
	  when 'Processing' then 'Proc Svc/Ovh'
	end as [group],
  	S.attr as component,
  	value as value,
	base_value
    from sna S)

  ,grouped as (
	select case [group]
	  when 'Drill' then 'D&B'
	  when 'Blast' then 'D&B'
	  when 'Load' then 'L&H'
	  when 'Haul' then 'L&H'
	  when 'Load & Haul' then 'L&H'
	  when 'OFH' then 'Proc.'
	  when 'OFR' then 'Proc.'
	  when 'TLO' then 'Proc.'
	  when 'Proc Svc/Ovh' then 'Proc.'
	  when 'Mine Overheads' then 'Mine Ovh.'
	  when 'Beneficiation' then 'Bene.'
	  else [group]
	end as [group],
	value - base_value as delta
	from pivot_data)

  ,agg as (
	select [group], sum([delta]) / @base_tons as [delta] from grouped group by [group]
	union all
	select 'Vol. Dil.' as [group], (sum(value)/@scen_tons - sum(value)/@base_tons) as [delta] from totals where obj is null)
  
  ,withidx as (
    select row_number() over (order by case [group]
         when 'D&B' then 1
         when 'L&H' then 2
         when 'Mine Svc/Ovh' then 3
         when 'Bene.' then 4
         when 'Proc.' then 5
		 when 'Vol. Dil.' then 999
         else 6
       end) as num, [group], [delta]
	from agg
	)

  ,stacked as (
    select cast(0 as int) as num, cast('Base' as nvarchar) as [group], cast(0 as float) as base, sum(base_value)/@base_tons as height, sum(base_value)/@base_tons as cum
	from totals where obj is null
	union all
	select cast(R.num as int), cast(R.[group] as nvarchar) as [group],
	  case when delta < 0 then P.cum + delta else P.cum end as base,
	  abs(delta) as height,
	  P.cum + delta as cum
	from withidx R inner join stacked P on P.num = R.num-1)

  ,pivoted as (
    select [num], [group],
      case when [num]=0 then height else 0 end as total,
	  base as transparent, 
	  case when num=0 then 0 when base=cum then height else 0 end as decrease, 
	  case when num=0 then 0 when base=cum then 0 else height end as increase
    from stacked
    union all
	select 999 as num, 'Scenario' as [group], sum(value)/@scen_tons as total, 0 as transparent, 0 as decrease, 0 as increase
	from totals where obj is null)

  select 'Change in tonnes' as series, [group], 'Total' as [component], total as value, '#0000c0' as fill_color, '' as fill_pattern, 1 as stack_order from pivoted
  union all
  select 'Change in tonnes' as series, [group], 'Transparent' as [component], transparent as value, 'rgba(0,0,0,0)' as fill_color, '' as fill_pattern, 2 as stack_order from pivoted
  union all
  select 'Change in tonnes' as series, [group], 'Increase' as [component], increase as value, '#880000' as fill_color, '' as fill_pattern, 3 as stack_order from pivoted
  union all
  select 'Change in tonnes' as series, [group], 'Decrease' as [component], decrease as value, '#008800' as fill_color, '' as fill_pattern, 4 as stack_order from pivoted
end
go


alter procedure [vdt].[sp_get_system_cost_waterfall]
  @dataset_id int,
  @user_id int
as

declare @base_tons float;
declare @scen_tons float;

select @base_tons=base_value, @scen_tons=value from vdt.data
where attribute='Value Chain Tonnes' and org_group='Port' 
and dataset_id=@dataset_id
AND (select sec_level from vdt.[user] where [user_id] = @user_id) >=  attribute_sec_level;

if @base_tons = 0 set @base_tons = 1;
if @scen_tons = 0 set @scen_tons = 1;

with costs as (
  select * from vdt.data where attribute_is_aggregate=0 and attribute in ('Fixed cost', 'Variable cost')
  and dataset_id=@dataset_id
  AND (select sec_level from vdt.[user] where [user_id] = @user_id) >=  attribute_sec_level)
  --select * from costs where org_group='WAIO' and [function]='Other'

,summary as (
select org_group as [group], sum(value) as scenario, sum(base_value) as basecase from costs where org_group<>'WAIO' group by org_group
union all
select case [function] when 'Logistic & Infrastructure' then 'L&I' else [function] end as [group],
  sum(value) as scenario, sum(base_value) as basecase from costs where org_group='WAIO' group by [function]
)

,ordering as (
select row_number() over (order by scenario desc) as ordering, [group], (scenario - basecase) / @base_tons as delta from summary
union all
select (select count(*)+1 from summary) as ordering, 'Vol. Dil.' as [group], (sum(value)/@scen_tons - sum(value)/@base_tons) as [delta] from costs)

,waterfall as (
select cast(0 as int) as num, cast('Base' as nvarchar) as [group], cast(0 as float) as base, sum(base_value) / @base_tons as height, sum(base_value) / @base_tons as cum from costs
union all
select cast(N.ordering as int) as num, cast(N.[group] as nvarchar), case when delta < 0 then delta + P.cum else P.cum end as base, abs(delta) as height, P.cum + delta as cum
from ordering N inner join waterfall P on N.ordering=P.num + 1
)

,pivoted as (
select [num], [group],
  case when [num]=0 then height else 0 end as total,
  base as transparent, 
  case when num=0 then 0 when base=cum then height else 0 end as decrease, 
  case when num=0 then 0 when base=cum then 0 else height end as increase
from waterfall
union all
select 999 as num, 'Scenario' as [group], sum(value)/@scen_tons as total, 0 as transparent, 0 as decrease, 0 as increase from costs)

select 'Change in unit cost' as series, [group], 'Total' as [component], total as value, '#0000c0' as fill_color, '' as fill_pattern, 1 as stack_order from pivoted
union all
select 'Change in unit cost' as series, [group], 'Transparent' as [component], transparent as value, 'rgba(0,0,0,0)' as fill_color, '' as fill_pattern, 2 as stack_order from pivoted
union all
select 'Change in unit cost' as series, [group], 'Increase' as [component], increase as value, '#880000' as fill_color, '' as fill_pattern, 3 as stack_order from pivoted
union all
select 'Change in unit cost' as series, [group], 'Decrease' as [component], decrease as value, '#008800' as fill_color, '' as fill_pattern, 4 as stack_order from pivoted

GO


alter procedure [vdt].[sp_get_rail_cost_waterfall]
  @dataset_id int,
  @user_id int
as

declare @base_tons float;
declare @scen_tons float;

select @base_tons=base_value, @scen_tons=value from vdt.data
where attribute='Value Chain Tonnes'
and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
and org_group='Rail' and dataset_id=@dataset_id;

if @base_tons = 0 set @base_tons = 1;
if @scen_tons = 0 set @scen_tons = 1;

with costs as (
  select * from vdt.data where attribute_is_aggregate=0 and attribute in ('Fixed cost', 'Variable cost')
  and org_group='Rail'
  and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
  and dataset_id=@dataset_id)
,summary as (
select [function] as [group], sum(value) as scenario, sum(base_value) as basecase from costs group by [function]
)

,ordering as (
select row_number() over (order by scenario desc) as ordering, [group], (scenario - basecase) / @base_tons as delta from summary
union all
select (select count(*)+1 from summary) as ordering, 'Vol. Dil.' as [group], (sum(value)/@scen_tons - sum(value)/@base_tons) as [delta] from costs)

,waterfall as (
select cast(0 as int) as num, cast('Base' as nvarchar) as [group], cast(0 as float) as base, sum(base_value) / @base_tons as height, sum(base_value) / @base_tons as cum from costs
union all
select cast(N.ordering as int) as num, cast(N.[group] as nvarchar), case when delta < 0 then delta + P.cum else P.cum end as base, abs(delta) as height, P.cum + delta as cum
from ordering N inner join waterfall P on N.ordering=P.num + 1
)

,pivoted as (
select [num], [group],
  case when [num]=0 then height else 0 end as total,
  base as transparent, 
  case when num=0 then 0 when base=cum then height else 0 end as decrease, 
  case when num=0 then 0 when base=cum then 0 else height end as increase
from waterfall
union all
select 999 as num, 'Scenario' as [group], sum(value)/@scen_tons as total, 0 as transparent, 0 as decrease, 0 as increase from costs)

select 'Change in unit cost' as series, [group], 'Total' as [component], total as value, '#0000c0' as fill_color, '' as fill_pattern, 1 as stack_order from pivoted
union all
select 'Change in unit cost' as series, [group], 'Transparent' as [component], transparent as value, 'rgba(0,0,0,0)' as fill_color, '' as fill_pattern, 2 as stack_order from pivoted
union all
select 'Change in unit cost' as series, [group], 'Increase' as [component], increase as value, '#880000' as fill_color, '' as fill_pattern, 3 as stack_order from pivoted
union all
select 'Change in unit cost' as series, [group], 'Decrease' as [component], decrease as value, '#008800' as fill_color, '' as fill_pattern, 4 as stack_order from pivoted

go


alter procedure [vdt].[sp_get_port_cost_waterfall]
  @dataset_id int,
  @user_id int
as

declare @base_tons float;
declare @scen_tons float;

select @base_tons=base_value, @scen_tons=value from vdt.data
where attribute='Value Chain Tonnes' and org_group='Port' 
and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
and dataset_id=@dataset_id;

if @base_tons = 0 set @base_tons = 1;
if @scen_tons = 0 set @scen_tons = 1;

with costs as (
  select * from vdt.data where attribute_is_aggregate=0 and attribute in ('Fixed cost', 'Variable cost')
  and org_group='Port'
  and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
  and dataset_id=@dataset_id)
,summary as (
select [function] as [group], sum(value) as scenario, sum(base_value) as basecase from costs group by [function]
)

,ordering as (
select row_number() over (order by scenario desc) as ordering, [group], (scenario - basecase) / @base_tons as delta from summary
union all
select (select count(*)+1 from summary) as ordering, 'Vol. Dil.' as [group], (sum(value)/@scen_tons - sum(value)/@base_tons) as [delta] from costs)

,waterfall as (
select cast(0 as int) as num, cast('Base' as nvarchar) as [group], cast(0 as float) as base, sum(base_value) / @base_tons as height, sum(base_value) / @base_tons as cum from costs
union all
select cast(N.ordering as int) as num, cast(N.[group] as nvarchar), case when delta < 0 then delta + P.cum else P.cum end as base, abs(delta) as height, P.cum + delta as cum
from ordering N inner join waterfall P on N.ordering=P.num + 1
)

,pivoted as (
select [num], [group],
  case when [num]=0 then height else 0 end as total,
  base as transparent, 
  case when num=0 then 0 when base=cum then height else 0 end as decrease, 
  case when num=0 then 0 when base=cum then 0 else height end as increase
from waterfall
union all
select 999 as num, 'Scenario' as [group], sum(value)/@scen_tons as total, 0 as transparent, 0 as decrease, 0 as increase from costs)

select 'Change in unit cost' as series, [group], 'Total' as [component], total as value, '#0000c0' as fill_color, '' as fill_pattern, 1 as stack_order from pivoted
union all
select 'Change in unit cost' as series, [group], 'Transparent' as [component], transparent as value, 'rgba(0,0,0,0)' as fill_color, '' as fill_pattern, 2 as stack_order from pivoted
union all
select 'Change in unit cost' as series, [group], 'Increase' as [component], increase as value, '#880000' as fill_color, '' as fill_pattern, 3 as stack_order from pivoted
union all
select 'Change in unit cost' as series, [group], 'Decrease' as [component], decrease as value, '#008800' as fill_color, '' as fill_pattern, 4 as stack_order from pivoted

go


alter procedure staging.sp_import_qerent_model_structure (
    @filename nvarchar(256),
	@data staging.QerentStructureType readonly)
as
begin
  set nocount on

  -- debugging purposes only
  if object_id(N'staging.temp_qerent_import', N'U') is not null
    drop table staging.temp_qerent_import;
  select * into staging.temp_qerent_import from @data;
  -- end debugging

  -- Set up the entry in the model table, if it doesn't already exist.
  if left(@filename, 1) = '_' set @filename = '_debug'
  declare @model_id int = null
  declare @should_copy_data bit = 0
  select @model_id=model_id from vdt.model where [filename]=@filename
  if @model_id is null
  begin
    insert into vdt.model ([filename], [file_date]) values (@filename, current_timestamp)
	set @model_id=SCOPE_IDENTITY()
  end
  else
  begin
    update vdt.model set file_date=current_timestamp where model_id=@model_id
  end;
  set @should_copy_data = 1;

  -- This lengthy query sets up a view of how the attributes from Qerent should be mapped into the vdt.attributes table.
  -- The result of this will get stored in #qerent_attrs later.
  with QAttrs as (
  select * from @data)
  
  ,DrillFleets as (
  select [Object Path], [O2] as Mine, [O5] as Fleet from QAttrs where O1='Mines' and O4='Drill' and [Attribute]='Target tonnes')
  
  ,DrillProd as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream, F.Mine as location,
    'Drills' as equipment_type, F.Fleet as equipment, null as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from DrillFleets F inner join QAttrs A on F.[Object Path]=A.[Object Path]
  )--where A.[Attribute] not in ('Headroom', 'Cost', 'Fixed cost', 'Variable cost'))
  
  ,DrillFleetCostLevers as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity,
    case when substring([O7], 1, 11)='Maintenance' then 'Maintenance' else 'Operations' end as workstream,
    F.Mine as location, 'Drills' as equipment_type, F.Fleet as equipment, coalesce([O8], [O7]) as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A inner join DrillFleets F on substring(A.[Object Path], 1, len(F.[Object Path]) + 7) = F.[Object Path] + '.Costs.'
  where left(A.[Type],1)='C')
  
  ,DrillOperationsCostLevers as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream,
    A.[O2] as location, null as equipment_type, null as equipment, coalesce([O7], [O6]) as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Drill' and [O5]='Operations' and [O6] is not null
  and left(A.[Type],1) = 'C'
  and (A.[O6] <> 'Fuels & Oils' or A.[O7] is not null))
  
  ,DrillSummary as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream,
    A.[O2] as location, null as equipment_type, null as equipment, null as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Drill' and [O5] is null
  and [Attribute] not in ('Use of Headroom'))
  
  ,DrillStock as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream,
    A.[O2] as location, 'Stockpile' as equipment_type, 'Drill Stock' as equipment, null as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Drill' and [O5]='Drill Inventory'
  )
  
  ,Blast as (
  select 'Mines' as org_group, 'Mining' as [function], 'Blast' as activity, 'Operations' as workstream,
    A.[O2] as location,
    case when [O5]='Blast Inventory' then 'Stockpile' else null end as equipment_type,
    case when [O5]='Blast Inventory' then [O5] else null end as equipment,
    [O6] as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Blast'
  )

  ,LoadHaul as (
  select 'Mines' as org_group, 'Mining' as [function],
    case when [O5] is null or [O5]='Operations' then 'Load & Haul' else [O5] end as activity,
	'Operations' as workstream,
    A.[O2] as location,
    case when [O5]='Load' then left([O6], len([O6])-1) when [O6] is null then null when [O5]='Haul' then 'Truck' else null end as equipment_type,
    case when [O5]='Load' then [O7] else [O6] end as equipment,
    case [O5] when 'Operations' then [O6] when 'Load' then [O9] else [O8] end as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Load & haul'
  )
  
  ,MineServicesAndOverheads as (
  select 'Mines' as org_group, 'Mining' as [function],
    [O4] as activity,
	case when [O4] is null then null when [O5]='Operations' or [O4]='Overheads' then 'Operations' else 'Support' end as workstream,
    A.[O2] as location,
    case when [O4] is null then null when [O5]='Operations' then null when [O4]='Overheads' then [O5] else 'Support' end as equipment_type,
    case when [O5]='Operations' then null when [O4]='Overheads' then [O6] else [O5] end as equipment,
    case when [O4]='Overheads' then [O7] else [O6] end as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Mining' and ([O4] is null or [O4] not in ('Drill', 'Blast', 'Load & haul'))
  )
  
  ,OverheadsMines as (
  select 'Mines' as org_group, 'Mining' as [function],
    'Overheads' as activity,
	coalesce([O4], 'Operations') as workstream,
    null as location,
    null as equipment_type,
    [O3] as equipment,
    coalesce([O5], [O4], [O3]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O2]='Overheads Mines'
  )

  ,ProcessingPlants as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	'Operations' as workstream,
    [O2] as location,
    'Plant' as equipment_type,
    [O5] as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O6] is null and [O4] not in ('Non Allocated Cost', 'Overheads')
  )

  ,ProcessingPlantCosts as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	case when [O8]='Maintenance' then 'Maintenance' else 'Operations' end as workstream,
    [O2] as location,
    'Plant' as equipment_type,
    [O7] as equipment,
    coalesce([O9], [O8]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O6]='Costs'
  )
  
  ,ProcessingNonAllocatedAndOverheads as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	[O5] as workstream,
    [O2] as location,
    case when [O7] is not null then [O6] else null end as equipment_type,
    null as equipment,
    coalesce([O7], [O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O4] in ('Non Allocated Cost', 'Overheads')
  )

  ,ProcessingTopLevel as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	null as workstream,
    [O2] as location,
    null as equipment_type,
    null as equipment,
    coalesce([O7], [O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O4] is null
  )
  
  ,MinesOverheads as (
  select 'Mines' as org_group, 'Overheads' as [function],
    [O4] as activity,
	case when [O5]='Maintenance' then [O5] else 'Operations' end as workstream,
    [O2] as location,
    case when [O5]='Maintenance' then null else [O5] end as equipment_type,
    null as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 3) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Overheads'
  )

  ,MinesTopLevel as (
  select 'Mines' as org_group, null as [function],
    null as activity,
	null as workstream,
    [O2] as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3] is null
  )
   
  ,RailVolume as (
  select
    'Rail' as org_group,
	case [O2] when 'Mines OOR' then 'Mainline' when 'Mines OFH' then 'Shuttle' else [O2] end as [function],
    'Rail' as activity,
	'Operations' as workstream,
    case when [O3]='Virtual Stockpile' then null else coalesce([O4], [O3]) end as location,
    null as equipment_type,
    null as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and substring(A.[Type], 1, 1) <> 'C' and [O2] is not null
  )

  ,RailProdCosts as (
  select
    'Rail' as org_group,
	case when [O2] in ('Mainline', 'Shuttle') then 'Production' else [O2] end as [function],
    case when [O2] in ('Mainline', 'Shuttle') then 'Operations' else [O3] end as activity,
	coalesce([O4], 'Direct Cost') as workstream,
    case when [O2] in ('Mainline', 'Shuttle') then coalesce([O3], [O2]) else null end as location,
    null as equipment_type,
    null as equipment,
    coalesce([O6], [O5], 'Diesel') as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and substring(A.[Type], 1, 1) = 'C' and [O2] not in ('Maintenance', 'Overheads') and [O2] is not null
  )

  ,RailOverheads as (
  select
    'Rail' as org_group,
	[O2] as [function],
    [O3] as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    coalesce([O5], [O4]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and [O2]='Overheads'
  )

  ,RailMaintenance as (
  select
    'Rail' as org_group,
	[O2] as [function],
    [O3] as activity,
	case when [o6] is null then 'Supporting Cost' else [o5] end as workstream,
    null as location,
    case when [O4] <> 'Overheads' and [o5] is not null then [o4] else null end as equipment_type,
    null as equipment,
    coalesce([O6], [O5], [O4]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and [O2]='Maintenance'
  )

  ,RailTopLevel as (
  select
    [O1] as org_group,
	null as [function],
    null as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and [O2] is null
  )

  ,PortInflow as (
  select
    [O1] as org_group,
	'Production' as [function],
    [O2] as activity,
	'Operations' as workstream,
    [O4] as location,
    case when [O3] is null then null else 'Car Dumper' end as equipment_type,
    [O3] as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Inflow'
  )

  ,PortOutflow as (
  select
    [O1] as org_group,
	'Production' as [function],
    [O3] as activity,
	'Operations' as workstream,
    coalesce([O6], [O4]) as location,
    left([O7], len([o7])-1) as equipment_type,
    [O8] as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O3]='Outflow'
  )

  ,PortProductionCosts as (
  select
    [O1] as org_group,
	[O2] as [function],
    [O4] as activity,
	case when [O6] is null then [O4] else [O5] end as workstream,
    [O3] as location,
    left([O7], len([o7])-1) as equipment_type,
    [O8] as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O3]<>'Outflow' and [O2]='Production'
  )

  ,PortSiteMaintenance as (
  select
    [O1] as org_group,
	[O2] as [function],
    case when [O4]='Overheads' then 'Overheads' else 'Maintenance' end as activity,
	case when [O4]='Overheads' then [O5] else 'Maintenance' end as workstream,
    [O3] as location,
    case when [O4]='Overheads' then null else left([O4], len([O4])-1) end as equipment_type,
    case when [O4]='Overheads' then null else [O5] end as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Maintenance' and [O3] in ('Nelson Point', 'Finucane Island')
  )

  ,PortMaintenance as (
  select
    [O1] as org_group,
	[O2] as [function],
    [O3] as activity,
	case when [O5] is null then 'Operations' when [O4]='Overheads' then [O5] when [O4] in ('Nelson Point', 'Finucane Island') then 'Operations' when [O4]='Other' then null else [O4] end as workstream,
    case when [O4] in ('Nelson Point', 'Finucane Island') then [O4] else null end as location,
    null as equipment_type,
    null as equipment,
    coalesce([O6], [O5], [O4]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Maintenance' and [O3] not in ('Nelson Point', 'Finucane Island')
  )

  ,PortMarine as (
    select
    [O1] as org_group,
	[O2] as [function],
    [O3] as activity,
	case when [O5] is null then 'Operations' else [O4] end as workstream,
    null as location,
    case when [O3]='Demurrage' and [O4]<>'Despatch' then [O4] else null end as equipment_type,
    null as equipment,
    case when [O3]='Demurrage' then 'Demurrage' else coalesce([O5], [O4]) end as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Marine'
  )

  ,PortOverheads as (
  select
    [O1] as org_group,
	[O2] as [function],
    [O3] as activity,
	'Operations' as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    [O4] as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Overheads'
  )

  ,PortTopLevel as (
  select
    [O1] as org_group,
	null as [function],
    null as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2] is null
  )

  ,FunctionsCosts as (
  select
    'WAIO' as org_group,
	[O1] as [function],
    [O2] as activity,
	[O3] as workstream,
    [O4] as location,
    [O5] as equipment_type,
    [O6] as equipment,
    [O7] as cost_type,
	[O8] as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 3) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1] in ('Functions', 'Logistic & Infrastructure', 'Operations Infrastructure', 'Other', 'Assumptions')
  )

  ,Revenue as (
  select 'WAIO' as org_group, 'Revenue' as [function],
    'Sales' as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	[O2] as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 3) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='EBITDA'
  )

  ,AllAttrs as (
    select * from DrillProd
    union all select * from DrillFleetCostLevers
    union all select * from DrillOperationsCostLevers
    union all select * from DrillSummary
    union all select * from DrillStock
    union all select * from Blast
	union all select * from LoadHaul
	union all select * from MineServicesAndOverheads
	union all select * from ProcessingPlants
	union all select * from ProcessingPlantCosts
	union all select * from ProcessingNonAllocatedAndOverheads
	union all select * from ProcessingTopLevel
	union all select * from MinesOverheads
	union all select * from MinesTopLevel
	union all select * from OverheadsMines
	union all select * from RailVolume
	union all select * from RailProdCosts
	union all select * from RailOverheads
	union all select * from RailMaintenance
	union all select * from RailTopLevel
	union all select * from PortInflow
	union all select * from PortOutflow
	union all select * from PortProductionCosts
	union all select * from PortSiteMaintenance
	union all select * from PortMaintenance
	union all select * from PortMarine
	union all select * from PortOverheads
	union all select * from PortTopLevel
	union all select * from FunctionsCosts
	union all select * from Revenue
  )

  select * into #qerent_attrs_raw from AllAttrs;

  -- Update category values for each category
  with Names as (select distinct org_group from #qerent_attrs_raw)
  insert into vdt.org_group (og_name) select org_group from Names
  where not exists (select * from vdt.org_group where og_name=Names.org_group)
  and Names.org_group is not null;

  with Names as (select distinct [function] from #qerent_attrs_raw)
  insert into vdt.[function] (func_name) select [function] from Names
  where not exists (select * from vdt.[function] where func_name=Names.[function])
  and Names.[function] is not null;

  with Names as (select distinct activity from #qerent_attrs_raw)
  insert into vdt.activity (act_name) select activity from Names
  where not exists (select * from vdt.activity where act_name=Names.activity)
  and Names.activity is not null;

  with Names as (select distinct workstream from #qerent_attrs_raw)
  insert into vdt.workstream (ws_name) select workstream from Names
  where not exists (select * from vdt.workstream where ws_name=Names.workstream)
  and Names.workstream is not null;

  with Names as (select distinct location from #qerent_attrs_raw)
  insert into vdt.location (loc_name) select location from Names
  where not exists (select * from vdt.location where loc_name=Names.location)
  and Names.location is not null;

  with Names as (select distinct equipment_type from #qerent_attrs_raw)
  insert into vdt.eqp_type (eqp_type_name) select equipment_type from Names
  where not exists (select * from vdt.eqp_type where eqp_type_name=Names.equipment_type)
  and Names.equipment_type is not null;

  with Names as (select distinct equipment from #qerent_attrs_raw)
  insert into vdt.equipment (eqp_name) select equipment from Names
  where not exists (select * from vdt.equipment where eqp_name=Names.equipment)
  and Names.equipment is not null;

  with Names as (select distinct cost_type from #qerent_attrs_raw)
  insert into vdt.cost_type (ct_name) select cost_type from Names
  where not exists (select * from vdt.cost_type where ct_name=Names.cost_type)
  and Names.cost_type is not null;

  with Names as (select distinct product from #qerent_attrs_raw)
  insert into vdt.product (prod_name) select product from Names
  where not exists (select * from vdt.product where prod_name=Names.product)
  and Names.product is not null;
  

  -- Join back to the qerent attrs to get the category IDs
  with WithIds as (
	select I.name as attr_name, I.unit, I.sec_level, I.is_cost, I.is_lever, I.is_calculated, I.is_aggregate, I.is_kpi,
	  O.og_id, F.func_id, A.act_id, W.ws_id, L.loc_id, ET.eqp_type_id, E.eqp_id, C.ct_id, P.prod_id,
	  I.value, I.path as qerent_path, I.attribute as qerent_attribute
	from #qerent_attrs_raw I
	left join vdt.org_group O on I.org_group=O.og_name
	left join vdt.[function] F on I.[function]=F.[func_name]
	left join vdt.activity A on I.activity=A.act_name
	left join vdt.workstream W on I.workstream=W.ws_name
	left join vdt.location L on I.location=L.loc_name
	left join vdt.eqp_type ET on I.equipment_type=ET.eqp_type_name
	left join vdt.equipment E on I.equipment=E.eqp_name
	left join vdt.cost_type C on I.cost_type=C.ct_name
	left join vdt.product P on I.product=P.prod_name
  )
  
  select * into #qerent_attrs from WithIds;

  -- Now we have a view of what the attributes should like, based on this model.  Next job is to match up existing attributes and get their IDs.
  insert into staging.qerent_attr_ids (model_id, attr_id, object_path, attr_name)
  select @model_id, A.attr_id, Q.qerent_path, Q.qerent_attribute
  from #qerent_attrs Q inner join vdt.attribute A
  on Q.attr_name=A.attr_name
  and coalesce(Q.og_id, -1)=coalesce(A.og_id, -1)
  and coalesce(Q.func_id, -1)=coalesce(A.func_id, -1)
  and coalesce(Q.act_id, -1)=coalesce(A.act_id, -1)
  and coalesce(Q.ws_id, -1)=coalesce(A.ws_id, -1)
  and coalesce(Q.loc_id, -1)=coalesce(A.loc_id, -1)
  and coalesce(Q.eqp_type_id, -1)=coalesce(A.eqp_type_id, -1)
  and coalesce(Q.eqp_id, -1)=coalesce(A.eqp_id, -1)
  and coalesce(Q.ct_id, -1)=coalesce(A.ct_id, -1)
  and coalesce(Q.prod_id, -1)=coalesce(A.prod_id, -1)
  and not exists (select * from staging.qerent_attr_ids X where object_path=Q.qerent_path and attr_name=Q.qerent_attribute)

  -- Now update is_cost etc on existing attributes
  update vdt.attribute set unit=Q.unit, sec_level=Q.sec_level, is_cost=Q.is_cost, is_lever=Q.is_lever, is_calculated=Q.is_calculated,
                           is_aggregate=Q.is_aggregate, is_kpi=Q.is_kpi
  from #qerent_attrs Q inner join staging.qerent_attr_ids I on Q.qerent_path=I.object_path and Q.qerent_attribute=I.attr_name
  where attribute.attr_id=I.attr_id --and I.model_id=@model_id

  -- Add any new attributes to the database
  insert into vdt.attribute (attr_name, unit, sec_level, is_cost, is_lever, is_calculated, is_aggregate, is_kpi, og_id, func_id, act_id, ws_id, loc_id, eqp_type_id, eqp_id, ct_id, prod_id)
  select attr_name, coalesce(unit, ''), sec_level, is_cost, is_lever, is_calculated, is_aggregate, is_kpi, og_id, func_id, act_id, ws_id, loc_id, eqp_type_id, eqp_id, ct_id, prod_id
  from #qerent_attrs Q
  where not exists (select * from staging.qerent_attr_ids E where E.object_path=Q.qerent_path and E.attr_name=Q.qerent_attribute /*and E.model_id=@model_id*/);
  
  -- And finally link up the new qerent_attr_ids
  insert into staging.qerent_attr_ids (model_id, attr_id, object_path, attr_name)
  select @model_id, A.attr_id, Q.qerent_path, Q.qerent_attribute
  from #qerent_attrs Q inner join vdt.attribute A
  on Q.attr_name=A.attr_name
  and coalesce(Q.og_id, -1)=coalesce(A.og_id, -1)
  and coalesce(Q.func_id, -1)=coalesce(A.func_id, -1)
  and coalesce(Q.act_id, -1)=coalesce(A.act_id, -1)
  and coalesce(Q.ws_id, -1)=coalesce(A.ws_id, -1)
  and coalesce(Q.loc_id, -1)=coalesce(A.loc_id, -1)
  and coalesce(Q.eqp_type_id, -1)=coalesce(A.eqp_type_id, -1)
  and coalesce(Q.eqp_id, -1)=coalesce(A.eqp_id, -1)
  and coalesce(Q.ct_id, -1)=coalesce(A.ct_id, -1)
  and coalesce(Q.prod_id, -1)=coalesce(A.prod_id, -1)
  and not exists (select * from staging.qerent_attr_ids X where object_path=Q.qerent_path and attr_name=Q.qerent_attribute)

  -- Copy data over from the model
  declare @dataset_id int = null;
  select @dataset_id = dataset_id from vdt.dataset where origin='model' and dataset_name='Model Data - ' + @filename;
  if @dataset_id is null
  begin
    declare @cat_id int = (select category_id from vdt.dataset_category where category_name='Scenario');
	insert into vdt.dataset (model_id, dataset_name, origin, category_id, last_update)
	values (@model_id, 'Model Data - ' + @filename, 'model', @cat_id, current_timestamp);
	set @dataset_id = SCOPE_IDENTITY();
  end
  if @dataset_id is not null
  begin
    delete from vdt.value where dataset_id=@dataset_id;
	insert into vdt.value (dataset_id, attr_id, value)
	select @dataset_id, I.attr_id, Q.value from staging.qerent_attr_ids I
	inner join #qerent_attrs Q on I.[object_path] = Q.[qerent_path] and I.[attr_name] = Q.[qerent_attribute] --and I.model_id=@model_id;
  end

  drop table #qerent_attrs;
  drop table #qerent_attrs_raw;
end

go

alter procedure staging.sp_get_attribute_id_map_to_qerent
  @model_filename nvarchar(256)
as
select object_path + '[' + attr_name + ']' as full_path, I.attr_id,
  case
    when org_group in ('Rail', 'Port', 'WAIO') then '/#!/scenario_planning?site=' + org_group
    when org_group='Mines' then '/#!/scenario_planning?site=' + REPLACE(location, ' ', '%20')
	else ''
  end as link
from staging.qerent_attr_ids I inner join vdt.attribute_category C on I.attr_id=C.attr_id
--inner join vdt.model M on I.model_id=M.model_id
--where (M.filename=@model_filename or M.filename='_debug' and left(@model_filename, 1)='_')
go

alter procedure staging.sp_import_sensitivity (
  @dataset_id int,
  @pc_change float,
  @target_object_path nvarchar(256),
  @target_attr nvarchar(100),
  @target_base_value float,
  @data staging.QerentSensitivityType readonly)
as
begin
  set nocount on

  declare @target_attr_id int
  select @target_attr_id=attr_id from staging.qerent_attr_ids
  where object_path=@target_object_path and attr_name=@target_attr
  if @target_attr_id is null
  begin
    raiserror (N'Invalid attribute %s[%s]', 10, 1, @target_object_path, @target_attr)
	return
  end
  
  declare @model_id int
  select @model_id=model_id from vdt.dataset where dataset_id=@dataset_id

  declare @sensitivity_id int
  select @sensitivity_id=sensitivity_id from vdt.sensitivity
  where dataset_id=@dataset_id and target_attr_id=@target_attr_id
  if @sensitivity_id is null
  begin
    insert into vdt.sensitivity (dataset_id, percent_change, target_attr_id, target_base_value, last_update)
	values (@dataset_id, @pc_change, @target_attr_id, @target_base_value, CURRENT_TIMESTAMP)
	set @sensitivity_id=SCOPE_IDENTITY()
  end;

  delete from vdt.sensitivity_value where sensitivity_id=@sensitivity_id;

  insert into vdt.sensitivity_value (sensitivity_id, attr_id, impact_of_increase, impact_of_decrease)
  select @sensitivity_id, Q.attr_id, D.[Impact of Increase] as impact_of_increase, D.[Impact of Decrease] as impact_of_decrease
  from @data D inner join staging.qerent_attr_ids Q on D.[Object Path]=Q.object_path and D.Attribute=Q.attr_name; --and Q.model_id=@model_id;

  update vdt.sensitivity set target_base_value=@target_base_value, last_update=CURRENT_TIMESTAMP where sensitivity_id=@sensitivity_id;
end
go

alter procedure staging.sp_import_attribution (
  @base_dataset_id int,
  @benchmark_dataset_id int,
  @is_cumulative bit,
  @target_object_path nvarchar(256),
  @target_attr nvarchar(100),
  @target_base_value float,
  @data staging.QerentAttributionType readonly)
as
begin
  set nocount on

  declare @target_attr_id int
  select @target_attr_id=attr_id from staging.qerent_attr_ids
  where object_path=@target_object_path and attr_name=@target_attr
  if @target_attr_id is null
  begin
    raiserror (N'Invalid attribute %s[%s]', 10, 1, @target_object_path, @target_attr)
	return
  end
  
  declare @model_id int
  select @model_id=model_id from vdt.dataset where dataset_id=@base_dataset_id

  declare @attribution_id int
  select @attribution_id=attribution_id from vdt.attribution
  where base_dataset_id=@base_dataset_id and benchmark_dataset_id=@benchmark_dataset_id
  and target_attr_id=@target_attr_id and is_cumulative=@is_cumulative
  if @attribution_id is null
  begin
    insert into vdt.attribution (base_dataset_id, benchmark_dataset_id, is_cumulative, target_attr_id, target_base_value, last_update)
	values (@base_dataset_id, @benchmark_dataset_id, @is_cumulative, @target_attr_id, @target_base_value, CURRENT_TIMESTAMP)
	set @attribution_id=SCOPE_IDENTITY()
  end;

  delete from vdt.attribution_value where attribution_id=@attribution_id;

  insert into vdt.attribution_value (attribution_id, attr_id, impact_on_target, seq_number)
  select @attribution_id, Q.attr_id, D.[Impact on Target] as impact_on_target, D.[Sequence] as seq_number
  from @data D inner join staging.qerent_attr_ids Q on D.[Object Path]=Q.object_path and D.Attribute=Q.attr_name; --and Q.model_id=@model_id;

  update vdt.attribution set target_base_value=@target_base_value, last_update=CURRENT_TIMESTAMP where attribution_id=@attribution_id;
end
go


alter view staging.qerent_import as
select V.dataset_id, Q.object_path, Q.attr_name, coalesce(C.new_value, V.value) as value
from vdt.value V inner join vdt.attribute A on V.attr_id=A.attr_id
inner join vdt.dataset D on V.dataset_id=D.dataset_id
inner join staging.qerent_attr_ids Q on A.attr_id=Q.attr_id --and D.model_id=Q.model_id
left join vdt.scenario S on S.view_dataset_id=V.dataset_id
left join vdt.scenario_change C on S.scenario_id=C.scenario_id and C.attr_id=A.attr_id
where A.is_calculated=0
go

ALTER procedure [vdt].[sp_copy_dataset]
   @base_dataset_id int,
   @dataset_name nvarchar(100),
   @description nvarchar(100),
   @user_id int,
   @category_id int,
   @is_public bit
AS 


declare @model_id int;
declare @dataset_id int;
select @model_id =model_id from VDT.dataset where dataset_id = @base_dataset_id

BEGIN 
     SET NOCOUNT ON 

INSERT into VDT.dataset (model_id, dataset_name,origin,last_update,[description],created,deleted,category_id)
values(@model_id,@dataset_name,'user',GETDATE(),@description,GETDATE(),0,@category_id)

select @dataset_id= CAST(scope_identity() AS int)

INSERT into VDT.value 
(dataset_id, attr_id, value) 
select @dataset_id, attr_id, value from VDT.data where dataset_id = @base_dataset_id


INSERT into VDT.scenario 
(model_id, base_dataset_id, view_dataset_id,scenario_name,created_by,editing_by,is_public) 

values (@model_id,@base_dataset_id,@dataset_id,@dataset_name,@user_id,null,@is_public)

END 
GO


ALTER view [vdt].[data] as
select
    DS.dataset_id as dataset_id,
	DSS.scenario_id as scenario_id,
	DS.dataset_name as dataset,
	OG.og_name as org_group,
	FN.func_name as [function],
	ACT.act_name as activity,
	WS.ws_name as workstream,
	LOC.loc_name as location,
	ETP.eqp_type_name as equipment_type,
	EQP.eqp_name as equipment,
	CT.ct_name as cost_type,
	PR.prod_name as product,
	A.attr_id,
	A.attr_name as attribute,
	A.unit as attribute_unit,
	A.sec_level as attribute_sec_level,
	A.is_cost as attribute_is_cost,
	A.is_lever as attribute_is_lever,
	A.is_aggregate as attribute_is_aggregate,
	A.is_kpi as attribute_is_kpi,
    coalesce(C.new_value, V.value) as value,
	coalesce(coalesce(BC.new_value, B.value),V.Value) as base_value,
	C.new_value as override_value
from vdt.value V 
inner join vdt.dataset DS on V.dataset_id=DS.dataset_id
inner join vdt.attribute A on V.attr_id=a.attr_id
left join vdt.org_group OG on A.og_id=OG.og_id
left join vdt.[function] FN on A.func_id=FN.func_id
left join vdt.[workstream] WS on A.ws_id=WS.ws_id
left join vdt.location LOC on A.loc_id=LOC.loc_id
left join vdt.activity ACT on A.act_id=ACT.act_id
left join vdt.eqp_type ETP on A.eqp_type_id=ETP.eqp_type_id
left join vdt.equipment EQP on A.eqp_id=EQP.eqp_id
left join vdt.cost_type CT on A.ct_id=CT.CT_id
left join vdt.product PR on A.prod_id=PR.prod_id
left join vdt.scenario DSS on DS.dataset_id = DSS.view_dataset_id
left join vdt.scenario BDSS on DSS.base_dataset_id = BDSS.view_dataset_id
left join vdt.scenario_change C on DSS.scenario_id=C.scenario_id and A.attr_id=C.attr_id
left join vdt.scenario_change BC on BDSS.scenario_id = BC.scenario_id and A.attr_id = BC.attr_id
left join vdt.value B on V.attr_id = B.attr_id and B.dataset_id = DSS.base_dataset_id

GO

set nocount on;
insert into vdt.unit_format (unit, [format]) values ('$/$', '{0:4s}');
insert into vdt.unit_format (unit, [format]) values ('$/service', '{0:4s}');
insert into vdt.unit_format (unit, [format]) values ('A$M/t', '{0:4s}');
insert into vdt.unit_format (unit, [format]) values ('cycles/service', '{0:4s}');
insert into vdt.unit_format (unit, [format]) values ('km/cycle', '{0:4s}');
insert into vdt.unit_format (unit, [format]) values ('km/t', '{0:4s}');
insert into vdt.unit_format (unit, [format]) values ('MWh/service', '{0:4s}');
insert into vdt.unit_format (unit, [format]) values ('MWh/t', '{0:4s}');
insert into vdt.unit_format (unit, [format]) values ('t/m', '{0:4s}');
go

create procedure vdt.sp_get_system_site_margins
  @dataset_id int,
  @user_id int
as
select
  [attribute] as [Site],
  attribute_unit as [Unit],
  case when base_value=0 then 0 else value/base_value-1 end as [% Change:{0:2%}],
  value as [Scenario:_format],
  base_value as [Baseline:_format],
  [format] as _format
from vdt.data
left join vdt.unit_format on data.attribute_unit=unit_format.unit
where [org_group]='WAIO' and [function] like '% Margin%' and location is null and equipment is null and [activity] is null
AND (select sec_level from vdt.[user] where [user_id] = @user_id) >=  attribute_sec_level
and dataset_id=@dataset_id

go

create procedure vdt.sp_get_system_product_margins
  @dataset_id int,
  @user_id int
as
select
  [activity] as Product,
  [attribute] as Measure,
  attribute_unit as [Unit],
  case when base_value=0 then 0 else value/base_value-1 end as [% Change:{0:2%}],
  value as [Scenario:_format],
  base_value as [Baseline:_format],
  [format] as _format
from vdt.data
left join vdt.unit_format on data.attribute_unit=unit_format.unit
where [org_group]='WAIO' and [function]='Product Margin' and location is null and equipment is null
and attribute like '%Margin%'
AND (select sec_level from vdt.[user] where [user_id] = @user_id) >=  attribute_sec_level
and dataset_id=@dataset_id
go

alter procedure vdt.sp_get_site_reports
  @site nvarchar(100),
  @dataset_id int,
  @user_id int
as
begin
  set nocount on;

  declare @reports table (
    title nvarchar(50),
	sproc nvarchar(50),
	args nvarchar(100),
	renderer nvarchar(50),
	value_format nvarchar(50));

  insert into @reports (title, sproc, args, renderer, value_format) values ('WAIO KPI', 'vdt.sp_get_system_kpis', '@dataset_id,@user_id', 'SimpleTable', '');
  if @site <> 'WAIO'
  begin
    insert into @reports (title, sproc, args, renderer, value_format) values (@site + ' Volume KPI', 'vdt.sp_get_site_volume_kpis', '@site_name,@dataset_id,@user_id', 'SimpleTable', '');
    insert into @reports (title, sproc, args, renderer, value_format) values (@site + ' Cost KPI', 'vdt.sp_get_site_cost_kpis', '@site_name,@dataset_id,@user_id', 'SimpleTable', '');
  end
  else
  begin
    insert into @reports (title, sproc, args, renderer, value_format) values ('OOR Tonnes', 'vdt.sp_get_mining_oor', '@dataset_id,@user_id', 'SimpleTable', '');
    insert into @reports (title, sproc, args, renderer, value_format) values ('WAIO Costs', 'vdt.sp_get_system_total_cost', '@dataset_id,@user_id', 'ColumnChart', 'A$M');
    insert into @reports (title, sproc, args, renderer, value_format) values ('WAIO Cost Changes', 'vdt.sp_get_system_cost_waterfall', '@dataset_id,@user_id', 'ColumnChart', '$/t');
    insert into @reports (title, sproc, args, renderer, value_format) values ('System Capacity', 'vdt.sp_get_system_tonnes', '@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
  end
  insert into @reports (title, sproc, args, renderer, value_format) values ('Incremental OOR Tonnes', 'vdt.sp_get_mining_tonnes_waterfall', '@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
  if @site not in ('Rail', 'Port', 'WAIO')
  begin
    insert into @reports (title, sproc, args, renderer, value_format) values ('Mine Capacity (Ore Tonnes)', 'vdt.sp_get_capacity_chart', '@site_name,@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
    insert into @reports (title, sproc, args, renderer, value_format) values ('System Capacity', 'vdt.sp_get_system_tonnes', '@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
	insert into @reports (title, sproc, args, renderer, value_format) values ('Process Costs', 'vdt.sp_get_mine_total_cost_chart', '@site_name,@dataset_id,@user_id', 'ColumnChart', 'A$M');
	insert into @reports (title, sproc, args, renderer, value_format) values ('Cost Changes ($/t OOR)', 'vdt.sp_get_mine_cost_waterfall', '@site_name,@dataset_id,@user_id', 'ColumnChart', '$/t');
	insert into @reports (title, sproc, args, renderer, value_format) values ('Rehandle Cost', 'vdt.sp_get_mine_rehandle_cost_per_tonne', '@site_name,@dataset_id,@user_id', 'SimpleTable', '$/t');
	insert into @reports (title, sproc, args, renderer, value_format) values ('Rehandle Cost', 'vdt.sp_get_mine_rehandle_cost_total', '@site_name,@dataset_id,@user_id', 'SimpleTable', 'A$M');	
	insert into @reports (title, sproc, args, renderer, value_format) values ('Process Efficiency', 'vdt.sp_get_mine_process_efficiencies', '@site_name,@dataset_id,@user_id', 'SimpleTable', '');	
  end
  if @site = 'Rail'
  begin
    insert into @reports (title, sproc, args, renderer, value_format) values ('System Capacity', 'vdt.sp_get_system_tonnes', '@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
    insert into @reports (title, sproc, args, renderer, value_format) values ('Rail Costs', 'vdt.sp_get_rail_total_cost', '@dataset_id,@user_id', 'ColumnChart', 'A$M');
    insert into @reports (title, sproc, args, renderer, value_format) values ('Rail Cost Changes', 'vdt.sp_get_rail_cost_waterfall', '@dataset_id,@user_id', 'ColumnChart', '$/t');
  end
  if @site = 'Port'
  begin
    insert into @reports (title, sproc, args, renderer, value_format) values ('Port Capacity', 'vdt.sp_get_port_capacity_chart', '@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
    insert into @reports (title, sproc, args, renderer, value_format) values ('System Capacity', 'vdt.sp_get_system_tonnes', '@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
    insert into @reports (title, sproc, args, renderer, value_format) values ('Port Costs', 'vdt.sp_get_port_total_cost', '@dataset_id,@user_id', 'ColumnChart', 'A$M');
    insert into @reports (title, sproc, args, renderer, value_format) values ('Port Cost Changes', 'vdt.sp_get_port_cost_waterfall', '@dataset_id,@user_id', 'ColumnChart', '$/t');
  end
  insert into @reports (title, sproc, args, renderer, value_format) values ('Site margins', 'vdt.sp_get_system_site_margins', '@dataset_id,@user_id', 'SimpleTable', '');
  insert into @reports (title, sproc, args, renderer, value_format) values ('Product margins', 'vdt.sp_get_system_product_margins', '@dataset_id,@user_id', 'SimpleTable', '');
  select * from @reports;
end
go

alter procedure staging.sp_import_qerent_model_structure (
    @filename nvarchar(256),
	@data staging.QerentStructureType readonly)
as
begin
  set nocount on

  -- debugging purposes only
  if object_id(N'staging.temp_qerent_import', N'U') is not null
    drop table staging.temp_qerent_import;
  select * into staging.temp_qerent_import from @data;
  -- end debugging

  -- Set up the entry in the model table, if it doesn't already exist.
  if left(@filename, 1) = '_' set @filename = '_debug'
  declare @model_id int = null
  declare @should_copy_data bit = 0
  select @model_id=model_id from vdt.model where [filename]=@filename
  if @model_id is null
  begin
    insert into vdt.model ([filename], [file_date]) values (@filename, current_timestamp)
	set @model_id=SCOPE_IDENTITY()
  end
  else
  begin
    update vdt.model set file_date=current_timestamp where model_id=@model_id
  end;
  set @should_copy_data = 1;

  -- This lengthy query sets up a view of how the attributes from Qerent should be mapped into the vdt.attributes table.
  -- The result of this will get stored in #qerent_attrs later.
  with QAttrs as (
  select * from @data)
  
  ,DrillFleets as (
  select [Object Path], [O2] as Mine, [O5] as Fleet from QAttrs where O1='Mines' and O4='Drill' and [Attribute]='Target tonnes')
  
  ,DrillProd as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream, F.Mine as location,
    'Drills' as equipment_type, F.Fleet as equipment, null as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from DrillFleets F inner join QAttrs A on F.[Object Path]=A.[Object Path]
  )--where A.[Attribute] not in ('Headroom', 'Cost', 'Fixed cost', 'Variable cost'))
  
  ,DrillFleetCostLevers as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity,
    case when substring([O7], 1, 11)='Maintenance' then 'Maintenance' else 'Operations' end as workstream,
    F.Mine as location, 'Drills' as equipment_type, F.Fleet as equipment, coalesce([O8], [O7]) as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A inner join DrillFleets F on substring(A.[Object Path], 1, len(F.[Object Path]) + 7) = F.[Object Path] + '.Costs.'
  where left(A.[Type],1)='C')
  
  ,DrillOperationsCostLevers as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream,
    A.[O2] as location, null as equipment_type, null as equipment, coalesce([O7], [O6]) as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Drill' and [O5]='Operations' and [O6] is not null
  and left(A.[Type],1) = 'C'
  and (A.[O6] <> 'Fuels & Oils' or A.[O7] is not null))
  
  ,DrillSummary as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream,
    A.[O2] as location, null as equipment_type, null as equipment, null as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Drill' and [O5] is null
  and [Attribute] not in ('Use of Headroom'))
  
  ,DrillStock as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream,
    A.[O2] as location, 'Stockpile' as equipment_type, 'Drill Stock' as equipment, null as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Drill' and [O5]='Drill Inventory'
  )
  
  ,Blast as (
  select 'Mines' as org_group, 'Mining' as [function], 'Blast' as activity, 'Operations' as workstream,
    A.[O2] as location,
    case when [O5]='Blast Inventory' then 'Stockpile' else null end as equipment_type,
    case when [O5]='Blast Inventory' then [O5] else null end as equipment,
    [O6] as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Blast'
  )

  ,LoadHaul as (
  select 'Mines' as org_group, 'Mining' as [function],
    case when [O5] is null or [O5]='Operations' then 'Load & Haul' else [O5] end as activity,
	'Operations' as workstream,
    A.[O2] as location,
    case when [O5]='Load' then left([O6], len([O6])-1) when [O6] is null then null when [O5]='Haul' then 'Truck' else null end as equipment_type,
    case when [O5]='Load' then [O7] else [O6] end as equipment,
    case [O5] when 'Operations' then [O6] when 'Load' then [O9] else [O8] end as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Load & haul'
  )
  
  ,MineServicesAndOverheads as (
  select 'Mines' as org_group, 'Mining' as [function],
    [O4] as activity,
	case when [O4] is null then null when [O5]='Operations' or [O4]='Overheads' then 'Operations' else 'Support' end as workstream,
    A.[O2] as location,
    case when [O4] is null then null when [O5]='Operations' then null when [O4]='Overheads' then [O5] else 'Support' end as equipment_type,
    case when [O5]='Operations' then null when [O4]='Overheads' then [O6] else [O5] end as equipment,
    case when [O4]='Overheads' then [O7] else [O6] end as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Mining' and ([O4] is null or [O4] not in ('Drill', 'Blast', 'Load & haul'))
  )
  
  ,OverheadsMines as (
  select 'Mines' as org_group, 'Mining' as [function],
    'Overheads' as activity,
	coalesce([O4], 'Operations') as workstream,
    null as location,
    null as equipment_type,
    [O3] as equipment,
    coalesce([O5], [O4], [O3]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O2]='Overheads Mines'
  )

  ,ProcessingPlants as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	'Operations' as workstream,
    [O2] as location,
    'Plant' as equipment_type,
    [O5] as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O6] is null and [O4] not in ('Non Allocated Cost', 'Overheads')
  )

  ,ProcessingPlantCosts as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	case when [O8]='Maintenance' then 'Maintenance' else 'Operations' end as workstream,
    [O2] as location,
    'Plant' as equipment_type,
    [O7] as equipment,
    coalesce([O9], [O8]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O6]='Costs'
  )
  
  ,ProcessingNonAllocatedAndOverheads as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	[O5] as workstream,
    [O2] as location,
    case when [O7] is not null then [O6] else null end as equipment_type,
    null as equipment,
    coalesce([O7], [O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O4] in ('Non Allocated Cost', 'Overheads')
  )

  ,ProcessingTopLevel as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	null as workstream,
    [O2] as location,
    null as equipment_type,
    null as equipment,
    coalesce([O7], [O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O4] is null
  )
  
  ,MinesOverheads as (
  select 'Mines' as org_group, 'Overheads' as [function],
    [O4] as activity,
	case when [O5]='Maintenance' then [O5] else 'Operations' end as workstream,
    [O2] as location,
    case when [O5]='Maintenance' then null else [O5] end as equipment_type,
    null as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 3) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Overheads'
  )

  ,MinesTopLevel as (
  select 'Mines' as org_group, null as [function],
    null as activity,
	null as workstream,
    [O2] as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3] is null
  )
   
  ,RailVolume as (
  select
    'Rail' as org_group,
	case [O2] when 'Mines OOR' then 'Mainline' when 'Mines OFH' then 'Shuttle' else [O2] end as [function],
    'Rail' as activity,
	'Operations' as workstream,
    case when [O3]='Virtual Stockpile' then null else coalesce([O4], [O3]) end as location,
    null as equipment_type,
    null as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and substring(A.[Type], 1, 1) <> 'C' and [O2] is not null
  )

  ,RailProdCosts as (
  select
    'Rail' as org_group,
	case when [O2] in ('Mainline', 'Shuttle') then 'Production' else [O2] end as [function],
    case when [O2] in ('Mainline', 'Shuttle') then 'Operations' else [O3] end as activity,
	coalesce([O4], 'Direct Cost') as workstream,
    case when [O2] in ('Mainline', 'Shuttle') then coalesce([O3], [O2]) else null end as location,
    null as equipment_type,
    null as equipment,
    coalesce([O6], [O5], 'Diesel') as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and substring(A.[Type], 1, 1) = 'C' and [O2] not in ('Maintenance', 'Overheads') and [O2] is not null
  )

  ,RailOverheads as (
  select
    'Rail' as org_group,
	[O2] as [function],
    [O3] as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    coalesce([O5], [O4]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and [O2]='Overheads'
  )

  ,RailMaintenance as (
  select
    'Rail' as org_group,
	[O2] as [function],
    [O3] as activity,
	case when [o6] is null then 'Supporting Cost' else [o5] end as workstream,
    null as location,
    case when [O4] <> 'Overheads' and [o5] is not null then [o4] else null end as equipment_type,
    null as equipment,
    coalesce([O6], [O5], [O4]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and [O2]='Maintenance'
  )

  ,RailTopLevel as (
  select
    [O1] as org_group,
	null as [function],
    null as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and [O2] is null
  )

  ,PortInflow as (
  select
    [O1] as org_group,
	'Production' as [function],
    [O2] as activity,
	'Operations' as workstream,
    [O4] as location,
    case when [O3] is null then null else 'Car Dumper' end as equipment_type,
    [O3] as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Inflow'
  )

  ,PortOutflow as (
  select
    [O1] as org_group,
	'Production' as [function],
    [O3] as activity,
	'Operations' as workstream,
    coalesce([O6], [O4]) as location,
    left([O7], len([o7])-1) as equipment_type,
    [O8] as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O3]='Outflow'
  )

  ,PortProductionCosts as (
  select
    [O1] as org_group,
	[O2] as [function],
    [O4] as activity,
	case when [O6] is null then [O4] else [O5] end as workstream,
    [O3] as location,
    left([O7], len([o7])-1) as equipment_type,
    [O8] as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O3]<>'Outflow' and [O2]='Production'
  )

  ,PortSiteMaintenance as (
  select
    [O1] as org_group,
	[O2] as [function],
    case when [O4]='Overheads' then 'Overheads' else 'Maintenance' end as activity,
	case when [O4]='Overheads' then [O5] else 'Maintenance' end as workstream,
    [O3] as location,
    case when [O4]='Overheads' then null else left([O4], len([O4])-1) end as equipment_type,
    case when [O4]='Overheads' then null else [O5] end as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Maintenance' and [O3] in ('Nelson Point', 'Finucane Island')
  )

  ,PortMaintenance as (
  select
    [O1] as org_group,
	[O2] as [function],
    [O3] as activity,
	case when [O5] is null then 'Operations' when [O4]='Overheads' then [O5] when [O4] in ('Nelson Point', 'Finucane Island') then 'Operations' when [O4]='Other' then null else [O4] end as workstream,
    case when [O4] in ('Nelson Point', 'Finucane Island') then [O4] else null end as location,
    null as equipment_type,
    null as equipment,
    coalesce([O6], [O5], [O4]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Maintenance' and [O3] not in ('Nelson Point', 'Finucane Island')
  )

  ,PortMarine as (
    select
    [O1] as org_group,
	[O2] as [function],
    [O3] as activity,
	case when [O5] is null then 'Operations' else [O4] end as workstream,
    null as location,
    case when [O3]='Demurrage' then [O4] else null end as equipment_type,
    null as equipment,
    case when [O3]='Demurrage' then 'Demurrage' else coalesce([O5], [O4]) end as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Marine'
  )

  ,PortOverheads as (
  select
    [O1] as org_group,
	[O2] as [function],
    [O3] as activity,
	'Operations' as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    [O4] as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Overheads'
  )

  ,PortTopLevel as (
  select
    [O1] as org_group,
	null as [function],
    null as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2] is null
  )

  ,FunctionsCosts as (
  select
    'WAIO' as org_group,
	[O1] as [function],
    [O2] as activity,
	[O3] as workstream,
    [O4] as location,
    [O5] as equipment_type,
    [O6] as equipment,
    [O7] as cost_type,
	[O8] as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 3) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1] not in ('EBITDA', 'Mines', 'Rail', 'Port')
  )

  ,Revenue as (
  select 'WAIO' as org_group, 'Revenue' as [function],
    'Sales' as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	[O2] as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 3) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='EBITDA'
  )

  ,AllAttrs as (
    select * from DrillProd
    union all select * from DrillFleetCostLevers
    union all select * from DrillOperationsCostLevers
    union all select * from DrillSummary
    union all select * from DrillStock
    union all select * from Blast
	union all select * from LoadHaul
	union all select * from MineServicesAndOverheads
	union all select * from ProcessingPlants
	union all select * from ProcessingPlantCosts
	union all select * from ProcessingNonAllocatedAndOverheads
	union all select * from ProcessingTopLevel
	union all select * from MinesOverheads
	union all select * from MinesTopLevel
	union all select * from OverheadsMines
	union all select * from RailVolume
	union all select * from RailProdCosts
	union all select * from RailOverheads
	union all select * from RailMaintenance
	union all select * from RailTopLevel
	union all select * from PortInflow
	union all select * from PortOutflow
	union all select * from PortProductionCosts
	union all select * from PortSiteMaintenance
	union all select * from PortMaintenance
	union all select * from PortMarine
	union all select * from PortOverheads
	union all select * from PortTopLevel
	union all select * from FunctionsCosts
	union all select * from Revenue
  )

  select * into #qerent_attrs_raw from AllAttrs;

  -- Update category values for each category
  with Names as (select distinct org_group from #qerent_attrs_raw)
  insert into vdt.org_group (og_name) select org_group from Names
  where not exists (select * from vdt.org_group where og_name=Names.org_group)
  and Names.org_group is not null;

  with Names as (select distinct [function] from #qerent_attrs_raw)
  insert into vdt.[function] (func_name) select [function] from Names
  where not exists (select * from vdt.[function] where func_name=Names.[function])
  and Names.[function] is not null;

  with Names as (select distinct activity from #qerent_attrs_raw)
  insert into vdt.activity (act_name) select activity from Names
  where not exists (select * from vdt.activity where act_name=Names.activity)
  and Names.activity is not null;

  with Names as (select distinct workstream from #qerent_attrs_raw)
  insert into vdt.workstream (ws_name) select workstream from Names
  where not exists (select * from vdt.workstream where ws_name=Names.workstream)
  and Names.workstream is not null;

  with Names as (select distinct location from #qerent_attrs_raw)
  insert into vdt.location (loc_name) select location from Names
  where not exists (select * from vdt.location where loc_name=Names.location)
  and Names.location is not null;

  with Names as (select distinct equipment_type from #qerent_attrs_raw)
  insert into vdt.eqp_type (eqp_type_name) select equipment_type from Names
  where not exists (select * from vdt.eqp_type where eqp_type_name=Names.equipment_type)
  and Names.equipment_type is not null;

  with Names as (select distinct equipment from #qerent_attrs_raw)
  insert into vdt.equipment (eqp_name) select equipment from Names
  where not exists (select * from vdt.equipment where eqp_name=Names.equipment)
  and Names.equipment is not null;

  with Names as (select distinct cost_type from #qerent_attrs_raw)
  insert into vdt.cost_type (ct_name) select cost_type from Names
  where not exists (select * from vdt.cost_type where ct_name=Names.cost_type)
  and Names.cost_type is not null;

  with Names as (select distinct product from #qerent_attrs_raw)
  insert into vdt.product (prod_name) select product from Names
  where not exists (select * from vdt.product where prod_name=Names.product)
  and Names.product is not null;
  

  -- Join back to the qerent attrs to get the category IDs
  with WithIds as (
	select I.name as attr_name, I.unit, I.sec_level, I.is_cost, I.is_lever, I.is_calculated, I.is_aggregate, I.is_kpi,
	  O.og_id, F.func_id, A.act_id, W.ws_id, L.loc_id, ET.eqp_type_id, E.eqp_id, C.ct_id, P.prod_id,
	  I.value, I.path as qerent_path, I.attribute as qerent_attribute
	from #qerent_attrs_raw I
	left join vdt.org_group O on I.org_group=O.og_name
	left join vdt.[function] F on I.[function]=F.[func_name]
	left join vdt.activity A on I.activity=A.act_name
	left join vdt.workstream W on I.workstream=W.ws_name
	left join vdt.location L on I.location=L.loc_name
	left join vdt.eqp_type ET on I.equipment_type=ET.eqp_type_name
	left join vdt.equipment E on I.equipment=E.eqp_name
	left join vdt.cost_type C on I.cost_type=C.ct_name
	left join vdt.product P on I.product=P.prod_name
  )
  
  select * into #qerent_attrs from WithIds;

  -- Now we have a view of what the attributes should like, based on this model.  Next job is to match up existing attributes and get their IDs.
  insert into staging.qerent_attr_ids (model_id, attr_id, object_path, attr_name)
  select @model_id, A.attr_id, Q.qerent_path, Q.qerent_attribute
  from #qerent_attrs Q inner join vdt.attribute A
  on Q.attr_name=A.attr_name
  and coalesce(Q.og_id, -1)=coalesce(A.og_id, -1)
  and coalesce(Q.func_id, -1)=coalesce(A.func_id, -1)
  and coalesce(Q.act_id, -1)=coalesce(A.act_id, -1)
  and coalesce(Q.ws_id, -1)=coalesce(A.ws_id, -1)
  and coalesce(Q.loc_id, -1)=coalesce(A.loc_id, -1)
  and coalesce(Q.eqp_type_id, -1)=coalesce(A.eqp_type_id, -1)
  and coalesce(Q.eqp_id, -1)=coalesce(A.eqp_id, -1)
  and coalesce(Q.ct_id, -1)=coalesce(A.ct_id, -1)
  and coalesce(Q.prod_id, -1)=coalesce(A.prod_id, -1)
  and not exists (select * from staging.qerent_attr_ids X where object_path=Q.qerent_path and attr_name=Q.qerent_attribute)

  -- Now update is_cost etc on existing attributes
  update vdt.attribute set unit=Q.unit, sec_level=Q.sec_level, is_cost=Q.is_cost, is_lever=Q.is_lever, is_calculated=Q.is_calculated,
                           is_aggregate=Q.is_aggregate, is_kpi=Q.is_kpi
  from #qerent_attrs Q inner join staging.qerent_attr_ids I on Q.qerent_path=I.object_path and Q.qerent_attribute=I.attr_name
  where attribute.attr_id=I.attr_id --and I.model_id=@model_id

  -- Add any new attributes to the database
  insert into vdt.attribute (attr_name, unit, sec_level, is_cost, is_lever, is_calculated, is_aggregate, is_kpi, og_id, func_id, act_id, ws_id, loc_id, eqp_type_id, eqp_id, ct_id, prod_id)
  select attr_name, coalesce(unit, ''), sec_level, is_cost, is_lever, is_calculated, is_aggregate, is_kpi, og_id, func_id, act_id, ws_id, loc_id, eqp_type_id, eqp_id, ct_id, prod_id
  from #qerent_attrs Q
  where not exists (select * from staging.qerent_attr_ids E where E.object_path=Q.qerent_path and E.attr_name=Q.qerent_attribute /*and E.model_id=@model_id*/);
  
  -- And finally link up the new qerent_attr_ids
  insert into staging.qerent_attr_ids (model_id, attr_id, object_path, attr_name)
  select @model_id, A.attr_id, Q.qerent_path, Q.qerent_attribute
  from #qerent_attrs Q inner join vdt.attribute A
  on Q.attr_name=A.attr_name
  and coalesce(Q.og_id, -1)=coalesce(A.og_id, -1)
  and coalesce(Q.func_id, -1)=coalesce(A.func_id, -1)
  and coalesce(Q.act_id, -1)=coalesce(A.act_id, -1)
  and coalesce(Q.ws_id, -1)=coalesce(A.ws_id, -1)
  and coalesce(Q.loc_id, -1)=coalesce(A.loc_id, -1)
  and coalesce(Q.eqp_type_id, -1)=coalesce(A.eqp_type_id, -1)
  and coalesce(Q.eqp_id, -1)=coalesce(A.eqp_id, -1)
  and coalesce(Q.ct_id, -1)=coalesce(A.ct_id, -1)
  and coalesce(Q.prod_id, -1)=coalesce(A.prod_id, -1)
  and not exists (select * from staging.qerent_attr_ids X where object_path=Q.qerent_path and attr_name=Q.qerent_attribute)

  -- Copy data over from the model
  declare @dataset_id int = null;
  select @dataset_id = dataset_id from vdt.dataset where origin='model' and dataset_name='Model Data - ' + @filename;
  if @dataset_id is null
  begin
    declare @cat_id int = (select category_id from vdt.dataset_category where category_name='Scenario');
	insert into vdt.dataset (model_id, dataset_name, origin, category_id, last_update)
	values (@model_id, 'Model Data - ' + @filename, 'model', @cat_id, current_timestamp);
	set @dataset_id = SCOPE_IDENTITY();
  end
  if @dataset_id is not null
  begin
    delete from vdt.value where dataset_id=@dataset_id;
	insert into vdt.value (dataset_id, attr_id, value)
	select @dataset_id, I.attr_id, Q.value from staging.qerent_attr_ids I
	inner join #qerent_attrs Q on I.[object_path] = Q.[qerent_path] and I.[attr_name] = Q.[qerent_attribute] --and I.model_id=@model_id;
  end

  drop table #qerent_attrs;
  drop table #qerent_attrs_raw;
end

go
commit transaction Version6
go

PRINT 'Database has been updated successfully to version 6'
set noexec off;


declare @cur_version int = (select max(db_version) from vdt.config)
IF @cur_version >= 7
begin
  print 'Skipping database update to v7; already at version ' + cast(@cur_version as nvarchar)
  set noexec on
end

begin transaction Version7;
go

set xact_abort on;
set nocount on;

INSERT INTO vdt.config([db_version],[updated_on]) VALUES(7,  getdate())
go


alter procedure [staging].[sp_import_excel]
  @dataset_name nvarchar(200),
  @model_id int,
  @user_id int,
  @description nvarchar(1000),
  @category nvarchar(100),
  @data staging.ExcelImportType readonly
as
begin
  set nocount on;

  declare @results table (severity nvarchar(20), [message] nvarchar(200));
  declare @shouldCopyData bit = 0
  -- severity is one of: info, warning, error
  insert into @results (severity, [message]) values ('info', 'Starting data import');

/***********************SUMMARY************************** 
Temp tables that exist are the following:
• #Final_Calc_Dataset - The input sheet
• #MiningCostDrivers - Majority of the cost drivers for mining
• #MiningCostRates;   
• #retrieve_attribute_id;    
• #final_attribute;   
• #fulljoin;   
• #ProductionTime - calcs to convert the hours into percentages for production data 
• #CostRates  - Includes the cost rate calc
• #ActiveRakesCalc  
• #HaulAdjustments - Includes the backcals for haul adjustments.
• #LoadAdjustments - Includes the backcals for load adjustments.
• #PortCostDrivers - Includes the port back calculations
*/

select * into #Final_Calc_Dataset from @data;

-- set blanks to null
update #Final_Calc_Dataset set Org_Group = null where Org_Group = '' ;
update #Final_Calc_Dataset set Location = null where Location = '' ;
update #Final_Calc_Dataset set [Function] = null where [Function] = '' ;
update #Final_Calc_Dataset set Activity = null where Activity = '' ;
update #Final_Calc_Dataset set Equipment_Type = null where Equipment_Type = '' ;
update #Final_Calc_Dataset set Equipment = null where Equipment = '' ;
update #Final_Calc_Dataset set Workstream = null where Workstream = '' ;
update #Final_Calc_Dataset set Cost_Type = null where Cost_Type = '' ;
update #Final_Calc_Dataset set Product = null where Product = '' ;
update #Final_Calc_Dataset set Attribute = null where Attribute = '' ;

 --Table updates to conform to the attribute fact table and back calculations
update #Final_Calc_Dataset set attribute = 'Tonnes blasted' where attribute = 'Tonnes of ore blasted' ;
update #Final_Calc_Dataset set Equipment_Type = 'Loader' where Equipment_Type = 'Loaders' ;
update #Final_Calc_Dataset set Equipment_Type = 'Excavator' where Equipment_Type = 'Excavators' ;
update #Final_Calc_Dataset set Equipment_Type = 'Truck' where Equipment_Type = 'Trucks' ;
update #Final_Calc_Dataset set Attribute = 'Closing stock' where  Attribute = 'Closing balance' and org_group = 'Port' ;
update #Final_Calc_Dataset set Attribute = 'L/F split' where  Attribute = 'L/F split ratio' ;
update #Final_Calc_Dataset set Attribute = 'Total movement tonnes' where	Attribute = 'Total movement'	and Activity is not null 
																		and Workstream is not null and Equipment_Type is not null 
																		and Equipment is not null ;
update #Final_Calc_Dataset set Attribute = 'Target Tonnes' where Attribute = 'Throughput'; 
update #Final_Calc_Dataset set Attribute = 'Average no. of drills' where Attribute = 'Average no of drills'; 
update #Final_Calc_Dataset set Attribute = 'Starved/blocked' where Attribute = 'Starved/block time'; 
update #Final_Calc_Dataset set Attribute = 'Unscheduled process downtime excl. starve/block' where Attribute = 'Unscheduled operating loss time (exclude starve/block time)'; 
update #Final_Calc_Dataset set Equipment_Type = 'CFR Ships' Where attribute = 'CFR ratio'
update #Final_Calc_Dataset set Equipment_Type = 'FOB Ships' Where attribute = 'FOB ratio'


-------------------######################################################################################################################-----------------------	
-------------------######################################################################################################################-----------------------
-------------------######################################################################################################################-----------------------
----------------------------------------------------------------------------Mining------------------------------------------------------------------------------

--=====================================================================INITIAL CHECKS===========================================================================

-- check if tonnes of ore blasted has missing values
insert into @results (severity, [message])
select 'warning', Location + ' tonnes blasted is zero or blank' from #Final_Calc_Dataset where Attribute='Tonnes blasted' and (Value is null or Value = 0)


-- check if drill stock has missing values
insert into @results (severity, [message])
select 'warning', Location + ' drill stock is zero or blank' from #Final_Calc_Dataset where Equipment = 'Drill Stock' and (Value is null or Value = 0)
;

--=====================================================================Calculations===========================================================================
With DrillDensity as (
			select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Density'  as 'Attribute', c.Unit, c.[Cost?] 
				,case when pb.[Value] = 0 then '0' else (pa.[Value]) / pb.[Value] end as  [Value]
				FROM #Final_Calc_Dataset C
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'') 
				inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.activity,'') = coalesce(pb.activity,'')
				where c.Activity = 'Drill' and pa.Attribute = 'Tonnes drilled' and pb.Attribute = 'Volume drilled' and c.Unit = 'tpa')
			-- drill inventory opening balance
	,DrillInventoryOpeningBal as		
			(select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], 'Drill Stock' as 'Equipment', c.Cost_Type, c.Product, 'Opening Balance'  as 'Attribute', c.Unit, c.[Cost?] 
				,c.Value+ pb.Value - (select sum(pa.Value))  as  [Value]--, c.Value ggsg, pb.value sdsfs, pa.value sdsa
				FROM #Final_Calc_Dataset C
				inner join #Final_Calc_Dataset pa on  coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') 
				inner join #Final_Calc_Dataset pb on  coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') 
				where c.Equipment = 'Drill Stock'  and pb.attribute='Tonnes blasted' and pa.attribute= 'Tonnes Drilled' and pa.Equipment like 'Drill Production%'
				group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.Unit, c.[Cost?],pa.Value, pb.Value, c.Value)
	,DisplacedVolume as 
			-- Displaced Volume
			(select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Displaced Volume'  as 'Attribute', c.Unit, c.[Cost?] 
				,case when c.value*pb.value = 0 then 0 else pa.[Value]/(c.[Value]*pb.[Value]) end as  [Value]
				FROM #Final_Calc_Dataset C
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'') 
				inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.activity,'') = coalesce(pb.activity,'')
				where pa.attribute='Volume drilled' and pb.attribute='Meters drilled per rig' and c.Attribute = 'Average no. of drills')
			-- cost explosive per kg
	,CostPerExplosive as		
			( select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost explosive per kg'  as 'Attribute', c.Unit, c.[Cost?] 
				,case when (pa.[Value]*pb.[Value]) = 0 then 0 else c.[Value]/(pa.[Value]*pb.[Value]) end as  [Value]
				--, c.value as llsk, pa.value sdjfm, pb.value sjjfs 
				FROM #Final_Calc_Dataset C
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'') 
				inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.activity,'') = coalesce(pb.activity,'')
				where pa.activity='Blast' and pa.attribute='Powder factor' and pb.attribute='Tonnes blasted' and c.cost_type = 'Consumables')
	,DieselPricePerLitreHaul as (
			-- Equipment Price per Litre, check values being imported - Haul
			select distinct  
			C.[Sheet], c.[Org_Group], C.Location, C.[function], 'Haul' as 'Activity', 'Operations' as 'Workstream', C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Diesel price per litre'  as 'Attribute', c.Unit, c.[Cost?]
					,case when (pa.[Value]=0 or pa.[Value] is NULL) then 1 else (c.[Value]/ pa.[Value]) end as  [Value]
					FROM #Final_Calc_Dataset c
					left join #Final_Calc_Dataset pa on pa.attribute='Litres consumed' and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'')
					where c.org_group = 'Mines' and  c.Cost_Type = 'Diesel' and c.Activity = 'Haul')
	,DieselPricePerLitreLoad as (
			-- Equipment Price per Litre, check values being imported - Load
			select distinct  
			C.[Sheet], c.[Org_Group], C.Location, C.[function], 'Load' as 'Activity', 'Operations' as 'Workstream', C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Diesel price per litre'  as 'Attribute', c.Unit, c.[Cost?]
					,case when (pa.[Value]=0 or pa.[Value] is NULL) then 1 else (c.[Value] / pa.[Value]) end as  [Value]
					FROM #Final_Calc_Dataset c
					left join #Final_Calc_Dataset pa on pa.attribute='Litres consumed' and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'')
					where c.org_group = 'Mines' and  c.Cost_Type = 'Diesel' and c.Activity = 'Load')
				-- Burn Rate, only applicable to load
	,BurnRateLitresGiven as (
			select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, 'Diesel' as Cost_Type, c.Product, 'Burn Rate'  as 'Attribute', c.Unit, c.[Cost?]					
					,case when pa.[Value] in ('0', NULL)  or pb.[Value] in ('0', NULL) 
					then c.[Value] else (c.[Value]/(pa.[Value]/pb.[Value])) end  as  [Value]
					FROM #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'')
					inner join #Final_Calc_Dataset pb on coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'')  and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.activity,'') = coalesce(pb.activity,'')
					where c.attribute='Litres consumed' and  pa.attribute='Total movement tonnes' and pb.attribute = 'Net rate' and c.Value <> 0)
	,BurnRateNoLitres as (
		select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, 'Diesel' as Cost_Type, c.Product, 'Burn Rate'  as 'Attribute', c.Unit, c.[Cost?]					
					,c.Value
					FROM #Final_Calc_Dataset c
					left join #Final_Calc_Dataset pa on pa.attribute = 'Litres consumed' and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'')
					where c.attribute='Variable cost' and c.cost_type='Diesel' and c.Activity in ('Load', 'Haul') and  (pa.attribute is null or pa.Value=0))
	,BurnRate as (
	  select * from BurnRateLitresGiven union all select * from BurnRateNoLitres)
	,RhTonnesperc as (
			-- rehandle tonnes %
			select distinct  c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RH tonnes %'  as 'Attribute', c.Unit, c.[Cost?]  
					,case when pa.[Value] in ('0', NULL)  
					then 0 else (c.[Value]/pa.[Value]) end  as  [Value]
					FROM #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'')
					where c.attribute='Rehandle movement' and  pa.attribute='Total movement tonnes'
			 )  

				 Select a.* into #MiningCostDrivers from (  
				select * from DrillDensity union all
				select * from DrillInventoryOpeningBal union all
				select * from DisplacedVolume union all
				select * from CostPerExplosive union all
				select * from DieselPricePerLitreHaul union all
				select * from DieselPricePerLitreLoad union all
				select * from BurnRate union all
				select * from RhTonnesperc ) a;

--select * from #MiningCostDrivers
-- Check drill stock sizes, if density is greater than a particular value
-- investigate cost per kg explosives
-- if the sum of drill stock is larger than x% of total tonnes then flag
insert into @results (severity, [message])
select 'warning', Location + ' cost explosive per kg calculated to be less than $0.01' from #MiningCostDrivers where Attribute='Cost explosive per kg' and Value < 0.01
;

with FleetsWithDieselBurnRate as (
select Location, Activity, Equipment_Type, Equipment from #Final_Calc_Dataset
where activity in ('Load', 'Haul') and Cost_Type='Diesel' and Attribute='Variable Cost' and (Value is null or Value <> 0)
)
insert into @results (severity, [message])
select 'warning', F.Location + ' ' + F.Equipment + ' diesel burn rate/price not calculated - check tonnes'
from FleetsWithDieselBurnRate F left join #MiningCostDrivers C on F.Location=C.Location and F.Activity=C.Activity
and F.Equipment_Type=C.Equipment_Type and F.Equipment=C.Equipment and C.Attribute = 'Diesel price per litre'
where (C.Value is null or C.Value = 0)
;
--Net rate calcs & Checks
-- OEE BackCalcs


with CalendarTime as (
			-- Calendar Time hours
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Calendar time'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value as Value
							from #Final_Calc_Dataset c
							where c.Attribute = 'Calendar time' )

	, CalenderTimeNotAggregate as (
				-- Calendar Time not aggregated
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Calendar time Not Aggregate'  as 'Attribute', c.Unit, c.[Cost?]
							, case when ca.Value = 0 then 0 else c.Value/ca.Value end as Value
							from CalendarTime c
							inner join #Final_Calc_Dataset ca on c.Activity = ca.Activity and c.Equipment = ca.Equipment
							where c.Attribute = 'Calendar time' and ca.Attribute = 'Average number of units'
									) 

	,StandbyTime as (
			-- Standby Time
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Standby time'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
			from #Final_Calc_Dataset c
			where c.Attribute = 'Standby time' )

	,ScheduledEquipDowntime as (
			-- scheduled equipment downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Scheduled equipment downtime raw'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value as Value
							from #Final_Calc_Dataset c
							where c.Attribute = 'Scheduled equipment downtime' )-- select * from ScheduledEquipDowntime

	,UnscheduledEquipDowntime as (
			-- unscheduled equipment downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Unscheduled equipment downtime raw'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
						from #Final_Calc_Dataset c
						where c.Attribute = 'Unscheduled equipment downtime' )

	,ScheduledProcessDowntime as (
			-- Scheduled Process Downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Scheduled process downtime raw'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
						from #Final_Calc_Dataset c
						where c.Attribute = 'Scheduled process downtime' )
--  Unscheduled process downtime excl. starve/block
	,UnscheduledProcessDowntime_exclsb as (
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Unscheduled process downtime excl. starve/block raw'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value as Value
							from #Final_Calc_Dataset c
							where c.Attribute in ('Unscheduled process downtime', 'Unscheduled process downtime excl. starve/block')) 
-- Starve Block time
	,Starve_Block as (
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Starved/blocked time raw'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value as Value
							from #Final_Calc_Dataset c
							where c.Attribute in ('Starved/blocked', 'Starved/blocked time')) --select * from Starve_Block
-- Production Time
	,ProductionTime as ( select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Production Time'  as 'Attribute', c.Unit, c.[Cost?]
									,ISNULL(c.Value,0) - (ISNULL(ca.Value,0) + ISNULL(cb.Value,0) + ISNULL(cc.Value,0) + ISNULL(cd.Value,0) +  ISNULL(ce.Value,0) + ISNULL(cf.Value,0))  as Value
									--,c.Value ss,ca.Value sdas,cb.Value dsad,cc.Value fsaa,cd.Value fsa ,ce.Value fssa ,cf.Value faa
						from #Final_Calc_Dataset c
						left join StandbyTime							ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
						left join ScheduledEquipDowntime				cb on coalesce(c.org_group ,'') = coalesce(cb.org_group ,'') and coalesce(c.location  ,'') = coalesce(cb.Location  ,'') and coalesce(c.[function],'') = coalesce(cb.[function],'')  and coalesce(c.equipment,'') = coalesce(cb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cb.equipment_type,'') and coalesce(c.activity,'') = coalesce(cb.activity,'') and coalesce(c.workstream,'') = coalesce(cb.workstream,'')
						left join UnscheduledEquipDowntime				cc on coalesce(c.org_group ,'') = coalesce(cc.org_group ,'') and coalesce(c.location  ,'') = coalesce(cc.Location  ,'') and coalesce(c.[function],'') = coalesce(cc.[function],'')  and coalesce(c.equipment,'') = coalesce(cc.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cc.equipment_type,'') and coalesce(c.activity,'') = coalesce(cc.activity,'') and coalesce(c.workstream,'') = coalesce(cc.workstream,'')
						left join ScheduledProcessDowntime				cd on coalesce(c.org_group ,'') = coalesce(cd.org_group ,'') and coalesce(c.location  ,'') = coalesce(cd.Location  ,'') and coalesce(c.[function],'') = coalesce(cd.[function],'')  and coalesce(c.equipment,'') = coalesce(cd.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cd.equipment_type,'') and coalesce(c.activity,'') = coalesce(cd.activity,'') and coalesce(c.workstream,'') = coalesce(cd.workstream,'')
						left join UnscheduledProcessDowntime_exclsb		ce on coalesce(c.org_group ,'') = coalesce(ce.org_group ,'') and coalesce(c.location  ,'') = coalesce(ce.Location  ,'') and coalesce(c.[function],'') = coalesce(ce.[function],'')  and coalesce(c.equipment,'') = coalesce(ce.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ce.equipment_type,'') and coalesce(c.activity,'') = coalesce(ce.activity,'') and coalesce(c.workstream,'') = coalesce(ce.workstream,'')
						left join Starve_Block							cf on coalesce(c.org_group ,'') = coalesce(cf.org_group ,'') and coalesce(c.location  ,'') = coalesce(cf.Location  ,'') and coalesce(c.[function],'') = coalesce(cf.[function],'')  and coalesce(c.equipment,'') = coalesce(cf.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cf.equipment_type,'') and coalesce(c.activity,'') = coalesce(cf.activity,'') and coalesce(c.workstream,'') = coalesce(cf.workstream,'')
						where c.Attribute = 'Calendar time') --select * from ProductionTime
--LeverCalculation 
	,UnscheduledEquipDowntimeBc as (
			-- unscheduled equipment downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Unscheduled equipment downtime'  as 'Attribute','%' as 'Unit', c.[Cost?]
						, case when (c.Value + ca.Value) = 0 then 0 else c.Value / (c.Value + ca.Value) end as Value
						from #Final_Calc_Dataset c
						inner join ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
						where c.Attribute = 'Unscheduled equipment downtime' )  

	,ScheduledProcessDowntimeBc as (
			-- Scheduled Process Downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Scheduled process downtime'  as 'Attribute','%' as 'Unit', c.[Cost?]
						, case when (c.Value + ca.Value) = 0 then 0 else c.Value / (c.Value + ca.Value) end as Value
						from #Final_Calc_Dataset c
						inner join ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
						where c.Attribute = 'Scheduled process downtime' ) --select * from ScheduledProcessDowntimeBc

--  Unscheduled process downtime excl. starve/block
	,UnscheduledProcessDowntime_exclsbBc as (
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Unscheduled process downtime excl. starve/block'  as 'Attribute', '%' as 'Unit', c.[Cost?]
						, case when (c.Value + ca.Value) = 0 then 0 else c.Value / (c.Value + ca.Value) end as Value
						from #Final_Calc_Dataset c
						inner join ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
						where c.Attribute = 'Unscheduled process downtime excl. starve/block') --select * from UnscheduledProcessDowntime_exclsbBc
	,CalculatedNetRate as ( 
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Calculated Net Rate'  as 'Attribute', 't/hr' as 'Unit', c.[Cost?]
					, case when ca.Value = 0 then 0 else c.value / ca.Value end as Value
					from #Final_Calc_Dataset c
					inner join ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
					where c.Attribute = 'Total movement tonnes')
				
				
			select a.* into #ProductionTime from (
				select * from UnscheduledEquipDowntimeBc			union all
				select * from CalendarTime							union all
				select * from StandbyTime							union all
				select * from ScheduledEquipDowntime				union all
				select * from UnscheduledEquipDowntime				union all
				select * from ScheduledProcessDowntime				union all
				select * from UnscheduledProcessDowntime_exclsb		union all
				select * from ScheduledProcessDowntimeBc			union all
				select * from UnscheduledProcessDowntime_exclsbBc	union all
				select * from CalenderTimeNotAggregate				union all
				select * from CalculatedNetRate						union all
				select * from ProductionTime
				) a;

-- if a mismatch here - investigate
--Select count(*) from #Final_Calc_Dataset  where attribute not in ('Fixed Cost', 'Variable Cost') and attribute = 'Calendar Time';
--Select * from #ProductionTime where Attribute = 'Calendar Time';
-- check if calendar time is greater than a particular value
--select * from #ProductionTime;

insert into @results (severity, [message])
select 'error', Location + ' ' + Equipment + ' production time less than zero'
from #ProductionTime where Attribute='Production Time' and Value < 0

--- Checks to ensure net rate matches total movement 
-- Check this again - You need the raw net rate to check otherwise it makes no sense!!
insert into @results (severity, [message])
select case when V.variance > 0.2 then 'error' else 'warning' end,
  V.Location + ' ' + V.Equipment + ' variance between total movement and net rate x production time is ' + cast(cast(V.variance*100 as int) as nvarchar) + '%'
from (select a.Location, a.Activity, a.Equipment_Type, a.Equipment, a.Value as 'TM', b.value as 'NR', c.Value as 'PT',
  case
    when a.Value=b.Value*c.Value*d.Value then 0
	when a.Value <> b.Value*c.Value*d.Value and (a.Value = 0 or b.Value*c.Value*d.Value=0) then 1
	else (b.Value*c.Value*d.Value)/ a.Value - 1
  end as variance
  from #Final_Calc_Dataset a
  	inner join #Final_Calc_Dataset b on a.Location=b.Location and a.Activity=b.Activity and a.Equipment_Type=b.Equipment_Type and a.Equipment = b.Equipment
  	inner join #ProductionTime c on a.Location=c.Location and a.Activity=c.Activity and a.Equipment_Type=c.Equipment_Type and a.Equipment = c.Equipment
  	inner join #Final_Calc_Dataset d on a.Location=b.Location and a.Activity=d.Activity and a.Equipment_Type=d.Equipment_Type and a.Equipment = d.Equipment
  	where a.Attribute = 'Total movement tonnes' and b.Attribute = 'Net Rate' and c.Attribute = 'Production Time' and d.Attribute='Average number of units') V
  where V.variance > 0.05
  	;

-- Back-calculate RH rate, using either (a) given value, (b) RH tonnes / RH hours, or (c) assuming the same net rate as PM
with LoadHaul_RH_rate_given as (
  Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RH rate'  as 'Attribute', c.Unit, c.[Cost?]
    , c.Value
  from #Final_Calc_Dataset c where C.Activity in ('Load', 'Haul') and c.Attribute='RH rate')

, LoadHaul_RH_rate_ratio as (
  Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RH rate'  as 'Attribute', c.Unit, c.[Cost?]
    , case when pa.Value = 0 then 0 else c.Value / pa.Value end as Value
  from #Final_Calc_Dataset c
  inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
  where C.Activity in ('Load', 'Haul') and c.Attribute='Rehandle movement'
    and pa.Activity in ('Load', 'Haul') and pa.Attribute='Rehandle hours')

, LoadHaul_RH_rate_consol as (
  Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RH rate'  as 'Attribute', c.Unit, c.[Cost?]
    , coalesce(pa.Value, pb.Value, c.Value) as Value
  from #Final_Calc_Dataset c
  left join LoadHaul_RH_rate_given pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
  left join LoadHaul_RH_rate_ratio pb on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
  where C.Activity in ('Load', 'Haul') and c.Attribute='Net rate'
    and (pa.Value is null or pa.Activity in ('Load', 'Haul') and pa.Attribute='RH rate')
    and (pb.Value is null or pb.Activity in ('Load', 'Haul') and pa.Attribute='RH rate'))

select * into #LoadHaulRHRate from LoadHaul_RH_rate_consol;

--select * from #LoadHaulRHRate

-- Load adjustments
with TotalProductiveMovementLoad as ( 
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total Productive Movement'  as 'Attribute', c.Unit, c.[Cost?] 
				, sum(distinct c.value) - sum( distinct pa.value) as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Attribute = 'Total Movement tonnes' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Load'
					group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] 
					 ) --select * from TotalProductiveMovementLoad
					 --done
	
	,TotalRehandleMovementLoad as ( 
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total Rehandle Movement'  as 'Attribute', c.Unit, c.[Cost?]
					,  sum(distinct c.value)  as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where  c.Activity = 'Load'  and c.Attribute = 'Rehandle movement' 
					group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] 
					) --select * from TotalRehandleMovementLoad
					--done
	
	,ReportProductiveMovement as (
						Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, 'Report Productive Movement'  as 'Attribute', c.Unit, c.[Cost?]
								,   sum(distinct c.value)  as Value
				from #Final_Calc_Dataset c 
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
				where  c.Attribute = 'Productive movement' and c.Activity is null
				group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, c.Unit, c.[Cost?] ) --select * from ReportProductiveMovement
				--done	
	,ReportRehandleMovement as (
				select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, 'Report Rehandle Movement'  as 'Attribute', c.Unit, c.[Cost?]
								, c.value - pa.value as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where  c.Attribute = 'Total Movement' and pa.Attribute = 'Productive movement'
					)-- select * from ReportRehandleMovement 
					-- done
	
	,RateAdjLoad as (
				Select C.[Sheet], c.[Org_Group], C.Location, 'Adjusted Rate factor' as Attribute
					,case when sum(c.Value) = 0 then 0 else sum(distinct pa.value)/sum (distinct c.Value) end as Value
					--,c.Value sfsf, pa.Value sfffss
					from TotalProductiveMovementLoad c, ReportProductiveMovement pa 
					where c.Location = pa.Location
					group by  C.Location, c.Sheet, c.Org_Group
					)-- select * from RateAdjLoad  
					--done
	
	,RHTonnespercLoad as (
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Tonnes Movement Ratio'  as 'Attribute', c.Unit, c.[Cost?]
					, case when c.Value = 0 then 0 else pa.Value / c.Value end as Value--, pa.Value ssdsd, c.Value gddga
					from  #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'Total movement tonnes' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Load'
					
					) --select * from RHTonnespercLoad

	,RHhoursLoad as (
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Hours'  as 'Attribute', c.Unit, c.[Cost?]
					, case when c.Value = 0 then 0 else pa.Value / c.Value end as Value
					from  #LoadHaulRHRate c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'RH rate' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Load'
				) --select * from RHhoursLoad

	,ProductionHrs as ( -- Total Operating time
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Production Time'  as 'Attribute', c.Unit, c.[Cost?]
					, case when pa.Value = 0 then 0 else (c.Value) / (pa.Value) end as Value
					from  #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
				--	inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pb.cost_type,'') and coalesce(c.workstream,'') = coalesce(pb.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'Total movement tonnes' and pa.Attribute = 'Net rate' --and c.Activity = 'Load' and pb.Attribute = 'Average number of units' and pb.Activity = 'Load'
						) --select * from ProductionHrs

	,PMRateLoad as ( 
				select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'PM rate'  as 'Attribute', c.Unit, c.[Cost?]
					, case when pa.Value - pb.Value = 0 then 0 else c.Value/(pa.Value - pb.Value) end as Value
					from TotalProductiveMovementLoad c
					inner join ProductionHrs pa  on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					inner join RHhoursLoad pb on		coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pb.cost_type,'') and coalesce(c.workstream,'') = coalesce(pb.workstream,'')
					where c.Attribute = 'Total Productive Movement' and pa.Attribute = 'Production Time' and pb.Attribute = 'Rehandle Hours')
					--select * from PMRateLoad
					-- Done
	,RHRateLoad as (Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Rate %'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
					from #LoadHaulRHRate c
					where c.Activity = 'Load' and c.Attribute = 'RH rate')  --select * from RHRateLoad
  
	-- backcalcs starting
	,PMRateAdj_LoadBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted PM rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from PMRateLoad c, RateAdjLoad b 
							where c.Location = b.Location and b.Org_Group = c.Org_Group )  -- select * from PMRateAdj_LoadBc
	
	,RHRateAdj_LoadBc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted RH rate'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*b.Value as Value
								from RHRateLoad c, RateAdjLoad b
								where c.Location = b.Location)  --select * from RHRateAdj_LoadBc
	
	,ProductiveTonnes_LoadBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Productive Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*(b.Value -d.Value) as Value
									from PMRateAdj_LoadBc c
									inner join ProductionHrs b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
									inner join RHhoursLoad d on coalesce(c.Activity, '') = coalesce(d.Activity,'') and coalesce(c.org_group ,'') = coalesce(d.org_group ,'') and coalesce(c.location  ,'') = coalesce(d.Location  ,'') and coalesce(c.[function],'') = coalesce(d.[function],'') and coalesce(c.equipment,'') = coalesce(d.equipment,'') and coalesce(c.equipment_type,'') = coalesce(d.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(d.cost_type,'') and coalesce(c.workstream,'') = coalesce(d.workstream,'')
									where c.Location = b.Location and b.Attribute = 'Production Time' and c.Attribute = 'Adjusted PM rate' and d.Attribute = 'Rehandle Hours') --select * from ProductiveTonnes_LoadBc
	
	,RehandleTonnes_LoadBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Rehandle Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
									, c.Value*b.Value as Value
									from RHRateAdj_LoadBc c
									inner join RHhoursLoad b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
									where c.location = b.location) --select * from RehandleTonnes_LoadBc
	
	,TotalRHTonnes_LoadBc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Total RH Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*b.Value as Value
								from RHRateAdj_LoadBc c
								inner join RHhoursLoad b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
								) --select * from TotalRHTonnes_LoadBc
	, TotalRHPerMineLoad as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, NULL as [Equipment_type], 'NULL' As equipment, c.Cost_Type, c.Product, 'Adjusted Total RH Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, sum(c.Value*b.Value) as Value
								from RHRateAdj_LoadBc c
								inner join RHhoursLoad b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
								group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, c.Unit, c.[Cost?]
								
								) -- select * from TotalRHPerMine

	,TargetTonnes_Bc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Target Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value + b.Value as Value
							from ProductiveTonnes_LoadBc c
							inner join RehandleTonnes_LoadBc b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
							where c.Location = b.Location)  --select * from TargetTonnes_Bc
	

	/*Additional rates to be added to both load & haul*/

	,Load_AdjDesignRate as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Design Rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjLoad b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Design Rate' and c.Activity = 'Load') --select * from Load_AdjDesignRate

	,Load_AdjNetRate as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Net Rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjLoad b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Net Rate' and c.Activity = 'Load') --select * from Load_AdjDesignRate

	,Adj_TM as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total movement tonnes'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjLoad b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Total Movement tonnes' and c.Activity = 'Load') --select * from Adj_TM where Location = 'Whaleback'

	,Adj_RM as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle movement'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjLoad b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Rehandle movement' and c.Activity = 'Load') --select * from Adj_RM

	,Adj_RR as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RH rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #LoadHaulRHRate c
							inner join RateAdjLoad b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'RH rate' and c.Activity = 'Load') --select * from Adj_RM

	,Rehandle_Other as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], b.Activity, 'Operations' as Workstream, NULL as equipment_type, NULL as equipment, NULL as Cost_Type, NULL as Product, 'Rehandle Other'  as 'Attribute', c.Unit, c.[Cost?] 
							,c.Value - b.Value as Value
							from  (select sum(value) as value, Activity, Location as Location from Adj_RM where activity = 'Load' group by Location, activity ) b
							inner join ReportRehandleMovement c on coalesce(c.location  ,'') = coalesce(b.Location  ,'') 
							where c.Location = b.Location 
					)  --select * from Rehandle_Other


			select a.* into #LoadAdjustments from (
			select * from Load_AdjDesignRate union all
			select * from Load_AdjNetRate union all
			select * from Adj_TM union all
			select * from Adj_RM union all
			select * from Adj_RR union all
			select * from Rehandle_Other) a;

-- Mismatch - Investigate
--Select count(distinct Equipment)*5 from #Final_Calc_Dataset where activity = 'Load' and attribute not in ('Fixed Cost', 'Variable Cost')
-- ensure that the total productive movement has values
--Select * from #LoadAdjustments where equipment = 'WB LBHR 996 EXC'

-- Haul adjustments
with TotalProductiveMovementHaul as ( 
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total Productive Movement'  as 'Attribute', c.Unit, c.[Cost?] 
				, sum(distinct c.value) - sum( distinct pa.value) as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Attribute = 'Total Movement tonnes' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Haul'
					group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] 
					 ) --select * from TotalProductiveMovementHaul
					 --done
	
	,TotalRehandleMovementHaul as ( 
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total Rehandle Movement'  as 'Attribute', c.Unit, c.[Cost?]
					,  sum(distinct c.value)  as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where  c.Activity = 'Haul'  and c.Attribute = 'Rehandle movement' 
					group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] 
					) --select * from TotalRehandleMovementHaul
					--done
	
	,ReportProductiveMovement as (
						Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, 'Report Productive Movement'  as 'Attribute', c.Unit, c.[Cost?]
								,   sum(distinct c.value)  as Value
				from #Final_Calc_Dataset c 
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
				where  c.Attribute = 'Productive movement' and c.Activity is null
				group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, c.Unit, c.[Cost?] ) --select * from ReportProductiveMovement
				--done	
	,ReportRehandleMovement as (
				select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, 'Report Rehandle Movement'  as 'Attribute', c.Unit, c.[Cost?]
								, c.value - pa.value as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where  c.Attribute = 'Total Movement' and pa.Attribute = 'Productive movement'
					)-- select * from ReportRehandleMovement 
					-- done
	
	,RateAdjHaul as (
				Select C.[Sheet], c.[Org_Group], C.Location, 'Adjusted Productive Movement Rate factor' as Attribute
					,case when sum(c.Value) = 0 then 0 else sum(distinct pa.value)/sum (distinct c.Value) end as Value
					--,c.Value sfsf, pa.Value sfffss
					from TotalProductiveMovementHaul c, ReportProductiveMovement pa 
					where c.Location = pa.Location
					group by  C.Location, c.Sheet, c.Org_Group
					) --select * from RateAdjPMHaul  
					--done
	
	,RHTonnespercHaul as (
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Tonnes Movement Ratio'  as 'Attribute', c.Unit, c.[Cost?]
					, case when c.Value = 0 then 0 else pa.Value / c.Value end as Value--, pa.Value ssdsd, c.Value gddga
					from  #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'Total movement tonnes' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Haul'
					
					) --select * from RHTonnespercHaul

	,RHhoursHaul as (
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Hours'  as 'Attribute', c.Unit, c.[Cost?]
					, case when c.Value = 0 then 0 else pa.Value / c.Value end as Value
					from  #LoadHaulRHRate c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'RH rate' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Haul'
				) --select * from RHhoursHaul

	,ProductionHrs as ( -- Total Operating time
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Production Time'  as 'Attribute', c.Unit, c.[Cost?]
					, case when pa.Value = 0 then 0 else (c.Value) / (pa.Value) end as Value
					from  #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
				--	inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pb.cost_type,'') and coalesce(c.workstream,'') = coalesce(pb.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'Total movement tonnes' and pa.Attribute = 'Net rate' --and c.Activity = 'Haul' and pb.Attribute = 'Average number of units' and pb.Activity = 'Haul'
						) --select * from ProductionHrs

	,PMRateHaul as ( 
				select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'PM rate'  as 'Attribute', c.Unit, c.[Cost?]
					, case when pa.Value - pb.Value = 0 then 0 else c.Value/(pa.Value - pb.Value) end as Value
					from TotalProductiveMovementHaul c
					inner join ProductionHrs pa  on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					inner join RHhoursHaul pb on		coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pb.cost_type,'') and coalesce(c.workstream,'') = coalesce(pb.workstream,'')
					where c.Attribute = 'Total Productive Movement' and pa.Attribute = 'Production Time' and pb.Attribute = 'Rehandle Hours')
					--select * from PMRateHaul
					-- Done
	,RHRateHaul as (Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Rate %'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
					from #LoadHaulRHRate c
					where c.Activity = 'Haul' and c.Attribute = 'RH rate')  --select * from RHRateHaul
  
	-- backcalcs starting
	,PMRateAdj_HaulBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted PM rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from PMRateHaul c, RateAdjHaul b 
							where c.Location = b.Location and b.Org_Group = c.Org_Group )  -- select * from PMRateAdj_HaulBc
	
	,RHRateAdj_HaulBc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted RH rate'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*b.Value as Value
								from RHRateHaul c, RateAdjHaul b
								where c.Location = b.Location)  --select * from RHRateAdj_HaulBc
	
	,ProductiveTonnes_HaulBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Productive Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*(b.Value -d.Value) as Value
									from PMRateAdj_HaulBc c
									inner join ProductionHrs b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
									inner join RHhoursHaul d on coalesce(c.Activity, '') = coalesce(d.Activity,'') and coalesce(c.org_group ,'') = coalesce(d.org_group ,'') and coalesce(c.location  ,'') = coalesce(d.Location  ,'') and coalesce(c.[function],'') = coalesce(d.[function],'') and coalesce(c.equipment,'') = coalesce(d.equipment,'') and coalesce(c.equipment_type,'') = coalesce(d.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(d.cost_type,'') and coalesce(c.workstream,'') = coalesce(d.workstream,'')
									where c.Location = b.Location and b.Attribute = 'Production Time' and c.Attribute = 'Adjusted PM rate' and d.Attribute = 'Rehandle Hours') --select * from ProductiveTonnes_HaulBc
	
	,RehandleTonnes_HaulBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Rehandle Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
									, c.Value*b.Value as Value
									from RHRateAdj_HaulBc c
									inner join RHhoursHaul b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
									where c.location = b.location) --select * from RehandleTonnes_HaulBc
	
	,TotalRHTonnes_HaulBc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Total RH Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*b.Value as Value
								from RHRateAdj_HaulBc c
								inner join RHhoursHaul b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
								) --select * from TotalRHTonnes_HaulBc
	, TotalRHPerMineHaul as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, NULL as [Equipment_type], 'NULL' As equipment, c.Cost_Type, c.Product, 'Adjusted Total RH Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, sum(c.Value*b.Value) as Value
								from RHRateAdj_HaulBc c
								inner join RHhoursHaul b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
								group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, c.Unit, c.[Cost?]
								
								) -- select * from TotalRHPerMine

	,TargetTonnes_Bc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Target Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value + b.Value as Value
							from ProductiveTonnes_HaulBc c
							inner join RehandleTonnes_HaulBc b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
							where c.Location = b.Location)  --select * from TargetTonnes_Bc
	
	
	/*Additional rates to be added to both load & haul*/
	,Haul_AdjDesignRate as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type , c.Product , 'Design Rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjHaul b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Design Rate' and c.Activity = 'Haul') --select * from Haul_AdjDesignRate

	,Haul_AdjNetRate as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type , c.Product , 'Net Rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjHaul b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Net Rate' and c.Activity = 'Haul') --select * from Haul_AdjDesignRate

	,Adj_TM as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total movement tonnes'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjHaul b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Total Movement tonnes' and c.Activity = 'Haul') --select * from Adj_TM where Location = 'Whaleback'

	,Adj_RM as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product , 'Rehandle movement'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjHaul b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Rehandle movement' and c.Activity = 'Haul') --select * from Adj_RM

	,Adj_RR as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product , 'RH rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #LoadHaulRHRate c
							inner join RateAdjHaul b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'RH rate' and c.Activity = 'Haul') --select * from Adj_RM

	,Rehandle_Other as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], b.Activity, 'Operations' as Workstream, NULL as equipment_type, NULL as equipment, NULL as Cost_Type, NULL as Product, 'Rehandle Other'  as 'Attribute', c.Unit, c.[Cost?] 
							,c.Value - b.Value as Value
							from  (select sum(value) as value, Activity, Location as Location from Adj_RM where activity = 'Haul' group by Location, activity ) b
							inner join ReportRehandleMovement c on coalesce(c.location  ,'') = coalesce(b.Location  ,'') 
							where c.Location = b.Location 
					)  --select * from Rehandle_Other


			select a.* into #HaulAdjustments from (
			select * from Haul_AdjDesignRate	union all
			select * from Haul_AdjNetRate union all
			select * from Adj_TM union all
			select * from Adj_RM union all
			select * from Adj_RR union all
			select * from Rehandle_Other) a;

-- Patch the data set with the load/haul calcs
delete from #Final_Calc_Dataset where Activity in ('Load', 'Haul') and Attribute in ('Design rate', 'Net rate', 'Total movement', 'Total movement tonnes', 'Rehandle movement', 'RH rate', 'Rehandle hours')
insert into #Final_Calc_Dataset select * from #LoadAdjustments
insert into #Final_Calc_Dataset select * from #HaulAdjustments

-- Mismatch - Investigate
--Select count(distinct Equipment)*5 from #Final_Calc_Dataset where activity = 'Haul' and attribute not in ('Fixed Cost', 'Variable Cost')
--Select * from #HaulAdjustments			

insert into @results (severity, [message])
select 'error', Location + ' ' + Equipment + ' calculated target tonnes < 0'
from #HaulAdjustments where Attribute='Target Tonnes' and Value < 0
;

-- Calculate mining stockpile opening balances from closing balances
with ClosingBalance as (
select * from #Final_Calc_Dataset where [Function]='Mining' and Attribute='Closing balance')

, MiningActivity as (
select Location, coalesce(Activity, 'LoadHaul') as Activity, sum(Value) as Value from #Final_Calc_Dataset
where Activity in ('Drill', 'Blast') and Attribute in ('Tonnes Drilled', 'Tonnes Blasted') or [Function]='Mining' and Activity is null and Attribute='Productive Movement'
group by Location, Activity)

, OpeningBalances as (
select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, 'Stockpile' as Equipment_type, C.equipment, C.Cost_Type, C.Product, 'Opening balance' as 'Attribute', c.Unit, c.[Cost?]
  , case when C.Value - I.Value + O.Value < 0 then 0 else C.Value - I.Value + O.Value end as Value
from ClosingBalance C
inner join MiningActivity I on C.Location=I.Location
inner join MiningActivity O on C.Location=O.Location
where (C.Equipment='Drill stock' and I.Activity = 'Drill' and O.Activity='Blast')
  or (C.Equipment='Blast inventory' and I.Activity = 'Blast' and O.Activity='LoadHaul')
)

insert into #Final_Calc_Dataset select * from OpeningBalances;

-- Processing stocks are a little harder because of the hub model

with ClosingBalance as (
select * from #Final_Calc_Dataset where [Function]='Processing' and Attribute='Closing balance')

, LumpFines as (
select A.Location, A.Value * B.Value as Fines, A.Value * (1 - B.Value) as Lump from #Final_Calc_Dataset A, #Final_Calc_Dataset B
where A.Equipment='Bene Plant' and A.Attribute in ('Throughput', 'Target tonnes')
  and A.Equipment='Bene Plant' and B.Attribute='Bypass ratio')

, Throughput as (
select Location, [Function], [Activity], [Equipment], [Value]
from  #Final_Calc_Dataset
where Attribute in ('Throughput', 'Target tonnes') and [Function]='Processing' and Equipment <> 'Bene Plant'
union all
select H.Location, H.[Function], H.[Activity], H.[Equipment], H.[Value] / (1 + S.[Value])
from  #Final_Calc_Dataset H
inner join #Final_Calc_Dataset S on H.Location=S.Location
where H.[Function]='Mining' and H.Attribute='Productive Movement' and H.Activity is null
  and S.[Function]='Mining' and S.Attribute='Stripping Ratio'
union all
select Location, 'Processing' as [Function], 'Beneficiation' as [Activity], 'Bene Plant Lump' as Equipment, Lump as value from LumpFines
union all
select Location, 'Processing' as [Function], 'Beneficiation' as [Activity], 'Bene Plant Fines' as Equipment, Fines as value from LumpFines
)

, Routing as (
select Location,
  case
    when [Location]='Whaleback' and Equipment in ('CR2', 'Crusher 9', 'OHP 5') then 'Pre-Crushing Stockpile'
	when [Location]='Whaleback' and Equipment='OHP 4' then 'OFH Stockpile'
	when [Location]='Whaleback' and Equipment='Car Dumper' then null -- 'Orebody'
	when [Equipment] in ('OB24 TLO', 'OB18 TLO') then 'OFH Stockpile'
	when Activity='TLO' then 'OFR Stockpile'
	when Activity in ('OFR', 'OFH') then 'Pre-Crushing Stockpile'
	else null
  end as [Source],
  case
    when [Function]='Mining' then 'Pre-Crushing Stockpile'
	when Location='Whaleback' and Equipment in ('CR2', 'Car Dumper', 'Bene Plant Lump') then 'OFH Stockpile'
	when Location='Whaleback' and Equipment in ('Crusher 9', 'OHP 5', 'OHP 4', 'Bene Plant Fines') then 'OFR Stockpile'
	--when Activity='TLO' and Equipment in ('OB18 TLO', 'OB24 TLO') then 'Orebody'
	when Activity='OFH' then 'OFH Stockpile'
	when Activity='OFR' then 'OFR Stockpile'
  end as Destination, Activity, Equipment
, Value
from Throughput
)

, Outflow as (
select Location, [Source], sum(Value) as Outflow
from Routing group by Location, [Source]
)

, Inflow as (
select Location, [Destination], sum(Value) as Inflow
from Routing group by Location, [Destination]
)

, OpeningBalances as (
select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.Equipment_type, C.equipment, C.Cost_Type, C.Product, 'Opening balance' as 'Attribute', c.Unit, c.[Cost?]
 , C.Value + coalesce(O.Outflow, 0) - coalesce(I.Inflow, 0) as Value
from ClosingBalance C
left join Inflow I on C.Location=I.Location and C.Equipment=I.[Destination]
left join Outflow O on C.Location=O.Location and C.Equipment=O.[Source]
)

insert into #Final_Calc_Dataset select * from OpeningBalances;

-------------------######################################################################################################################-----------------------	
-------------------######################################################################################################################-----------------------
-------------------######################################################################################################################-----------------------
--------------------------------------------------Rail----------------------------------------------------------------------------------------------------------

declare @daysinyear int;

select @daysinyear=Value from #Final_Calc_Dataset where Attribute='Days in year';
if @daysinyear is null set @daysinyear=365;

--Re rail recon calculations
With RailInvTransit as (select distinct  NULL as [Sheet], NULL as [Org_Group], null as Location, null as [function], null as Activity, null as Workstream, null as [Equipment_type], null as equipment, null as Cost_Type, null as Product, 'Rail inventory transit' as Attribute, null as  Unit, null as [Cost?]
							 , sum(distinct b.value) - sum(distinct a.Value) as Value
							from #Final_Calc_Dataset a , #Final_Calc_Dataset b
						where a.Activity = 'TLO' and a.Attribute = 'Target tonnes' and a.equipment not in ('OB24 TLO','OB18 TLO')
						and b.Org_Group = 'Port' and b.Activity = 'Inflow' and b.Attribute = 'Target Tonnes') --select * from RailInvTransit

	,CurrentActiveRakes as (
					select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] , c.Value as Value
						from #Final_Calc_Dataset c
						where c.[Function] = 'Mainline' and c.Attribute = 'Active Rakes')

	, TotalOOR as (
					select C.[Sheet], c.[Org_Group], NULL as Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Total OOR' as Attribute, c.Unit, c.[Cost?] 
							, sum(c.Value) as Value
						from #Final_Calc_Dataset c
						where c.Activity = 'TLO' and c.Attribute = 'Target Tonnes' and c.Equipment not in ('OB24 TLO','OB18 TLO')
						group by C.[Sheet], c.[Org_Group],  C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] ) --select * from TotalOOR

	--Throughput will be 'target tonnes'
	, OORbyLocation as (
					select C.[Sheet], c.[Org_Group], c.Location as Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] 
							, sum(c.Value) as Value
						from #Final_Calc_Dataset c
						where c.Activity = 'TLO' and c.Attribute = 'Target Tonnes' and c.Equipment not in ('OB24 TLO','OB18 TLO')
						group by C.[Sheet],c.Location, c.[Org_Group],  C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] ) --select * from OORbyLocation
	, MaximumTonnes as (
					select C.[Sheet], c.[Org_Group], c.Location as Location, NULL as [function], NULL as Activity, NULL as Workstream, NULL as [Equipment_type], NULL as Equipment, NULL as Cost_Type, null as Product, 'Maximum tonnes constraint' as Attribute, c.Unit, c.[Cost?] 
							, 100000000 as Value
						from #Final_Calc_Dataset c
						where c.Activity = 'TLO' and c.Attribute = 'Target Tonnes' and c.Equipment not in ('OB24 TLO','OB18 TLO')
						 ) 
						--select * from MaximumTonnes

	, OORbyLocationAndEquip as (
				select C.[Sheet], c.[Org_Group], c.Location as Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment, c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] 
						, sum(c.Value) as Value
					from #Final_Calc_Dataset c
					where c.Activity = 'TLO' and c.Attribute = 'Target Tonnes' and c.Equipment not in ('OB24 TLO','OB18 TLO')
					group by C.[Sheet],c.Location, c.[Org_Group],  C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?], c.Equipment ) --select * from OORbyLocationAndEquip

	, TimeAtMine as (
					select C.[Sheet], c.[Org_Group], c.Location, 'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], c.Equipment, c.Cost_Type, c.Product, 'Time at mine' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
					,sum(c.value) as Value 
						from #Final_Calc_Dataset c
						where c.Attribute = 'queue to load' or c.Attribute = 'Pre Load' or c.Attribute = 'Train Load' or c.Attribute = 'Post Load'
								or c.Attribute = 'mine to mine queue' or c.Attribute = 'mine 1 pre load' or c.Attribute = 'mine 1 train load'
								or c.Attribute = 'mine 1 to mine 2' or c.Attribute = 'mine 2 train load' or c.Attribute = 'mine 2 post load'
						group by C.[Sheet], c.Location, c.[Org_Group], C.Activity, C.Workstream, C.[Equipment_type],c.Equipment, c.Cost_Type, c.Product, c.[Cost?] )

	, TotalPortInflow as (
					select C.[Sheet], c.[Org_Group], c.Location, 'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Port Ore' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
							, sum(c.value) as Value 
					from #Final_Calc_Dataset c
						where c.Org_Group = 'Port' and c.Activity = 'Inflow' and c.Attribute = 'Target Tonnes'
						group by C.[Sheet], c.[Org_Group], c.Location,  C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?] 
						)

	, NoOfOreCars as (
						select C.[Sheet], c.[Org_Group], c.Location, 'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'No. of Ore Cars' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
						, c.Value as Value
							from #Final_Calc_Dataset c
							where c.org_group = 'Rail' and c.attribute in ('No of ore cars', 'No. of ore cars') and c.[function] = 'mainline'
						) 

	, OreCarTonnage as (
						select C.[Sheet], c.[Org_Group], c.Location,'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Ore car tonnage' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
						, c.Value as Value
							from #Final_Calc_Dataset c
							where c.org_group = 'Rail' and c.attribute in ('Ore car tonnage') and c.[function] = 'mainline'
						) 

	, RakeTonnes as (
						select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Rake tonnes' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
						, c.Value*ca.Value as Value
							from OreCarTonnage c
							inner join NoOfOreCars ca on coalesce(c.Activity, '') = coalesce(ca.Activity,'') and coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.[function]  ,'') = coalesce(ca.[function]  ,'') 
								
						) 

	, DepPerDay as ( --match the max departures per day to this
						select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Departures per Day' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
						, case when ca.Value = 0 then 0 else c.Value/ca.Value/@daysinyear end as Value
							from OORbyLocation c
							inner join RakeTonnes ca on coalesce(c.Location, '') = coalesce(ca.Location,'') 
								
						) --select * from DepPerDay

	, ToFromJunction as (select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'To/From Junction' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								, sum(c.Value) as Value
								from #Final_Calc_Dataset c
									where c.org_group = 'Rail' and  c.attribute = 'Junction to mine queue' or c.attribute = 'Mine queue to junction'
								group by C.[Sheet], c.[Org_Group], c.Location, C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?], c.[Function] ) 

	, CarDumperWeight as (	
						select  C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'CD Weight' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								,case when sum(b.Value) = 0 then 0 else sum(c.Value)/sum(b.Value) end as Value
								from #Final_Calc_Dataset c, (select sum(value) as Value from #Final_Calc_Dataset  where Equipment in ('CD1', 'CD2','CD3','CD4','CD5') and Attribute = 'Target Tonnes') b
									where c.org_group = 'Port' and c.Equipment in ('CD1', 'CD2','CD3','CD4','CD5') and c.Attribute = 'Target Tonnes'
								group by C.[Sheet], c.[Org_Group], c.Location, C.Activity, C.Workstream, C.[Equipment_type], c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.[Function] )
								--select * from CarDumperWeight
									
	, CarDumperCycle as (
						select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'CD Cycle' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								, sum(c.Value) as Value
								from #Final_Calc_Dataset c
									where  c.Attribute in ('Queue to Dump', 'Dump')
								group by C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.[Cost?] 
							) --select * from CarDumperCycle

	, CDCycleContribution as (
						select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'CD Cycle Contribution' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								, sum(c.Value)*sum(ca.Value) as Value
								from CarDumperCycle c
								inner join CarDumperWeight ca on coalesce(c.equipment, '') =  coalesce(ca.equipment, '')
								group by C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.[Cost?] 
							) --select * from CycleContribution

	, NelsonFuncicaneWeight as (
						select C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment , c.Cost_Type, c.Product, 'NF Weight' as 'Attribute', '%' as 'unit', c.[Cost?] 
								,sum(c.Value) as Value 
								from
								(
										select  a.[Sheet], a.[Org_Group], a.[Function], a.Activity, a.Workstream, a.[Equipment_type], a.Equipment , a.Cost_Type, a.Product, a.[Cost?]
											,case when a.Equipment in ('CD1','CD2', 'CD3') then 'Nelson Point' else 'Finucane Island' end as Location, 'CD Weight' as Reference
											,case when sum(b.Value) = 0 then 0 else  sum(a.Value)/sum(b.Value) end as Value
											from #Final_Calc_Dataset a, (select sum(value) as Value from #Final_Calc_Dataset  where Equipment in ('CD1', 'CD2','CD3','CD4','CD5') and Attribute = 'Target Tonnes') b
											where a.org_group = 'Port' and  a.Equipment in ('CD1', 'CD2','CD3','CD4','CD5') and a.Attribute = 'Target Tonnes'
											group by a.Equipment, a.[Sheet], a.[Org_Group], a.Location, a.[Function], a.Activity, a.Workstream, a.[Equipment_type], a.Equipment , a.Cost_Type, a.Product, a.[Cost?])  c 
									group by  C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type] , c.Cost_Type, c.Product,  c.[Cost?] 
									)
									--select * from NelsonFuncicaneWeight
	, NFCycle as (
					select C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment , c.Cost_Type, c.Product, 'NF Cycle' as 'Attribute', '%' as 'unit', c.[Cost?] 
							,  sum(c.Value) as Value
							from #Final_Calc_Dataset c
								where   c.Attribute in ( 'Port to dumper queue' ,'Post dump')
								group by C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type] , c.Cost_Type, c.Product, c.[Cost?] ) --select * from NFCycle
								--select * from #Final_Calc_Dataset where attribute like '%dump%'
	, NFCycleContribution as ( 
								select C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment , c.Cost_Type, c.Product, 'NFCycle Contribution' as 'Attribute', '%' as 'unit', c.[Cost?] 
								,  sum(c.Value)*sum(ca.Value) as Value
								from NFCycle c
								inner join NelsonFuncicaneWeight ca on ca.Location = c.Location
								group by C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?] 
									) --select * from NFCycleContribution

				, TimeAtPort as ( select c.value + ca.value as value
								from (select sum(value) as value from NFCycleContribution) c, (select sum(value) as value from  CDCycleContribution) ca
										) --select * from TimeAtPort
					
				, RestOfCycle as ( select c.value+ca.value as value
						from 
							(select sum(value) as value from #Final_Calc_Dataset where Attribute in ('Empty travel to junction','Loaded travel from junction')) c,
							TimeAtPort ca) --select * from RestOfCycle
					--select * from #Final_Calc_Dataset where attribute like '%loaded%'
				, TotalDepPerDay as ( select sum(value) as Value from DepPerDay)
					
				, CycleTime as (select C.[Sheet], c.[Org_Group], cb.Location, 'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], c.Equipment, c.Cost_Type, c.Product, 'Cycle Time' as 'Attribute', 'hr' as 'unit', c.[Cost?]
									,c.value + cb.Value + ca.value as value
 									from ToFromJunction c,
									(select case when a.Location in ('Whaleback','Jimblebar','Eastern Ridge') then 'east' else 'west' end as Region, a.Location,a.Value from TimeAtMine a) cb
									, RestOfCycle ca
									where c.Location = cb.Region) 	
														
	,AvgRakeTons as (
						select C.[Sheet], c.[Org_Group], NULL as location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Avg Rake Tonnes' as 'Attribute', 't' as 'unit', c.[Cost?]
						,case when cb.Value = 0 then 0 else sum(c.Value*ca.value)/cb.Value end as value
						from TotalDepPerDay cb, RakeTonnes c
						inner join DepPerDay ca on c.Location = ca.Location
						group by C.[Sheet], c.[Org_Group], c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?], cb.Value
						) --select * from AvgRakeTons

	,AvgTimeAtMine as (
						select C.[Sheet], c.[Org_Group], NULL as location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Avg Time at Mine' as 'Attribute', 't' as 'unit', c.[Cost?]
								,case when cb.Value = 0 then 0 else sum(c.Value*ca.value)/cb.Value end as value
								from TotalDepPerDay cb, TimeAtMine c
								inner join DepPerDay ca on c.Location = ca.Location
								group by C.[Sheet], c.[Org_Group], c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?], cb.Value
							) --select * from AvgTimeAtMine	

	,AvgToFromJunction as (		
							select Ca.[Sheet], ca.[Org_Group], NULL as location, ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], NULL as Equipment, ca.Cost_Type, null as Product, 'Avg To From Junction' as 'Attribute', 't' as 'unit', ca.[Cost?]
								,case when c.Value = 0 then 0 else sum(cb.Value*ca.value)/c.Value end as value
								from TotalDepPerDay c, ToFromJunction ca
										inner join (select case when a.Location in ('Whaleback','Jimblebar','Eastern Ridge') then 'east' else 'west' end as Region, a.Location,a.Value from DepPerDay a) cb
										on ca.Location = cb.Region
								group by Ca.[Sheet], ca.[Org_Group], ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], ca.Cost_Type, ca.[Cost?],c.Value
						) 
									
	,AvgRestOfCycle as ( 
							select ca.[Sheet], ca.[Org_Group], NULL as location, ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], NULL as Equipment, ca.Cost_Type, null as Product, 'Avg Rest of Cycle' as 'Attribute', 't' as 'unit', ca.[Cost?]
								, case when cb.Value = 0 then 0 else  sum(c.Value*ca.value)/cb.Value end as value, c.value lsds, cb.Value dsss
								from TotalDepPerDay cb, RestOfCycle c, DepPerDay ca
								group by Ca.[Sheet], ca.[Org_Group], ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], ca.Cost_Type, ca.[Cost?], cb.Value
											,c.value, ca.value) 
	,AvgTotalCycle as ( 
							select ca.[Sheet], ca.[Org_Group], NULL as location, ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], NULL as Equipment, ca.Cost_Type, null as Product, 'Avg Total of Cycle' as 'Attribute', 't' as 'unit', ca.[Cost?]
								, case when cb.Value = 0 then 0 else sum(c.Value*ca.value)/cb.Value end as value
								from TotalDepPerDay cb, CycleTime c, DepPerDay ca
								where ca.Location = c.Location
								group by Ca.[Sheet], ca.[Org_Group], ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], ca.Cost_Type, ca.[Cost?], cb.Value) 
								--select * from AvgTotalCycle

	,NumberActiveRakes as (	select	c.[Sheet], 'Rail' as Org_group, NULL as location, 'Mainline' as [function], NULL as Activity, NULL as Workstream,  NULL as Equipment_Type, NULL as Equipment, c.Cost_Type, null as Product, 'Active Rakes' as 'Attribute', 't' as 'unit', c.[Cost?]
								--select 'Rail' as Org_group, 'Mainline' as [function], 'Active Rakes' as Reference
								, ((a.value + d.Value/(@daysinyear*b.value))*(c.value/24)) as value
								from AvgTotalCycle c, RailInvTransit d, AvgRakeTons b, TotalDepPerDay a) --select * from NumberActiveRakes
								
	,LoadTimePerTrain as ( select ca.[Sheet], ca.[Org_Group],  ca.location, ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type],ca.Equipment, ca.Cost_Type, ca.Product, ca.Attribute as 'Attribute', 'h' as 'unit', ca.[Cost?]
								, ca.Value--, sum(c.Value*ca.value)/cb.Value as value
								from #Final_Calc_Dataset ca
								where Attribute in ( 'Train load', 'Mine 1 Train Load', 'Mine 2 Train Load')
								) --select * from LoadTimePerTrain

	,TotalDepTrains as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Total Departure Trains' as 'Attribute', '#' as 'unit', c.[Cost?] 
						, c.Value * @daysinyear/2 as Value
							from DepPerDay c) --select * from TotalDepTrains

	, TotalLoadHours as (select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], b.Equipment, c.Cost_Type, c.Product, 'Total Load Hours' as 'Attribute', 'h' as 'unit', c.[Cost?] 
							, c.Value * ca.Value as Value
								from LoadTimePerTrain c 
								inner join TotalDepTrains ca on c.Location = ca.Location 
								inner join  
								(select distinct b.Location, c.Equipment as oc, c.Attribute
										, case	
											when c.Attribute = 'Mine 1 Train Load' then 'TLO1'
											when c.Attribute = 'Mine 2 Train Load' then 'TLO2'
											when c.Attribute = 'Train load' and c.Location = 'Eastern Ridge' then 'OB25 TLO'
											when c.Attribute = 'Train load' and c.Location = 'Whaleback' then 'TLO'
											when c.Attribute = 'Train load' and c.Location = 'Jimblebar' then 'JMB TLO'
											when c.Attribute = 'Train load' and c.Location = 'Area C' then 'TLO'
											else '' end as Equipment
												from #Final_Calc_Dataset b  
												inner join LoadTimePerTrain c	on b.Location = c.Location)
									 d on c.Location = d.Location  and d.Attribute = c.Attribute
								inner join #Final_Calc_Dataset b on coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.workstream  ,'') = coalesce(b.workstream  ,'') and d.Equipment = b.Equipment
								where b.Activity = 'TLO' and b.Attribute = 'Target Tonnes' and b.Equipment not in ('OB24 TLO','OB18 TLO')
							) --select * from TotalLoadHours

	, EffectiveLoadingHours as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], b.equipment, c.Cost_Type, c.Product, 'Effective Loading Hours'  as 'Attribute', c.Unit, c.[Cost?] 
							,case when b.Value = 0 then 0 else c.value/b.Value end as Value
							from OORbyLocationAndEquip c
							inner join #Final_Calc_Dataset b on  coalesce(c.org_group ,'') = coalesce(b.org_group , '') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') 
							where b.Attribute = 'Net rate' and b.Activity = 'TLO' and b.Equipment not in ('OB24 TLO','OB18 TLO') ) --select * from EffectiveLoadingHours
	
	, TLODowntimeLoading as (	select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Effective Loading Hours'  as 'Attribute', c.Unit, c.[Cost?] 
										,c.value - b.Value as Value, c.Value shdh, b.Value shhsbd
										from TotalLoadHours c
										inner join EffectiveLoadingHours b on c.Location = b.Location and c.Equipment = b.Equipment) --select * from TLODowntimeLoading
	
	, TotalTLOdowntimeExcSchMain as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total TLO downtime exc sch. maint.'  as 'Attribute', c.Unit, c.[Cost?] 
										,sum(c.value) as Value
										from #ProductionTime c 
										where c.Attribute in ('Scheduled process downtime raw','Unscheduled equipment downtime raw','Unscheduled process downtime excl. starve/block raw')
										and c.Activity = 'TLO' and c.Equipment not in ('OB24 TLO','OB18 TLO')
										group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] )

	, DTImpactingTrains as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Downtime Impacting Trains                     '  as 'Attribute', '%' as unit, c.[Cost?] 
									, case when b.Value = 0 then 0 else c.Value / b.Value end as Value
									from TLODowntimeLoading c
									inner join TotalTLOdowntimeExcSchMain b on c.Equipment = b.Equipment  and c.Location = b.Location 			 
								)

	, DumpTime as			(select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'Dump Time' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								, sum(c.Value) as Value
									from #Final_Calc_Dataset c
										where  c.Attribute in ( 'Dump')
									group by C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.[Cost?])

	, CarDumperTonnes as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #Final_Calc_Dataset c
										where  c.Attribute in ( 'Target Tonnes') and c.equipment in ('CD1','CD2','CD3','CD4','CD5')				
									)

	, CarDumperNetRate as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #Final_Calc_Dataset c
										where  c.Attribute in ( 'Net Rate') and c.equipment in ('CD1','CD2','CD3','CD4','CD5')
									)

	, CarDumperProductionTime as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.Attribute, c.unit, c.[Cost?] 
									, c.Value as Value
									from #ProductionTime c
									where   c.equipment in ('CD1','CD2','CD3','CD4','CD5') and c.attribute = 'Production Time'
									)

	, CarDumperUnscheduledEqp as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.Attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #ProductionTime c
									where   c.equipment in ('CD1','CD2','CD3','CD4','CD5') and c.attribute = 'Unscheduled equipment downtime raw')

	, CarDumperScheduledProcess as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.Attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #ProductionTime c
									where   c.equipment in ('CD1','CD2','CD3','CD4','CD5') and c.attribute = 'Scheduled process downtime raw')

	, CarDumperUnschedProcess as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.Attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #ProductionTime c
									where   c.equipment in ('CD1','CD2','CD3','CD4','CD5') and c.attribute = 'Unscheduled process downtime excl. starve/block raw'
									) --select * from CarDumperUnschedProcess
						--	select * from #ProductionTime
	, HoursOfDumpDownTime as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'Hours of Dump Downtime CD' as 'Attribute', c.unit, c.[Cost?] 
								, case when cc.value*ca.Value-cb.Value = 0 then 0 else c.Value/cc.value*ca.Value-cb.Value end as Value
									from CarDumperTonnes c
									inner join DumpTime					ca on c.equipment = ca.equipment
									inner join CarDumperProductionTime	cb on c.equipment = cb.equipment
									, AvgRakeTons				cc 
									) --select * from HoursOfDumpDownTime

	, DowntimeImpactingTrainsCD as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'Hours of Downtime CD' as 'Attribute', c.unit, c.[Cost?] 
								, case when (ca.Value + cb.Value + cc.Value) = 0 then 0 else c.Value/(ca.Value + cb.Value + cc.Value) end as Value
								--, c.Value wwds, ca.Value sdfa, cb.Value sdsdfa, cc.Value sdajjff
									from HoursOfDumpDownTime c
									inner join CarDumperUnscheduledEqp ca on c.equipment = ca.equipment
									inner join CarDumperUnschedProcess	cb on c.equipment = cb.equipment
									inner join CarDumperScheduledProcess cc on c.equipment = cc.equipment
									) --select * from DowntimeImpactingTrainsCD
	, MaximumRakes as (
					select top 1 NULL as [Sheet], 'Rail' as [Org_Group], NULL as Location, 'Shuttle' as [function], 'Rail' as Activity, 'Operations' as Workstream, NULL as [Equipment_type], NULL as Equipment, NULL as Cost_Type, null as Product, 'Maximum allowable active rakes' as Attribute, NULL as Unit, NULL as [Cost?] 
							, 6 as Value
						)
					select a.* into #ActiveRakesCalc from 
					(
						select * from NumberActiveRakes union all
						select * from DTImpactingTrains union all
						select * from RailInvTransit    union all
						select * from MaximumTonnes     union all
						--select * from MaximumRakes		union all
						select * from TotalOOR			union all
						select * from DowntimeImpactingTrainsCD
						) a
						
 if (select abs(b.value/a.Value) as value from #ActiveRakesCalc a,#ActiveRakesCalc b where a.Attribute = 'Total OOR' and  b.Attribute = 'Rail inventory transit') > 0.1
 insert into @results (severity, [message]) values ('warning', 'Mainline calculated rail inventory transit > 10% of total OOR')

 declare @ar_calc float = (select value from #ActiveRakesCalc where Attribute='Active Rakes')
 declare @ar_var float = (select abs(@ar_calc / b.Value - 1) from #Final_Calc_Dataset b where b.Attribute = 'Active Rakes' and b.[function] = 'Mainline');
if @ar_var >= 0.01
insert into @results (severity, [message]) select
  case when @ar_var > 0.05 then 'error' else 'warning' end,
  'Active rakes calculated from cycle (' + cast(@ar_calc as nvarchar) + ') differs from supplied value by ' + cast(cast(@ar_var*100 as int) as nvarchar) + '%'
;

		-------------------######################################################################################################################-----------------------	
		-------------------######################################################################################################################-----------------------
		-------------------######################################################################################################################-----------------------
		--------------------------------------------------------------------------------Port----------------------------------------------------------------------------
; 
	With Screened as (
	-- Screened
	select distinct  c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Screened'  as 'Attribute', c.Unit, c.[Cost?]
			,c.[Value]*(1 - pa.[Value]) as [Value]
			FROM #Final_Calc_Dataset c
			left join #Final_Calc_Dataset pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.workstream, '') = coalesce(pa.workstream,'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.location,'') = coalesce(pa.location,'')
			where  c.Attribute = 'Lump' and pa.Attribute = 'LRP Bypass') --select * from Screened
	-- RSF
	,RSF as (
	select distinct  c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RSF'  as 'Attribute' ,c.Unit, c.[Cost?] 
			,case when  pa.value = 0 or (1 + (c.[Value]/(pa.value))) = 0 then 0 else (c.[Value]/(pa.value))/(1 + (c.[Value]/(pa.value))) end as [Value]
			FROM #Final_Calc_Dataset c
			left join Screened pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.workstream, '') = coalesce(pa.workstream,'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.location,'') = coalesce(pa.location,'')
			where  c.Attribute = 'Screen stack' and pa.Attribute = 'Screened' ) --select * from RSF

				-- Yard outflow
				,YardOutflow as ( select distinct c.sheet, C.[Org_Group], C.Location, 'Yard Outflow'  as 'Attribute' ,c.Unit, c.[Cost?]
								, sum(c.value) as Value
								from #Final_Calc_Dataset c
									where c.Org_Group = 'Port' and c.Activity = 'Outflow' and c.Equipment_Type = 'Shiploader' and c.Attribute = 'Target Tonnes'
								group by  c.sheet, C.[Org_Group], C.Location,c.Unit, c.[Cost?]) -- select * from YardOutflow

	-- Lump ratio
	,LR as (select distinct  c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Lump ratio'  as 'Attribute' ,c.Unit, c.[Cost?] 
			,case when ca.value = 0 then 0 else c.[Value] / ca.[Value] end as [Value]
			FROM #Final_Calc_Dataset c
			inner join YardOutflow ca on ca.Location = c.Location and ca.Org_Group = c.Org_Group
			where  c.Attribute = 'Lump' ) 
				
	-- DSO
	,DSO as (select distinct  c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'DSO'  as 'Attribute', c.Unit, c.[Cost?] 
			,ca.[Value] * c.[Value] as [Value]
			FROM #Final_Calc_Dataset c
			inner join #Final_Calc_Dataset ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'')  and coalesce(c.workstream, '') = coalesce(ca.workstream,'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.location,'') = coalesce(ca.location,'')
			where  ca.Attribute = 'Yard Inflow' and c.Attribute = 'DL%' )	
		
	-- Screen Stack Per Ton outflow
	, ScreenStackPerTon as (select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Screen stack per ton outflow'  as 'Attribute' , c.Unit, c.[Cost?]  
								,case when (1-pb.Value) = 0 then 0 else (pb.Value * pa.Value *(1 - c.[Value])) / (1 - pb.Value) end as [Value]
								from   #Final_Calc_Dataset c
								inner join LR pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'')  and coalesce(c.workstream, '') = coalesce(pa.workstream,'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.location,'') = coalesce(pa.location,'')
								inner join RSF pb on coalesce(c.org_group ,'') = coalesce(pb.org_group ,'')  and coalesce(c.workstream, '') = coalesce(pb.workstream,'')  and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.location,'') = coalesce(pb.location,'')
								where c.Attribute = 'LRP Bypass') 	 
		 
	--Reclaimed 
	,Reclaimed as (select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Reclaimed'  as 'Attribute', c.Unit, c.[Cost?] 
						,(ca.Value + (ca.Value*pe.Value) - c.Value) as [Value] 
						from   DSO c
						inner join YardOutflow ca on ca.Location = c.Location and ca.Org_Group = c.Org_Group  
						inner join ScreenStackPerTon pe on coalesce(c.org_group ,'') = coalesce(pe.org_group ,'') and coalesce(c.[function],'') = coalesce(pe.[function] ,'')  and coalesce(c.location,'') = coalesce(pe.location,'')
							) 

					-- Reclaimer Throughput
				,ReclaimerThroughput as ( select distinct c.sheet, C.[Org_Group], C.Location, 'Reclaimer Throughput'  as 'Attribute' 
								, sum(c.value) as Value
								from #Final_Calc_Dataset c
									where c.Org_Group = 'Port' and c.Activity = 'Outflow' and c.Equipment_Type = 'Reclaimer' and c.Attribute = 'Target Tonnes'
								group by  c.sheet, C.[Org_Group], C.Location) 

	--Write off adjustments
	,WriteOffAdj as (	select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Write off adjustments'  as 'Attribute', c.Unit, c.[Cost?] 
								,  c.Value - ca.Value  as [Value] 
								from  Reclaimed c
								inner join ReclaimerThroughput ca on    coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location ,'') = coalesce(ca.location ,'') 
									) 
	--Inventory change 
	,InventoryChange as (select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Inventory change'  as 'Attribute', c.Unit, c.[Cost?]
							,c.Value - ca.Value + cb.Value as [Value] 
									from   #Final_Calc_Dataset c
									inner join YardOutflow ca on    coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location ,'') = coalesce(ca.location ,'')
									inner join WriteOffAdj cb on coalesce(c.org_group ,'') = coalesce(cb.org_group ,'') and coalesce(c.[function],'') = coalesce(cb.[function] ,'') and coalesce(c.workstream, '') = coalesce(cb.workstream,'')  and coalesce(c.equipment,'') = coalesce(cb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cb.equipment_type,'') and coalesce(c.location,'') = coalesce(cb.location,'')
									where c.Attribute = 'Yard Inflow') 
	-- opening stock
	,OpeningStock as ( 
					select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Opening stock'  as 'Attribute', c.Unit, c.[Cost?] 
				,c.Value - ca.Value as [Value] 
				from   #Final_Calc_Dataset c
						inner join InventoryChange ca on    coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location,'') = coalesce(ca.location,'')
						where c.Attribute = 'Closing stock')
	-- Total Ore Handled
	,TotalOreHandled as (select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total ore handled'  as 'Attribute', c.Unit, c.[Cost?] 
						,pe.Value + c.Value - pe.Value + pa.Value + pb.Value as [Value] 
							from   #Final_Calc_Dataset c
							inner join DSO pe		on coalesce(c.org_group ,'') = coalesce(pe.org_group ,'') and coalesce(c.[function],'') = coalesce(pe.[function] ,'')  and coalesce(c.location,'') = coalesce(pe.location,'')
							inner join Reclaimed pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.[function],'') = coalesce(pa.[function] ,'')  and coalesce(c.location,'') = coalesce(pa.location,'')
							inner join Screened pb	on coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.[function],'') = coalesce(pb.[function] ,'')  and coalesce(c.location,'') = coalesce(pb.location,'')
							where c.Attribute = 'Yard Inflow')
	--select * from #Final_Calc_Dataset where Equipment like 'SL C%'
	, SLConVDirectCost as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
								,case when sum (distinct ca.Value) + sum(distinct cb.value) = 0 
								then 0 
								else (c.Value/(sum (distinct ca.Value) + sum(distinct cb.value))) end as Value
								from #Final_Calc_Dataset c 
								inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Reclaimed' as 'Attribute' , sum(a.Value) as Value 
													from Reclaimed a where a.Attribute = 'Reclaimed' group by a.Location) ca on c.Location = ca.location
								inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Screened' as 'Attribute' , sum(a.Value) as Value 
													from Screened a where a.Attribute = 'Screened' group by a.Location) cb on c.Location = cb.location
								where c.Cost_Type = 'Direct Cost' and ca.Attribute = 'Reclaimed' and c.Equipment = 'SL Conv Syst' and cb.Attribute = 'Screened'
								group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.Value )
	/*, SLConVMaterials as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
								,case when sum (distinct ca.Value) + sum(distinct cb.value) = 0 
								then 0 
								else (c.Value/(sum (distinct ca.Value) + sum(distinct cb.value))) end as Value
								from #Final_Calc_Dataset c 
								inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Reclaimed' as 'Attribute' , sum(a.Value) as Value 
													from Reclaimed a where a.Attribute = 'Reclaimed' group by a.Location) ca on c.Location = ca.location
								inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Screened' as 'Attribute' , sum(a.Value) as Value 
													from Screened a where a.Attribute = 'Screened' group by a.Location) cb on c.Location = cb.location
								where c.Cost_Type = 'Maintenance Materials' and ca.Attribute = 'Reclaimed' and c.Equipment = 'SL Conv Syst' and cb.Attribute = 'Screened'
								group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.Value )*/	
	Select a.* into #PortCostDrivers from (
			select * from Screened union all
			select * from RSF union all
			select * from LR union all
			select * from DSO union all
			select * from ScreenStackPerTon union all
			select * from Reclaimed union all
			select * from WriteOffAdj union all
			select * from InventoryChange union all
			select * from OpeningStock union all
			select * from TotalOreHandled union all
			--select * from SLConVMaterials union all
			select * from SLConVDirectCost
	) a
; 
 
		-------------------######################################################################################################################-----------------------	
		-------------------######################################################################################################################-----------------------
		-------------------######################################################################################################################-----------------------
		--------------------------------------------------------------------------Cost Rates----------------------------------------------------------------------------
select a.* into #MiningCostRates from (
	-- drills
	select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, c.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost Rate' as Attribute, 'A$/m' as Unit, c.[Cost?]
	,case when (ca.[Value] is null or da.[Value] is null or (ca.[Value]*da.[Value])=0) then c.Value else c.[Value]/(ca.[Value]*da.[Value]) end as 'Value'
		from #Final_Calc_Dataset c
		left join #Final_Calc_Dataset ca on ca.Attribute = 'Average no. of drills' and coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '')  and coalesce(c.Equipment_type, '') = coalesce(ca.Equipment_type, '')
		left join #Final_Calc_Dataset da on da.Attribute = 'Meters drilled per rig' and coalesce(da.org_group, '') = coalesce(c.org_group, '') and coalesce(da.location, '') = coalesce(c.location, '') and coalesce(da.[function], '') = coalesce(c.[function], '')   and coalesce(c.Equipment, '') = coalesce(da.Equipment, '') and coalesce(c.Equipment_type, '') = coalesce(da.Equipment_type, '')
		where c.Activity ='drill' and c.Cost_Type is not null and c.Equipment is not null
	union all
	-- Overall Cost rate drill
	select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, c.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost Rate' as Attribute, 'A$/m' as Unit, c.[Cost?]
	,case when (ca.[Value])=0 then c.[Value] else c.[Value]/(ca.[Value]) end as 'Value'
		from #Final_Calc_Dataset c
		inner join (select c.Location, sum(c.Value*ca.Value) as value  from #Final_Calc_Dataset c
							inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '')  and coalesce(c.Equipment_type, '') = coalesce(ca.Equipment_type, '')
							where  c.Attribute = 'Average no. of drills' and  ca.Attribute = 'Meters drilled per rig'
							group by c.Location) ca on c.Location = ca.Location
		where c.Activity = 'Drill' and Equipment_Type is null and c.Cost_Type is not null
	union all
	-- blast cost rates 
	select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', '$/t' as [Unit], c.[Cost?]
	,case when ca.[Value] = 0 then C.[Value] else (C.[Value] / ca.[Value]) end as Value
		from #Final_Calc_Dataset c
		inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '') and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '')
		where c.[Function] ='Mining' and c.Activity = 'Blast' and ca.Attribute = 'Tonnes blasted' and c.Cost_Type <> 'Consumables' 
	union all
	-- Load & Haul diesel cost rates
	select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', c.Unit, c.[Cost?]
	,case when coalesce(cb.value, 0) * coalesce(cb.value, 0) = 0 then c.value else ca.value * cb.value end as Value
		from #Final_Calc_Dataset c
		left join #MiningCostDrivers ca on ca.Attribute = 'Diesel price per litre' and coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') ---and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') 
		left join #MiningCostDrivers cb on cb.Attribute = 'Burn Rate' and coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(cb.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') --and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') 
		where c.[Function] ='Mining' and c.Cost_Type = 'Diesel' and c.Attribute='Variable cost' and c.Activity in ('Load', 'Haul') --c.Equipment in ('WB LBHR 996 EXC','WB LBHR 9400 EXC','WB CAT 994 FEL','KOM 1200 FEL','WB CAT 793F DT','WB CAT 793C DT', 'ER LBHR 9250 EXC','ER LBHR 9400 EXC','ER CAT 992 FEL','ER CAT 993 FEL','ER CAT 994 FEL','ER CAT 793F DT','ER CAT 785C DT','MAC LBHR 996 EXC','MAC HIT 3600 EXC','MAC LBHR 9400 EXC','MAC KOM 1200 FEL','MAC CAT 793F DT','MAC CAT 793D DT','MAC CAT 789C DT','Liebherr 996 Manned','Liebherr 996 AHPT','Liebherr 9400 Manned','Liebherr 9400 AHPT','CAT 994 Manned','CAT 994 AHPT','YND LBHR 996 EXC','YND LBHR 9400 EXC','YND CAT 994 FEL','YND KOM 1200 FEL','YND LET 1850 FEL','YND CAT 793F DT','YND CAT 785C DT')
	) a;
	-- Mine Services cost rates
		--Mine Services - Part 1 (Calculating Productive Movement)

	-- Other Cost rates (Rail & Port)
		with productive_mvmt as (
		select distinct  c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream
		,sum ((1-c.[Value])*pa.[Value]) as  [Value]
		FROM #MiningCostDrivers c
		inner join #Final_Calc_Dataset pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'')
		where c.attribute='RH tonnes %' and  pa.attribute='Total movement tonnes' and c.Activity='Haul'
		group by c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream
	 		)
		--Mine Services - Part 2 (Calculating Cost Rates)
	,MineServices as (select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', c.Unit, c.[Cost?]
						,case when ca.value = 0 then C.[Value] else c.[Value]/ca.[Value] end  as Value 
						from #Final_Calc_Dataset c
						inner join productive_mvmt ca on coalesce(ca.org_group, '') = coalesce(c.org_group ,'')  and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  
						where  c.Activity ='Mine Services')
	,PortThroughPut as (
						select  case when C.Location in ('North Yard', 'South Yard') then 'Nelson Point' else 'Finucane Island' end as location
								, sum(DISTINCT c.value) as value
									from #Final_Calc_Dataset c
								inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') 
								where c.Attribute = 'Target Tonnes' and c.Org_Group = 'Port' and c.Activity = 'Outflow'
						group by C.Location)

	, PortOpsCostRate as ( select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', c.Unit, c.[Cost?]
								,case when sum(distinct a.value) = 0 then 0 else  c.Value / sum(distinct a.value) end as value
								from #Final_Calc_Dataset c
								inner join ( select case when Location in ('North Yard', 'South Yard') then 'Nelson Point' else 'Finucane Island' end location , sum(distinct value) value from #PortCostDrivers where Attribute = 'Total ore handled' group by location) a on a.Location = c.Location
								where c.Attribute = 'Variable Cost' and c.Cost_Type = 'Electricity'
								group by c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Equipment, c.Cost_Type, c.Product,c.Unit, c.[Cost?], c.value
								)
	--Rail - Diesel Cost Rate
	--[Tonnes per rake]

	,tonsperRake as		(select distinct c.sheet, C.[Org_Group], Ca.[Location], C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Equipment, c.Cost_Type, c.Product, 'Tons per rake'  as 'Attribute', 't/rake' as Unit, c.[Cost?]
						,((c.[Value])*(ca.[Value])) as value
						from #Final_Calc_Dataset c
						inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  
						where c.Org_Group ='Rail' and c.Attribute='No. of ore cars' /*and c.[Function]='Mainline'*/ and ca.Org_Group ='Rail' and ca.Activity ='Rail' and ca.Attribute = 'Ore car tonnage' 
						),

		--[OOR]
	OOR as				(select distinct c.sheet, C.[Org_Group], case Equipment when 'OB18 TLO' then 'OB18' when 'OB24 TLO' then 'OB24' else c.[Location] end as Location, C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, 'OOR'  as 'Attribute', 'tpa' as Unit, c.[Cost?]
						,sum(c.[Value]) as [Value]
						from #Final_Calc_Dataset c 
						where Activity = 'TLO' and Attribute = 'Target Tonnes' and Equipment in ('TLO','OB25 TLO','TLO','JMB TLO','TLO1','TLO2', 'OB24 TLO', 'OB18 TLO')
						group by c.sheet, C.[Org_Group], case Equipment when 'OB18 TLO' then 'OB18' when 'OB24 TLO' then 'OB24' else c.[Location] end, C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Cost_Type, c.Product, c.[Attribute], c.[Unit], c.[Cost?]
						),

	--[No. rakes] =  ([OOR]/[Tonnes per rake])
	NumberOfRakes as	(select distinct c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Cost_Type, c.Product, 'No. rakes'  as 'Attribute', '#' as Unit, c.[Cost?]
						,case when ca.value = 0 then 0 else (c.[Value]/ca.[Value]) end as value
						from OOR c
						inner join tonsperRake ca on coalesce(c.[Location],'') = coalesce(ca.[Location],'')  
						),

	--[Diesel Volume] = ([Diesel Consumption per trip]*[No. locos]*[No. rakes])
	DieselVolume as		(select distinct c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Cost_Type, c.Product, 'Diesel Volume'  as 'Attribute', 'l' as Unit, c.[Cost?]
						,(c.[Value])*(ca.[Value])*case ca.Location when 'OB18' then 1 when 'OB24' then 1 else 2 end as value
						from #Final_Calc_Dataset c
						inner join NumberOfRakes ca on coalesce(c.[Location],'') = coalesce(ca.[Location],'') 
						where c.Org_Group ='Rail' and c.org_group ='Rail' and c.Attribute = 'Diesel consumption per trip'
						), 
				
	--[Total Diesel Volume] = ([Diesel Consumption per trip]*[No. locos]*[No. rakes])
	TotDieselVolume as	(select distinct c.sheet, C.[Org_Group], C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, 'Diesel Volume'  as 'Attribute', 'l' as Unit, c.[Cost?]
						,sum(c.[Value]) as [Value]
						from DieselVolume c
						group by c.sheet, C.[Org_Group], C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, c.[Attribute], c.[Unit], c.[Cost?]
						),

	--[Diesel Cost Rate] = ([Diesel Fixed Cost]/[Total Diesel Volume])
	DieselCostRate as	(select distinct c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/L' as Unit, c.[Cost?]
						,case when ca.Value = 0 then 0 else (c.[Value]/ca.[Value]) end as value
						from #Final_Calc_Dataset c
						inner join TotDieselVolume ca on coalesce(ca.org_group, '') = coalesce(c.org_group ,'')
						where c.Org_Group ='Rail' and c.Cost_Type='Diesel' 
						)
	,ActualThroughput as	(select distinct c.sheet, 'Rail' as [Org_Group], C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, 'Actual throughput'  as 'Attribute', 'tpa' as Unit, c.[Cost?]
						,sum(c.[Value]) as [Value]
						from #Final_Calc_Dataset c 
						where Activity = 'TLO' and Attribute = 'Target Tonnes' and Equipment in ('TLO','OB25 TLO','TLO','JMB TLO','TLO1','TLO2')
						group by c.sheet, C.[Org_Group], C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, c.[Attribute], c.[Unit], c.[Cost?]
						),

	OtherCostRate as	(select distinct c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]
						,case when ca.Value = 0 then 0 else (c.[Value]/ca.[Value]) end as value
						from #Final_Calc_Dataset c
						inner join ActualThroughput ca on coalesce(ca.org_group, '') = coalesce(c.org_group ,'')
						where c.Org_Group ='Rail' and c.Workstream='Direct Cost' and c.Cost_Type='Other')
	,RateLoss as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Rate Loss'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
						,case when ca.value = 0 then 0 else 1 - (c.Value/ca.Value) end as Value
						from #Final_Calc_Dataset c 
						inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') 
						where c.Attribute = 'Net Rate' and ca.Attribute = 'Design Rate')
				
	, STKDirectCost as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
						,case when sum(ca.value) = 0 then 0 else (c.Value/sum (distinct ca.Value)) end as Value
						from #Final_Calc_Dataset c 
						inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Ore Inflow' as 'Attribute' , sum(a.Value) as Value 
											from #Final_Calc_Dataset a where a.Attribute = 'Yard Inflow' group by a.Location) ca on c.Location = ca.location
						where c.Cost_Type = 'Direct Cost' and ca.Attribute = 'Ore Inflow' and c.Equipment = 'STK Conv Syst'
						group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.Value )
				
	/*, STKMaintenenceMaterials as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
						,case when sum(distinct ca.value) = 0 then 0 else (c.Value/sum (distinct ca.Value)) end as Value
						from #Final_Calc_Dataset c 
						inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Ore Inflow' as 'Attribute' , sum(a.Value) as Value 
											from #Final_Calc_Dataset a where a.Attribute = 'Yard Inflow' group by a.Location) ca on c.Location = ca.location
						where c.Cost_Type = 'Maintenance Materials' and ca.Attribute = 'Ore Inflow' and c.Equipment = 'STK Conv Syst'
						group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.Value )*/
	-- Load & Haul Cost rates
	,LHCostRateseqp as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
						,coalesce(case when sum(distinct ca.value) = 0 then sum(c.Value) else (sum(c.Value)/sum (distinct ca.Value)) end, sum(c.Value)) as Value
						from #Final_Calc_Dataset c
						left join ( select distinct c.equipment ,case when c.Value = 0 then 1 else  cb.Value/c.Value end as value 
											from #Final_Calc_Dataset c 
											inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(cb.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_type, '') = coalesce(cb.cost_type, '')
											where c.Activity in ('load', 'haul') and c.Attribute = 'Net Rate' and cb.Attribute = 'Total movement tonnes') ca on c.Equipment = ca.Equipment
						where c.Cost_Type <> 'Diesel' and c.Cost_Type is not null and c.Activity in ('Load', 'Haul')
						group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?]  )
	,LandHCostRates as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
		,case when sum(distinct ca.value) = 0 then 0 else (sum(c.Value)/sum (distinct ca.Value)) end as Value
		from #Final_Calc_Dataset c
		inner join ( select distinct c.Location ,case when sum(c.Value) = 0 then 0 else  sum(cb.Value - c.Value) end as value 
							from #Final_Calc_Dataset c 
							inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(cb.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_type, '') = coalesce(cb.cost_type, '')
							where  c.Attribute = 'Rehandle movement' and cb.Attribute = 'Total movement tonnes' and c.Activity in ('haul')
							group by c.Location) ca on c.Location = ca.Location
		where  c.Cost_Type is not null and c.Activity = 'Load & Haul'
		group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?]  )
				
	,OB18CostRate as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, 'OB18 Proc Dir O_H' as Equipment, 'Electricity' as 'Cost_Type', c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
		,case when sum(distinct c.value) = 0 then 0 else (sum(cb.Value)/sum (distinct c.Value)) end as Value
		from #Final_Calc_Dataset c
		inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') 
		where  c.Attribute = 'Target Tonnes'  and cb.Cost_Type is not null and cb.Equipment = 'OB18 Proc Dir O_H'
		group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?]  )
	--OFR Cost rates
	,OFRCostRate as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
		,case when ca.value = 0 then 0 else (c.Value/ca.Value) end as Value
		from #Final_Calc_Dataset c
			inner join ( select a.Location, sum(a.Value) as Value from #Final_Calc_Dataset a where a.Activity = 'OFR' and a.Attribute = 'Target Tonnes' group by a.Location) ca on c.Location = ca.Location
			where c.Cost_Type is not null and c.Activity = 'OFR' and c.Cost_Type = 'Electricity'	)
	--Unallocated costs
	,UnallocatedRates as (select  c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
								, case when ca.Value = 0 then 0 else c.Value/ca.Value end as Value
								from #Final_Calc_Dataset c
								inner join ( select a.Location, sum(a.Value) as Value from #Final_Calc_Dataset a where a.Activity = 'OFR' and a.Attribute = 'Target Tonnes' group by a.Location) ca on c.Location = ca.Location
								where c.Cost_Type is not null and  c.Workstream = 'Operations' and c.Cost_Type = 'Electricity' and c.Activity = 'Non Allocated Cost' and C.Location <> 'Eastern Ridge')
	,ERElecCostRate as (select  c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
								, case when ca.Value = 0 then 0 else c.Value/ca.Value end as Value
								from #Final_Calc_Dataset c
								inner join ( select a.Location, sum(a.Value) as Value from #Final_Calc_Dataset a where a.Activity in ('OFR', 'OFH') and a.Attribute = 'Target Tonnes' group by a.Location) ca on c.Location = ca.Location
								where c.Cost_Type is not null and  c.Workstream = 'Operations' and c.Cost_Type = 'Electricity' and c.Activity = 'Non Allocated Cost' and C.Location = 'Eastern Ridge')
	--Port demurrage cost rates
	,CargoSize as (select  c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, cb.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cargo Size'  as 'Attribute', 't' as Unit, c.[Cost?]  
								, case when c.Value = 0 then 0 else c.Value*cb.value/c.Value end as Value
								from #Final_Calc_Dataset c
								inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_Type, '') = coalesce(cb.cost_Type, '') 
								where c.attribute = 'Average ship size' and cb.attribute = 'Cargo size baseline')

	, LaytimeAllowed as (select  c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, cb.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Laytime Allowed'  as 'Attribute', 't' as Unit, c.[Cost?]  
								, case when cb.Value = 0 then 0 else (c.Value/cb.value) + ca.Value end as Value
								from CargoSize c
								inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_Type, '') = coalesce(cb.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') 
								inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') and coalesce(c.cost_Type, '') = coalesce(ca.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') 
								where c.attribute = 'Cargo Size' and cb.attribute = 'Contract rate' and ca.attribute = 'Turn time/free time'
							
							)
	, DaysPerShip as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Days Per Ship'  as 'Attribute', 't' as Unit, c.[Cost?]  
								, ca.value - c.Value as Value
								from LaytimeAllowed c
								inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') and coalesce(c.cost_Type, '') = coalesce(ca.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') 
								where ca.Attribute = 'Laytime used') --select * from DaysPerShip
-- Work from here
	, TotalShips as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, NULL as Equipment, c.Cost_Type, c.Product, 'Total Ships'  as 'Attribute', 't' as Unit, c.[Cost?]  
								,case when c.value = 0 then 0 else  Sum(ca.value)/c.value end as Value
								from #Final_Calc_Dataset c
								inner join #Final_Calc_Dataset ca ON C.org_group = ca.org_group
								where ca.Attribute = 'Target Tonnes' and  ca.Equipment_Type = 'Shiploader' and c.attribute = 'Average ship size' 
								group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Cost_Type, c.Product, c.[Cost?] ,c.value
								
						)
	, CFRFOBShips as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.attribute, 't' as Unit, c.[Cost?]  
								, c.value*ca.Value as Value
								from #Final_Calc_Dataset c, TotalShips ca
								where c.Attribute in ( 'FOB ratio' , 'CFR Ratio')) --select * from CFRFOBShips

	, TotalDays as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Days Per Ship'  as 'Attribute', 't' as Unit, c.[Cost?]  
								, ca.value - c.Value as Value
								from DaysPerShip c
								inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') and coalesce(c.cost_Type, '') = coalesce(ca.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') 
								where ca.Attribute = 'Laytime used')

	, DemurrageCostRate as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', 't' as Unit, c.[Cost?]  
								,case when (c.value*ca.Value) = 0 then 0 else cb.value/(c.value*ca.Value) end as Value
								from DaysPerShip c
								inner join CFRFOBShips ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') and coalesce(c.cost_Type, '') = coalesce(ca.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') 
								inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_Type, '') = coalesce(cb.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') 
								where cb.attribute = 'Variable Cost'
								) 


	select a.* into #CostRates from 
	(	
		select * from MineServices union all
		select * from PortOpsCostRate union all
		select * from OtherCostRate union all
		select * from DieselCostRate union all
		select * from RateLoss union all
		select * from STKDirectCost union all
		--select * from STKMaintenenceMaterials union all
		select * from LHCostRateseqp union all
		select * from LandHCostRates union all
		select * from ERElecCostRate union all
		select * from OFRCostRate union all
		select * from OB18CostRate union all
		--select * from DemurrageCostRate union all
		select * from UnallocatedRates) a;


--######################################################################################
--################################## NB CHANGES ########################################
--######################################################################################
Select * into #Final_Calc_Dataset_Complete from #Final_Calc_Dataset ;

-- Update 
--Other updates to ensure that records match after calculations

update #Final_Calc_Dataset_Complete set Attribute = 'Target Tonnes' where Attribute = 'Tonnes Drilled';  -- this is an assumption
--update #Final_Calc_Dataset_Complete set Attribute = 'Blasted Tonnes' where Attribute = 'Tonnes Blasted';
update #Final_Calc_Dataset_Complete set Attribute = 'Strip Ratio', Activity=null, Workstream=null where Attribute='Stripping Ratio';

update #Final_Calc_Dataset_Complete set Attribute = 'No of ore cars' where Attribute = 'No. of ore cars';
update #Final_Calc_Dataset_Complete set Attribute = 'Port to dumper queue Finucane Island' where attribute = 'Port to dumper queue' and location = 'Finucane Island';
update #Final_Calc_Dataset_Complete set Attribute = 'Port to dumper queue Nelson Point' where attribute = 'Port to dumper queue' and location = 'Nelson Point';
update #Final_Calc_Dataset_Complete set Attribute = 'Post dump Finucane Island' where attribute = 'Post dump' and location = 'Finucane Island';
update #Final_Calc_Dataset_Complete set Attribute = 'Post dump Nelson Point' where attribute = 'Post dump' and location = 'Nelson Point';
update #Final_Calc_Dataset_Complete set Attribute = 'Junction to mine queue east' where attribute like 'Junction to mine queue' and location = 'east';
update #Final_Calc_Dataset_Complete set Attribute = 'Junction to mine queue west' where attribute = 'Junction to mine queue' and location = 'west';
update #Final_Calc_Dataset_Complete set Attribute = 'Mine queue to junction east' where attribute like 'Mine queue to junction' and location = 'east';
update #Final_Calc_Dataset_Complete set Attribute = 'Mine queue to junction west' where attribute = 'Mine queue to junction' and location = 'west';
update #Final_Calc_Dataset_Complete set Location = NULL where Attribute like 'Port to dumper queue%';
update #Final_Calc_Dataset_Complete set Location = NULL where Attribute like 'Post dump%';
update #Final_Calc_Dataset_Complete set Location = NULL where Attribute like 'Junction to mine queue%';
update #Final_Calc_Dataset_Complete set Location = NULL where Attribute like 'Mine queue to junction%';

update #Final_Calc_Dataset_Complete set Attribute = 'Scheduled equipment downtime' where Attribute = 'Scheduled maintenance time';
update #Final_Calc_Dataset_Complete set Attribute = 'Unscheduled equipment downtime' where Attribute = 'Unscheduled maintenance time';
update #Final_Calc_Dataset_Complete set Attribute = 'Scheduled process downtime' where Attribute = 'Scheduled operating loss time';
update #Final_Calc_Dataset_Complete set Attribute = 'Unscheduled process downtime excl. starve/block' where Attribute = 'Unscheduled operating loss time (exclude starve/block time)';
update #Final_Calc_Dataset_Complete set Attribute = 'Scheduled standby hours' where Attribute = 'Standby time' and Activity in ('load','haul','drill')
update #Final_Calc_Dataset_Complete set Attribute = 'Scheduled standby time' where Attribute = 'Standby time' and Activity not in ('load','haul','drill')
update #Final_Calc_Dataset_Complete set Attribute = 'Standby time' where Attribute in ('Standby time', 'Scheduled standby time', 'Scheduled standby hours') and activity in ('Load','Haul','OFH','OFR','TLO','Beneficiation','Inflow','Outflow','Drill');
update #CostRates set Equipment = 'OB18 Proc Dir O_H' where Equipment = 'OB18' and Activity = 'OFH'

update #Final_Calc_Dataset_Complete set Attribute = 'Rehandle tonnes' where Attribute = 'Rehandle movement' and Activity in ('load', 'haul')
update #Final_Calc_Dataset_Complete set Attribute = 'Target tonnes' where Attribute in ('Total movement', 'Total movement tonnes') and Activity in ('load', 'haul')
--update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes processed' where Attribute = 'Target Tonnes' and  Activity in ('OFH','OFR','Beneficiation','Inflow','Outflow')

update #Final_Calc_Dataset_Complete set Location = 'North Yard' where Attribute in ( 'CD1 to North Yard', 'CD2 to North Yard', 'CD3 to North Yard', 'CD4 to North Yard', 'CD5 to North Yard') 
update #Final_Calc_Dataset_Complete set Location = 'East Yard' where Attribute in ( 'CD1 to East Yard', 'CD2 to East Yard', 'CD3 to East Yard', 'CD4 to East Yard', 'CD5 to East Yard')
update #Final_Calc_Dataset_Complete set Location = 'West Yard' where Attribute in ( 'CD1 to West Yard', 'CD2 to West Yard', 'CD3 to West Yard', 'CD4 to West Yard', 'CD5 to West Yard') 
update #Final_Calc_Dataset_Complete set Location = 'South Yard' where Attribute in ( 'CD1 to South Yard', 'CD2 to South Yard', 'CD3 to South Yard', 'CD4 to South Yard', 'CD5 to South Yard') 

update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes transferred' where Attribute in ( 'CD1 to North Yard', 'CD2 to North Yard', 'CD3 to North Yard', 'CD4 to North Yard', 'CD5 to North Yard') 
update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes transferred' where Attribute in ( 'CD1 to East Yard', 'CD2 to East Yard', 'CD3 to East Yard', 'CD4 to East Yard', 'CD5 to East Yard')
update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes transferred' where Attribute in ( 'CD1 to West Yard', 'CD2 to West Yard', 'CD3 to West Yard', 'CD4 to West Yard', 'CD5 to West Yard') 
update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes transferred' where Attribute in ( 'CD1 to South Yard', 'CD2 to South Yard', 'CD3 to South Yard', 'CD4 to South Yard', 'CD5 to South Yard') 

update #Final_Calc_Dataset_Complete set Location = Equipment where Attribute = 'Queue to Dump'
update #Final_Calc_Dataset_Complete set Equipment = NULL where Attribute = 'Queue to Dump'

update #Final_Calc_Dataset_Complete set Cost_Type = 'Consumables' where Attribute = 'Powder Factor' and Activity = 'Blast'
update #Final_Calc_Dataset_Complete set Attribute = 'Unscheduled process downtime excl. starve/block' where Attribute = 'Unscheduled process downtime' and Activity = 'TLO'
update #Final_Calc_Dataset_Complete 
set Value = ca.Value
from #Final_Calc_Dataset_Complete c
inner join #ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'') and coalesce(c.attribute,'') = coalesce(ca.attribute,'')

-- Update Active Rakes
update #Final_Calc_Dataset_Complete set Value = b.value
		from #ActiveRakesCalc b
		inner join #Final_Calc_Dataset_Complete a on a.Org_Group = b.Org_group and a.[Function] = b.[function]
		where a.Attribute = 'Active Rakes' and  a.[Function] = 'mainline'

update #ActiveRakesCalc set Attribute = 'TLO downtime affecting loading' where location in ('Area C','Eastern Ridge','Jimblebar','Whaleback') and Equipment like '%TLO%'
update #ActiveRakesCalc set Attribute = 'TLO 1 downtime affecting loading' where location in ('Yandi') and Equipment = 'TLO1'
update #ActiveRakesCalc set Attribute = 'TLO 2 downtime affecting loading' where location in ('Yandi') and Equipment = 'TLO2'
update #ActiveRakesCalc set [function] = 'Mainline' where location in ('Area C','Eastern Ridge','Jimblebar','Whaleback', 'Yandi') and Attribute not in ('Maximum tonnes constraint','Maximum allowable active rakes')
update #ActiveRakesCalc set Equipment = NULL where location in ('Area C','Eastern Ridge','Jimblebar','Whaleback', 'Yandi')

update #ActiveRakesCalc set Attribute = 'CD downtime affecting dumping' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set location = Equipment where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Org_group = 'Rail' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set [function] = 'Mainline' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Activity = 'Rail' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Workstream = 'Operations' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Equipment_Type = NULL where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Equipment = NULL where Equipment in ('CD1','CD2','CD3','CD4','CD5')

update #Final_Calc_Dataset_Complete set Equipment_Type = NULL Where attribute = 'CFR ratio'
update #Final_Calc_Dataset_Complete set Equipment_Type = NULL Where attribute = 'FOB ratio'
;


----
--- Create an upadate into the results table for the assumptions
--- 
/*update #Final_Calc_Dataset_Complete set Value = 100000000 where Attribute = 'Maximum tonnes constraint'
update #Final_Calc_Dataset_Complete set Value = 6 where Attribute = 'Maximum allowable active rakes'*/

select a.* into #final_attribute from 
(	select * from #MiningCostDrivers A union all
	select * from #MiningCostRates union all
	select * from #CostRates		union all
	select * from #PortCostDrivers union all
	--select * from #LoadAdjustments union all
	--select * from #HaulAdjustments union all
	select * from #ActiveRakesCalc union all
	select * from #Final_Calc_Dataset_Complete
	) a


select a.* into #retrieve_attribute_id from (
select distinct a.*, og.og_id, l.loc_id, f.func_id, ac.act_id, ws.ws_id, et.eqp_type_id, e.eqp_id, ct.ct_id, prod.prod_id  from 
	#final_attribute a
	left join vdt.org_group og on a.Org_Group = og.og_name
	left join vdt.location l on l.loc_name = a.Location
	left join vdt.[function] f on f.func_name = a.[Function]
	left join vdt.activity ac on ac.act_name = a.Activity 
	left join vdt.workstream ws on ws.ws_name = a.Workstream
	left join vdt.eqp_type et on et.eqp_type_name = a.Equipment_Type 
	left join vdt.equipment e on e.eqp_name  = a.Equipment
	left join vdt.cost_type ct on ct.ct_name = a.Cost_Type 
	left join vdt.product prod on prod.prod_name = a.Product) a
;

insert into @results (severity, [message])
select 'info', cast(count(*) as nvarchar) + ' data points mapped from Excel' from #retrieve_attribute_id

select c.* into #fulljoin from (
select b.attr_id, b.attribute as model_attribute, a.Org_Group, a.Location, a.[Function], a.Activity, a.Workstream, a.Equipment_Type, a.Equipment, a.Cost_Type, a.Product, a.Attribute, a.Value
from (vdt.attribute_category b inner join vdt.attribute x on b.attr_id=x.attr_id) full outer join #retrieve_attribute_id a 
on									coalesce(a.og_id		,-1)	= coalesce(b.og_id 		,-1)
								and coalesce(b.loc_id		,-1)	= coalesce(a.loc_id 	,-1)
								and coalesce(a.func_id		,-1)	= coalesce(b.func_id 	,-1)
								and coalesce(a.act_id		,-1)	= coalesce(b.act_id 	,-1)
								and coalesce(a.ws_id		,-1)	= coalesce(b.ws_id		,-1)
								and coalesce(a.eqp_id		,-1)	= coalesce(b.eqp_id		,-1)
								and coalesce(a.eqp_type_id	,-1)	= coalesce(b.eqp_type_id,-1)
								and coalesce(a.ct_id		,-1)	= coalesce(b.ct_id		,-1)
								and coalesce(a.prod_id      ,-1)    = coalesce(b.prod_id    ,-1)
								and coalesce(a.Attribute	,'')	= coalesce(b.attribute 	,'')
where x.is_calculated = 0) c 

insert into @results (severity, [message])
select top 25 'error', concat(org_group, '-', Location, '-', [Function], '-', [Activity], '-', Workstream, '-',
                              Equipment_Type, '-', Equipment, '-', Cost_Type, '-', Attribute, ' has no corresponding lever in the model')
from #fulljoin where attr_id is null;
if (select count(*) from #fulljoin where attr_id is null) > 25
insert into @results (severity, [message]) values ('error', 'More than 25 rows in the Excel file have no corresponding lever in the model')

insert into @results (severity, [message])
select top 25 'warning', concat(C.org_group, '-', C.Location, '-', C.[Function], '-', C.[Activity], '-', C.Workstream, '-',
                              C.Equipment_Type, '-', C.Equipment, '-', C.Cost_Type, '-', C.Attribute, ' is in the model but not in Excel')
from vdt.attribute_category C inner join #fulljoin F on C.attr_id=F.attr_id
where F.org_group is null;
if (select count(*) from #fulljoin where org_group is null) > 25
insert into @results (severity, [message]) values ('warning', 'More than 25 levers in the model do not have corresponding rows in the Excel file')

insert into @results (severity, [message])
select 'error', concat('Duplicate row: ', org_group, '-', location, '-', [function], '-', activity, '-', workstream, '-',
   equipment_type, '-', equipment, '-', cost_type, '-', attribute, '=', cast(value as nvarchar)) from #fulljoin where attr_id in (
select attr_id from #fulljoin where org_group is not null group by attr_id having count(*) > 1)
and org_group is not null order by attr_id

select a.attr_id, b.Value into #backcalcs  from vdt.attribute A
inner join #retrieve_attribute_id B
on                  coalesce(a.og_id    ,-1)  = coalesce(b.og_id    ,-1)
                and coalesce(b.loc_id   ,-1)  = coalesce(a.loc_id   ,-1)
                and coalesce(a.func_id    ,-1)  = coalesce(b.func_id  ,-1)
                and coalesce(a.act_id   ,-1)  = coalesce(b.act_id   ,-1)
                and coalesce(a.ws_id    ,-1)  = coalesce(b.ws_id    ,-1)
                and coalesce(a.eqp_id   ,-1)  = coalesce(b.eqp_id   ,-1)
                and coalesce(a.eqp_type_id  ,-1)  = coalesce(b.eqp_type_id,-1)
                and coalesce(a.ct_id    ,-1)  = coalesce(b.ct_id    ,-1)
				and coalesce(a.prod_id  ,-1)  = coalesce(b.prod_id  ,-1)
                and coalesce(a.attr_name  ,'')  = coalesce(b.attribute  ,'')
where a.attr_id is not null;

declare @err_count int = (select count(*) from @results where severity='error');
if @err_count > 0
begin
  insert into @results (severity, [message]) values ('info', 'Not creating data set due to ' + cast(@err_count as nvarchar) + ' errors');
end
else
begin
  insert into @results (severity, [message]) values ('info', 'Creating data set');
  declare @dataset_id int;

  insert into vdt.dataset (model_id, dataset_name, origin, last_update, [description], created, category_id, deleted)
  select @model_id, @dataset_name, 'user', CURRENT_TIMESTAMP, @description, CURRENT_TIMESTAMP, category_id, 0
  from vdt.dataset_category where category_name=@category;
  set @dataset_id=SCOPE_IDENTITY();

  insert into vdt.value (dataset_id, attr_id, value) select @dataset_id, attr_id, value from #backcalcs

  insert into @results (severity, [message]) values ('id', cast(@dataset_id as nvarchar));
  insert into @results (severity, [message]) values ('info', 'Data import complete');
end

drop table #Final_Calc_Dataset;
drop table #Final_Calc_Dataset_Complete;
drop table #MiningCostDrivers;
drop table #MiningCostRates;
drop table #retrieve_attribute_id;
drop table #final_attribute;
drop table #fulljoin;
drop table #ProductionTime
drop table #CostRates
drop table #ActiveRakesCalc
drop table #HaulAdjustments
drop table #LoadAdjustments
drop table #LoadHaulRHRate
drop table #PortCostDrivers
drop table #backcalcs


  -- return report to the user
  select * from @results;
end
go

ALTER procedure [vdt].[sp_get_site_data]
  @site nvarchar(100),
  @dataset_id int,
  @user_id int
as
begin
  set nocount on;

  if exists (select * from vdt.data where org_group='Mines' and location=@site)
  begin
    -- it's a mining location
	with allattrs as (
	select 
	  coalesce([function], 'Mining') as tab_name, coalesce([activity], [function], 'Mining') as panel, 'ActivityTemplate' as template,
	  org_group, [function], activity, workstream, location, equipment_type, equipment, cost_type, product, attr_id, attribute, attribute_unit,
	  attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	from vdt.data where org_group='Mines' and location=@site and dataset_id=@dataset_id
	and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
    and ([function] is not null or attribute_is_kpi=0) and (attribute_is_kpi=1 or attribute_is_lever=1))
	,customattrs as (
	select [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	  org_group, [function], activity, workstream, location, equipment_type, 'Operations Costs' as equipment, cost_type, product, attr_id, attribute, attribute_unit,
	  attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	from allattrs where [activity]='Blast' and attribute_is_cost=1
	union all
	select [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	  org_group, [function], activity, workstream, location, equipment_type, null as equipment, cost_type, product, attr_id, attribute, attribute_unit,
	  attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	from allattrs where [activity]='Load & Haul' and attribute_is_cost=1
    union all
    select tab_name, panel, 'DrillDownTemplate' as template,
      org_group, [function], activity, workstream, null as location, case when equipment_type=cost_type then null else equipment_type end as equipment_type,
	  equipment, cost_type, product, attr_id, attribute, attribute_unit,
      attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
    from allattrs where [activity] in ('Overheads', 'Non Allocated Cost') or [function] = 'Overheads'
	)
	,unioned as (
	select * from customattrs
	union all
	select * from allattrs where attr_id not in (select attr_id from customattrs))

	select * from unioned
	where tab_name is not null and panel is not null
	order by
	case coalesce([function], 'Mining')
	  when 'Mining' then 1
	  when 'Processing' then 2
	  else 3
	end,
	case coalesce([activity], 'Mining')
	  when 'Mining' then 1
	  when 'Drill' then 10
	  when 'Blast' then 20
	  when 'Load & haul' then 30
	  when 'Load' then 40
	  when 'Haul' then 50
	  when 'Ore Sources' then 60
	  when 'Beneficiation' then 70
	  when 'OFH' then 80
	  when 'OFR' then 90
	  when 'TLO' then 100
	  else 999
	end, [function], [activity]
  end
  else if @site='Rail'
  begin
    with allattrs as (
	  select 
	    [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type, equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from vdt.data where org_group=@site and dataset_id=@dataset_id
	  and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
	  and (attribute_is_kpi=1 or attribute_is_lever=1)
	)
	,customattrs as (
	  select 
	    [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type,
		case when location like 'CD%' then 'Car Dumpers' else location end as equipment,
		cost_type, product, attr_id,
		case when location like 'CD%' then location + ' ' + attribute else attribute end as attribute,
		attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity]='Rail'
	  union all
	  select 
	    [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type, coalesce(equipment, equipment_type, workstream) as equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from vdt.data where org_group=@site and dataset_id=@dataset_id
	  and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
	  and (attribute_is_kpi=1 or attribute_is_lever=1)
	  and [function]='Maintenance'
	  union all
	  select 
	    [function] as tab_name, [activity] as panel, 'DrillDownTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type, equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from vdt.data where org_group=@site and dataset_id=@dataset_id
	  and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
	  and (attribute_is_kpi=1 or attribute_is_lever=1)
	  and [function]='Production'
	)
	,unioned as (
	select * from customattrs
	union all
	select * from allattrs where attr_id not in (select attr_id from customattrs))

	select * from unioned
	where tab_name is not null and panel is not null
	order by
	case coalesce([function], 'Rail')
	  when 'Mainline' then 1
	  when 'Shuttle' then 2
	  else 3
	end, [function], [activity]
  end
  else if @site='Port'
  begin
    with allattrs as (
	  select 
	    [function] as tab_name, coalesce([activity], [function]) as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type, equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from vdt.data where org_group=@site and dataset_id=@dataset_id
	  and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
	  and (attribute_is_lever=1 or attribute_is_kpi=1)
	)
	,customattrs as (
	  select 
	    [function] as tab_name, [location] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type,
		equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity]='Outflow'
	  union all
	  select 
	    [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type,
		workstream as equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity] in ('Overheads') and [function] in ('Production', 'Marine')
	  union all
	  select 
	    [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type,
		location as equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity] in ('Operations') and [function]='Production'
	  union all
	  select 
	    [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type,
		equipment_type as equipment, attribute as cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity] in ('Demurrage') and [function]='Marine'
	  union all
	  select 
	    [function] as tab_name, [activity] as panel, 'DrillDownTemplate' as template,
	    org_group, [function], activity, null as workstream, location, equipment_type,
		equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity]='Maintenance' and [function]='Maintenance'
	)
	,unioned as (
	select * from customattrs
	union all
	select * from allattrs where attr_id not in (select attr_id from customattrs))

	select * from unioned
	where tab_name is not null and panel is not null
	order by
	case coalesce([function], 'Rail')
	  when 'Production' then 1
	  when 'Marine' then 2
	  when 'Maintenance' then 3
	  else 4
	end,
	case [panel]
	  when 'Inflow' then 1
	  when 'North Yard' then 10
	  when 'South Yard' then 20
	  when 'East Yard' then 30
	  when 'West Yard' then 40
	  else 999
	end, [function], [activity]
  end
  else
  begin
    -- it's functions
	with AllAttrs as (
	select 
      [function] as tab_name, [activity] as panel, 'DrillDownTemplate' as template,
	  org_group, [function], activity, workstream, location, equipment_type, equipment,
	  case when attribute_is_cost=1 then coalesce(cost_type, attribute) else cost_type end as cost_type,
	  product, attr_id, attribute, attribute_unit,
	  attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	from vdt.data where org_group=@site and dataset_id=@dataset_id
	and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
	),
	unioned as (
	  select * from AllAttrs
	)
	select * from unioned
	where tab_name in ('Functions', 'Logistic & Infrastructure', 'Operations Infrastructure', 'Other', 'Revenue')
	and panel is not null and panel <> 'Aggregate Fixed Cost'
  end
end
go

ALTER  procedure [vdt].[sp_get_vdt_data]
@dataset_id int, 
@benchmark_id int=null,
@user_id int,
@attributeIds vdt.IdFilterTableType READONLY

AS 
BEGIN 
     SET NOCOUNT ON 

	 declare @sec_level int;
	 set @sec_level = (select sec_level from vdt.[user] where [user_id] = @user_id);

SELECT
	V.[attr_id]
    ,UF.[format]
	,UF.[unit]
	,CASE WHEN @sec_level >=  A.sec_level THEN coalesce(B.value, V.value) ELSE null END AS base_value
	,CASE WHEN @sec_level >=  A.sec_level THEN BM.value ELSE null END AS benchmark
	, coalesce(((coalesce(C.new_value, V.value) - coalesce(B.value, V.value)) / nullif(coalesce(B.value, V.value),0)),0) as target_change
	, coalesce(((BM.value - coalesce(B.value, V.value)) / nullif(coalesce(B.value, V.value),0)),0) as what_if_change
	,CASE WHEN @sec_level >=  A.sec_level THEN coalesce(C.new_value, V.value) ELSE null END AS override_value
  FROM [vdt].[value] V
  inner join vdt.attribute A on V.attr_id = A.attr_id
  inner join vdt.dataset DS on V.dataset_id = DS.dataset_id
  left join vdt.scenario DSS on DS.dataset_id = DSS.view_dataset_id
  left join vdt.scenario_change C on DSS.scenario_id = C.scenario_id and A.attr_id = C.attr_id
  left join vdt.unit_format UF on A.unit = UF.unit
  left join vdt.value B on V.attr_id = B.attr_id and B.dataset_id = DSS.base_dataset_id
  left join vdt.value BM on V.attr_id = BM.attr_id and BM.dataset_id = @benchmark_id
  WHERE V.dataset_id = @dataset_id
  AND (A.attr_id IN (select id from @attributeIds))
  

END 
GO

commit transaction Version7
go

PRINT 'Database has been updated successfully to version 7'
set noexec off;



--------------------------------------------------- Version 8 update ------------------------------------------------------------------

declare @cur_version int = (select max(db_version) from vdt.config)
IF @cur_version >= 8
begin
  print 'Skipping database update to v8; already at version ' + cast(@cur_version as nvarchar)
  set noexec on
end

begin transaction Version8;
go

set xact_abort on;
set nocount on;

INSERT INTO vdt.config([db_version],[updated_on]) VALUES(8,  getdate())
go

alter procedure [vdt].[sp_get_capacity_chart]
	@site_name nvarchar(100),
	@dataset_id int,
    @user_id int
as
begin
set nocount on;

with data as (
select case when Location='Whaleback' and activity='OFH' then 'CD+Bene' else Activity end as [Activity],
  attribute, value, base_value
from vdt.data where attribute in ('Value Chain Tonnes', 'Internal Capacity', 'Stacked VCT')
  and location=@site_name and activity is not null and dataset_id=@dataset_id
)
,headroom as (
select T.Activity,
  case when C.value is null or C.value < T.value then 0 else C.value - T.value end as value,
  case when C.base_value is null or C.base_value < T.base_value then 0 else C.base_value - T.base_value end as base_value
from data T left join data C on T.Activity=C.Activity and C.Attribute='Internal Capacity'
where T.attribute='Value Chain Tonnes'
)
,polite as (
select activity, case attribute when 'Stacked VCT' then '' else attribute end as attribute, value, base_value
from data where attribute <> 'Internal Capacity'
union all
select activity, 'Headroom' as attribute, value, base_value from headroom
)
,consolidated as (
select 'Base Case' as series, activity as [group], attribute as component, base_value as value,
  case attribute when '' then 'transparent' when 'Value Chain Tonnes' then 'black' else 'rgb(216,222,231)' end as fill_color,
  case attribute when '' then 'empty' when 'Value Chain Tonnes' then 'solid' else 'top_dash' end as fill_pattern,
  case attribute when '' then 1 when 'Value Chain Tonnes' then 2 else 3 end as stack_order
from polite
union all
select 'Scenario' as series, activity as [group], attribute as component, value as value,
  case attribute when '' then 'transparent' when 'Value Chain Tonnes' then 'orange' else 'rgb(216,222,231)' end as fill_color,
  case attribute when '' then 'empty' when 'Value Chain Tonnes' then 'solid' else 'top_dash' end as fill_pattern,
  case attribute when '' then 1 when 'Value Chain Tonnes' then 2 else 3 end as stack_order
from polite
)
select * from consolidated
order by series, case [group]
  when 'Drill' then 1
  when 'Blast' then 2
  when 'Load' then 3
  when 'Haul' then 4
  when 'Beneficiation' then 5
  when 'OFH' then 6
  when 'CD+Bene' then 6
  when 'OFR' then 7
  when 'TLO' then 8
  else 7 end, stack_order
end
go

alter procedure [vdt].[sp_get_system_tonnes]
  @dataset_id int,
  @user_id int
as

with rawrawdata as (
select org_group, attribute,
  case when attribute='Value Chain Stock' then 0 else value end as value,
  case when attribute='Value Chain Stock' then 0 else base_value end as base_value
from vdt.data
where attribute in ('Value Chain Tonnes', 'Value Chain Stock', 'Headroom', 'Internal Capacity') and [function] is null
  and location is null
  and dataset_id=@dataset_id
  AND (select sec_level from vdt.[user] where [user_id] = @user_id) >=  attribute_sec_level
)
,rawdata as (
select * from rawrawdata where attribute <> 'Internal Capacity'
)
,capacity as (
  select org_group, sum(base_value) as base_capacity, sum(value) as capacity
  from rawrawdata where attribute in ('Internal Capacity', 'Value Chain Stock') group by org_group
)
,stockplustonnes as (
  select org_group, sum(base_value) as base_spt, sum(value) as spt
  from rawrawdata where attribute not in ('Headroom', 'Internal Capacity') group by org_group
)
,data as (
select D.org_group, D.attribute,
  case when D.attribute='Headroom' then
    case when S.base_spt > C.base_capacity then 0 else C.base_capacity - S.base_spt end
  else D.base_value end as base_value,
  case when D.attribute='Headroom' then
    case when S.spt > C.capacity then 0 else C.capacity - S.spt end
  else D.value end as value from rawdata D
  left join capacity C on D.org_group=C.org_group
  left join stockplustonnes S on D.org_group=S.org_group
)
,series as (
select 'Base Case' as series, org_group as [group], attribute as [component], base_value as value,
  case attribute when 'Headroom' then 3 when 'Value Chain Stock' then 2 else 1 end as stack_order,
  case attribute when 'Headroom' then 'rgb(216,222,231)' when 'Value Chain Tonnes' then 'black' else '#aaa' end as fill_color,
  '' as fill_pattern
from data
union all
select 'Scenario' as series, org_group as [group], attribute as [component], value as value,
  case attribute when 'Headroom' then 3 when 'Value Chain Stock' then 2 else 1 end as stack_order,
  case attribute when 'Headroom' then 'rgb(216,222,231)' when 'Value Chain Tonnes' then 'orange' else 'rgb(255,203,106)' end as fill_color,
  '' as fill_pattern
from data
)
select * from series
order by case [group]
  when 'Mines' then 1
  when 'Rail' then 2
  when 'Port' then 3
  else 4
end
go

alter procedure [vdt].[sp_get_port_capacity_chart]
	@dataset_id int,
	@user_id int
AS 
BEGIN 
  SET NOCOUNT ON;
  with rawdata as (
    select coalesce(location, 'Car Dumpers') as [process], attribute,
	case when attribute='Value Chain Stock' then 0 else value end as value,
	case when attribute='Value Chain Stock' then 0 else base_value end as base_value
    from vdt.data where attribute in ('Value Chain Tonnes', 'Value Chain Stock', 'Headroom', 'Internal Capacity')
    and  org_group='Port' and [function] is not null
	and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
    and dataset_id=@dataset_id
  )
  ,data as (
    select * from rawdata where attribute <> 'Internal Capacity'
  )
  ,capacity as (
  select process, sum(value) as capacity
  from rawdata where attribute in ('Value Chain Stock', 'Internal Capacity') group by process
  )
  ,production as (
    select process, sum(value) as value, sum(base_value) as base_value
    from data where attribute <> 'Headroom' group by process
  )
  ,points as (
    select * from data where attribute <> 'Headroom'
    union all
    select P.process, 'Capacity Delta' as attribute, C.capacity - P.value as value, C.capacity - P.base_value as base_value
    from production P inner join capacity C on P.process=C.process
  )
  ,result as (
    select 'Base Case' as series, process as [group], attribute as [component], base_value as value,
      case attribute when 'Value Chain Tonnes' then 1 when 'Value Chain Stock' then 2 else 3 end as stack_order,
      case attribute when 'Capacity Delta' then 'rgb(216,222,231)' when 'Value Chain Tonnes' then 'black' else '#aaa' end as fill_color,
      case attribute when 'Capacity Delta' then 'top_dash' else 'solid' end as fill_pattern
    from points
    union all
    select 'Scenario' as series, process as [group], attribute as [component], value as value,
      case attribute when 'Value Chain Tonnes' then 1 when 'Value Chain Stock' then 2 else 3 end as stack_order,
      case attribute when 'Capacity Delta' then 'rgb(216,222,231)' when 'Value Chain Tonnes' then 'orange' else 'rgb(255,203,106)' end as fill_color,
      case attribute when 'Capacity Delta' then 'top_dash' else 'solid' end as fill_pattern
    from points
  )
  select * from result
  order by series, case [group] when 'Car Dumpers' then 1 when 'Shiploaders' then 3 else 2 end
END
go

commit transaction Version8;
go

PRINT 'Database has been updated successfully to version 8'
set noexec off;



--------------------------------------------------- Version 9 update ------------------------------------------------------------------

declare @cur_version int = (select max(db_version) from vdt.config)
IF @cur_version >= 9
begin
  print 'Skipping database update to v9; already at version ' + cast(@cur_version as nvarchar)
  set noexec on
end

begin transaction Version9;
go

set xact_abort on;
set nocount on;

INSERT INTO vdt.config([db_version],[updated_on]) VALUES(9,  getdate())
go


ALTER procedure [staging].[sp_import_excel]
  @dataset_name nvarchar(200),
  @model_id int,
  @user_id int,
  @description nvarchar(1000),
  @category nvarchar(100),
  @data staging.ExcelImportType readonly
as
begin
  set nocount on;

  declare @results table (severity nvarchar(20), [message] nvarchar(200));
  declare @shouldCopyData bit = 0
  -- severity is one of: info, warning, error
  insert into @results (severity, [message]) values ('info', 'Starting data import');

/***********************SUMMARY************************** 
Temp tables that exist are the following:
• #Final_Calc_Dataset - The input sheet
• #MiningCostDrivers - Majority of the cost drivers for mining
• #MiningCostRates;   
• #retrieve_attribute_id;    
• #final_attribute;   
• #fulljoin;   
• #ProductionTime - calcs to convert the hours into percentages for production data 
• #CostRates  - Includes the cost rate calc
• #ActiveRakesCalc  
• #HaulAdjustments - Includes the backcals for haul adjustments.
• #LoadAdjustments - Includes the backcals for load adjustments.
• #PortCostDrivers - Includes the port back calculations
*/

select * into #Final_Calc_Dataset from @data;

-- set blanks to null
update #Final_Calc_Dataset set Org_Group = null where Org_Group = '' ;
update #Final_Calc_Dataset set Location = null where Location = '' ;
update #Final_Calc_Dataset set [Function] = null where [Function] = '' ;
update #Final_Calc_Dataset set Activity = null where Activity = '' ;
update #Final_Calc_Dataset set Equipment_Type = null where Equipment_Type = '' ;
update #Final_Calc_Dataset set Equipment = null where Equipment = '' ;
update #Final_Calc_Dataset set Workstream = null where Workstream = '' ;
update #Final_Calc_Dataset set Cost_Type = null where Cost_Type = '' ;
update #Final_Calc_Dataset set Product = null where Product = '' ;
update #Final_Calc_Dataset set Attribute = null where Attribute = '' ;

 --Table updates to conform to the attribute fact table and back calculations
update #Final_Calc_Dataset set Equipment = 'Drill Stock', Equipment_Type='Stockpile' where Equipment = 'Drill Inventory'  --- DKT
update #Final_Calc_Dataset set attribute = 'Tonnes blasted' where attribute = 'Tonnes of ore blasted' ;
update #Final_Calc_Dataset set Equipment_Type = 'Loader' where Equipment_Type = 'Loaders' ;
update #Final_Calc_Dataset set Equipment_Type = 'Excavator' where Equipment_Type = 'Excavators' ;
update #Final_Calc_Dataset set Equipment_Type = 'Truck' where Equipment_Type = 'Trucks' ;
update #Final_Calc_Dataset set Attribute = 'Closing stock' where  Attribute = 'Closing balance' and org_group = 'Port' ;
update #Final_Calc_Dataset set Attribute = 'L/F split' where  Attribute = 'L/F split ratio' ;
update #Final_Calc_Dataset set Attribute = 'Total movement tonnes' where	Attribute = 'Total movement'	and Activity is not null 
																		and Workstream is not null and Equipment_Type is not null 
																		and Equipment is not null ;
update #Final_Calc_Dataset set Attribute = 'Target Tonnes' where Attribute = 'Throughput'; 
update #Final_Calc_Dataset set Attribute = 'Average no. of drills' where Attribute = 'Average no of drills'; 
update #Final_Calc_Dataset set Attribute = 'Starved/blocked' where Attribute = 'Starved/block time'; 
update #Final_Calc_Dataset set Attribute = 'Unscheduled process downtime excl. starve/block' where Attribute = 'Unscheduled operating loss time (exclude starve/block time)'; 
update #Final_Calc_Dataset set Equipment_Type = 'CFR Ships' Where attribute = 'CFR ratio'
update #Final_Calc_Dataset set Equipment_Type = 'FOB Ships' Where attribute = 'FOB ratio'


-------------------######################################################################################################################-----------------------	
-------------------######################################################################################################################-----------------------
-------------------######################################################################################################################-----------------------
----------------------------------------------------------------------------Mining------------------------------------------------------------------------------

--=====================================================================INITIAL CHECKS===========================================================================

-- check if tonnes of ore blasted has missing values
insert into @results (severity, [message])
select 'warning', Location + ' tonnes blasted is zero or blank' from #Final_Calc_Dataset where Attribute='Tonnes blasted' and (Value is null or Value = 0)


-- check if drill stock has missing values
insert into @results (severity, [message])
select 'warning', Location + ' drill stock is zero or blank' from #Final_Calc_Dataset where Equipment = 'Drill Stock' and Attribute='Closing balance' and (Value is null or Value = 0)
;

--=====================================================================Calculations===========================================================================
With DrillDensity as (
			select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Density'  as 'Attribute', c.Unit, c.[Cost?] 
				,case when pb.[Value] = 0 then '0' else (pa.[Value]) / pb.[Value] end as  [Value]
				FROM #Final_Calc_Dataset C
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'') 
				inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.activity,'') = coalesce(pb.activity,'')
				where c.Activity = 'Drill' and pa.Attribute = 'Tonnes drilled' and pb.Attribute = 'Volume drilled' and c.Unit = 'tpa')
			-- drill inventory opening balance
	,DrillInventoryOpeningBal as		
			(select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], 'Drill Stock' as 'Equipment', c.Cost_Type, c.Product, 'Opening Balance'  as 'Attribute', c.Unit, c.[Cost?] 
				,c.Value+ pb.Value - (select sum(pa.Value))  as  [Value]--, c.Value ggsg, pb.value sdsfs, pa.value sdsa
				FROM #Final_Calc_Dataset C
				inner join #Final_Calc_Dataset pa on  coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') 
				inner join #Final_Calc_Dataset pb on  coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') 
				where c.Equipment = 'Drill Stock'  and pb.attribute='Tonnes blasted' and pa.attribute= 'Tonnes Drilled' and pa.Equipment like 'Drill Production%'
				group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.Unit, c.[Cost?],pa.Value, pb.Value, c.Value)
	,DisplacedVolume as 
			-- Displaced Volume
			(select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Displaced Volume'  as 'Attribute', c.Unit, c.[Cost?] 
				,case when c.value*pb.value = 0 then 0 else pa.[Value]/(c.[Value]*pb.[Value]) end as  [Value]
				FROM #Final_Calc_Dataset C
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'') 
				inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.activity,'') = coalesce(pb.activity,'')
				where pa.attribute='Volume drilled' and pb.attribute='Meters drilled per rig' and c.Attribute = 'Average no. of drills')
			-- cost explosive per kg
	,CostPerExplosive as		
			( select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost explosive per kg'  as 'Attribute', c.Unit, c.[Cost?] 
				,case when (pa.[Value]*pb.[Value]) = 0 then 0 else c.[Value]/(pa.[Value]*pb.[Value]) end as  [Value]
				--, c.value as llsk, pa.value sdjfm, pb.value sjjfs 
				FROM #Final_Calc_Dataset C
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'') 
				inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.activity,'') = coalesce(pb.activity,'')
				where pa.activity='Blast' and pa.attribute='Powder factor' and pb.attribute='Tonnes blasted' and c.cost_type = 'Consumables')
	,DieselPricePerLitreHaul as (
			-- Equipment Price per Litre, check values being imported - Haul
			select distinct  
			C.[Sheet], c.[Org_Group], C.Location, C.[function], 'Haul' as 'Activity', 'Operations' as 'Workstream', C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Diesel price per litre'  as 'Attribute', c.Unit, c.[Cost?]
					,case when (pa.[Value]=0 or pa.[Value] is NULL) then 1 else (c.[Value]/ pa.[Value]) end as  [Value]
					FROM #Final_Calc_Dataset c
					left join #Final_Calc_Dataset pa on pa.attribute='Litres consumed' and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'')
					where c.org_group = 'Mines' and  c.Cost_Type = 'Diesel' and c.Activity = 'Haul')
	,DieselPricePerLitreLoad as (
			-- Equipment Price per Litre, check values being imported - Load
			select distinct  
			C.[Sheet], c.[Org_Group], C.Location, C.[function], 'Load' as 'Activity', 'Operations' as 'Workstream', C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Diesel price per litre'  as 'Attribute', c.Unit, c.[Cost?]
					,case when (pa.[Value]=0 or pa.[Value] is NULL) then 1 else (c.[Value] / pa.[Value]) end as  [Value]
					FROM #Final_Calc_Dataset c
					left join #Final_Calc_Dataset pa on pa.attribute='Litres consumed' and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'')
					where c.org_group = 'Mines' and  c.Cost_Type = 'Diesel' and c.Activity = 'Load')
				-- Burn Rate, only applicable to load
	,BurnRateLitresGiven as (
			select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, 'Diesel' as Cost_Type, c.Product, 'Burn Rate'  as 'Attribute', c.Unit, c.[Cost?]					
					,case when pa.[Value] in ('0', NULL)  or pb.[Value] in ('0', NULL) 
					then c.[Value] else (c.[Value]/(pa.[Value]/pb.[Value])) end  as  [Value]
					FROM #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'')
					inner join #Final_Calc_Dataset pb on coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'')  and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.activity,'') = coalesce(pb.activity,'')
					where c.attribute='Litres consumed' and  pa.attribute='Total movement tonnes' and pb.attribute = 'Net rate' and c.Value <> 0)
	,BurnRateNoLitres as (
		select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, 'Diesel' as Cost_Type, c.Product, 'Burn Rate'  as 'Attribute', c.Unit, c.[Cost?]					
					,c.Value
					FROM #Final_Calc_Dataset c
					left join #Final_Calc_Dataset pa on pa.attribute = 'Litres consumed' and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'')
					where c.attribute='Variable cost' and c.cost_type='Diesel' and c.Activity in ('Load', 'Haul') and  (pa.attribute is null or pa.Value=0))
	,BurnRate as (
	  select * from BurnRateLitresGiven union all select * from BurnRateNoLitres)
	,RhTonnesperc as (
			-- rehandle tonnes %
			select distinct  c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RH tonnes %'  as 'Attribute', c.Unit, c.[Cost?]  
					,case when pa.[Value] in ('0', NULL)  
					then 0 else (c.[Value]/pa.[Value]) end  as  [Value]
					FROM #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'')
					where c.attribute='Rehandle movement' and  pa.attribute='Total movement tonnes'
			 )  

				 Select a.* into #MiningCostDrivers from (  
				select * from DrillDensity union all
				--select * from DrillInventoryOpeningBal union all
				select * from DisplacedVolume union all
				select * from CostPerExplosive union all
				select * from DieselPricePerLitreHaul union all
				select * from DieselPricePerLitreLoad union all
				select * from BurnRate union all
				select * from RhTonnesperc ) a;

--select * from #MiningCostDrivers
-- Check drill stock sizes, if density is greater than a particular value
-- investigate cost per kg explosives
-- if the sum of drill stock is larger than x% of total tonnes then flag
insert into @results (severity, [message])
select 'warning', Location + ' cost explosive per kg calculated to be less than $0.01' from #MiningCostDrivers where Attribute='Cost explosive per kg' and Value < 0.01
;

with FleetsWithDieselBurnRate as (
select Location, Activity, Equipment_Type, Equipment from #Final_Calc_Dataset
where activity in ('Load', 'Haul') and Cost_Type='Diesel' and Attribute='Variable Cost' and (Value is null or Value <> 0)
)
insert into @results (severity, [message])
select 'warning', F.Location + ' ' + F.Equipment + ' diesel burn rate/price not calculated - check tonnes'
from FleetsWithDieselBurnRate F left join #MiningCostDrivers C on F.Location=C.Location and F.Activity=C.Activity
and F.Equipment_Type=C.Equipment_Type and F.Equipment=C.Equipment and C.Attribute = 'Diesel price per litre'
where (C.Value is null or C.Value = 0)
;
--Net rate calcs & Checks
-- OEE BackCalcs


with CalendarTime as (
			-- Calendar Time hours
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Calendar time'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value as Value
							from #Final_Calc_Dataset c
							where c.Attribute = 'Calendar time' )

	, CalenderTimeNotAggregate as (
				-- Calendar Time not aggregated
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Calendar time Not Aggregate'  as 'Attribute', c.Unit, c.[Cost?]
							, case when ca.Value = 0 then 0 else c.Value/ca.Value end as Value
							from CalendarTime c
							inner join #Final_Calc_Dataset ca on c.Activity = ca.Activity and c.Equipment = ca.Equipment
							where c.Attribute = 'Calendar time' and ca.Attribute = 'Average number of units'
									) 

	,StandbyTime as (
			-- Standby Time
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Standby time'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
			from #Final_Calc_Dataset c
			where c.Attribute = 'Standby time' )

	,ScheduledEquipDowntime as (
			-- scheduled equipment downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Scheduled equipment downtime raw'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value as Value
							from #Final_Calc_Dataset c
							where c.Attribute = 'Scheduled equipment downtime' )-- select * from ScheduledEquipDowntime

	,UnscheduledEquipDowntime as (
			-- unscheduled equipment downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Unscheduled equipment downtime raw'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
						from #Final_Calc_Dataset c
						where c.Attribute = 'Unscheduled equipment downtime' )

	,ScheduledProcessDowntime as (
			-- Scheduled Process Downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Scheduled process downtime raw'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
						from #Final_Calc_Dataset c
						where c.Attribute = 'Scheduled process downtime' )
--  Unscheduled process downtime excl. starve/block
	,UnscheduledProcessDowntime_exclsb as (
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Unscheduled process downtime excl. starve/block raw'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value as Value
							from #Final_Calc_Dataset c
							where c.Attribute in ('Unscheduled process downtime', 'Unscheduled process downtime excl. starve/block')) 
-- Starve Block time
	,Starve_Block as (
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Starved/blocked time raw'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value as Value
							from #Final_Calc_Dataset c
							where c.Attribute in ('Starved/blocked', 'Starved/blocked time')) --select * from Starve_Block
-- Production Time
	,ProductionTime as ( select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Production Time'  as 'Attribute', c.Unit, c.[Cost?]
									,ISNULL(c.Value,0) - (ISNULL(ca.Value,0) + ISNULL(cb.Value,0) + ISNULL(cc.Value,0) + ISNULL(cd.Value,0) +  ISNULL(ce.Value,0) + ISNULL(cf.Value,0))  as Value
									--,c.Value ss,ca.Value sdas,cb.Value dsad,cc.Value fsaa,cd.Value fsa ,ce.Value fssa ,cf.Value faa
						from #Final_Calc_Dataset c
						left join StandbyTime							ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
						left join ScheduledEquipDowntime				cb on coalesce(c.org_group ,'') = coalesce(cb.org_group ,'') and coalesce(c.location  ,'') = coalesce(cb.Location  ,'') and coalesce(c.[function],'') = coalesce(cb.[function],'')  and coalesce(c.equipment,'') = coalesce(cb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cb.equipment_type,'') and coalesce(c.activity,'') = coalesce(cb.activity,'') and coalesce(c.workstream,'') = coalesce(cb.workstream,'')
						left join UnscheduledEquipDowntime				cc on coalesce(c.org_group ,'') = coalesce(cc.org_group ,'') and coalesce(c.location  ,'') = coalesce(cc.Location  ,'') and coalesce(c.[function],'') = coalesce(cc.[function],'')  and coalesce(c.equipment,'') = coalesce(cc.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cc.equipment_type,'') and coalesce(c.activity,'') = coalesce(cc.activity,'') and coalesce(c.workstream,'') = coalesce(cc.workstream,'')
						left join ScheduledProcessDowntime				cd on coalesce(c.org_group ,'') = coalesce(cd.org_group ,'') and coalesce(c.location  ,'') = coalesce(cd.Location  ,'') and coalesce(c.[function],'') = coalesce(cd.[function],'')  and coalesce(c.equipment,'') = coalesce(cd.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cd.equipment_type,'') and coalesce(c.activity,'') = coalesce(cd.activity,'') and coalesce(c.workstream,'') = coalesce(cd.workstream,'')
						left join UnscheduledProcessDowntime_exclsb		ce on coalesce(c.org_group ,'') = coalesce(ce.org_group ,'') and coalesce(c.location  ,'') = coalesce(ce.Location  ,'') and coalesce(c.[function],'') = coalesce(ce.[function],'')  and coalesce(c.equipment,'') = coalesce(ce.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ce.equipment_type,'') and coalesce(c.activity,'') = coalesce(ce.activity,'') and coalesce(c.workstream,'') = coalesce(ce.workstream,'')
						left join Starve_Block							cf on coalesce(c.org_group ,'') = coalesce(cf.org_group ,'') and coalesce(c.location  ,'') = coalesce(cf.Location  ,'') and coalesce(c.[function],'') = coalesce(cf.[function],'')  and coalesce(c.equipment,'') = coalesce(cf.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cf.equipment_type,'') and coalesce(c.activity,'') = coalesce(cf.activity,'') and coalesce(c.workstream,'') = coalesce(cf.workstream,'')
						where c.Attribute = 'Calendar time') --select * from ProductionTime
--LeverCalculation 
	,UnscheduledEquipDowntimeBc as (
			-- unscheduled equipment downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Unscheduled equipment downtime'  as 'Attribute','%' as 'Unit', c.[Cost?]
						, case when (c.Value + ca.Value) = 0 then 0 else c.Value / (c.Value + ca.Value) end as Value
						from #Final_Calc_Dataset c
						inner join ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
						where c.Attribute = 'Unscheduled equipment downtime' )  

	,ScheduledProcessDowntimeBc as (
			-- Scheduled Process Downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Scheduled process downtime'  as 'Attribute','%' as 'Unit', c.[Cost?]
						, case when (c.Value + ca.Value) = 0 then 0 else c.Value / (c.Value + ca.Value) end as Value
						from #Final_Calc_Dataset c
						inner join ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
						where c.Attribute = 'Scheduled process downtime' ) --select * from ScheduledProcessDowntimeBc

--  Unscheduled process downtime excl. starve/block
	,UnscheduledProcessDowntime_exclsbBc as (
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Unscheduled process downtime excl. starve/block'  as 'Attribute', '%' as 'Unit', c.[Cost?]
						, case when (c.Value + ca.Value) = 0 then 0 else c.Value / (c.Value + ca.Value) end as Value
						from #Final_Calc_Dataset c
						inner join ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
						where c.Attribute = 'Unscheduled process downtime excl. starve/block') --select * from UnscheduledProcessDowntime_exclsbBc
	,CalculatedNetRate as ( 
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Calculated Net Rate'  as 'Attribute', 't/hr' as 'Unit', c.[Cost?]
					, case when ca.Value = 0 then 0 else c.value / ca.Value end as Value
					from #Final_Calc_Dataset c
					inner join ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
					where c.Attribute = 'Total movement tonnes')
				
				
			select a.* into #ProductionTime from (
				select * from UnscheduledEquipDowntimeBc			union all
				select * from CalendarTime							union all
				select * from StandbyTime							union all
				select * from ScheduledEquipDowntime				union all
				select * from UnscheduledEquipDowntime				union all
				select * from ScheduledProcessDowntime				union all
				select * from UnscheduledProcessDowntime_exclsb		union all
				select * from ScheduledProcessDowntimeBc			union all
				select * from UnscheduledProcessDowntime_exclsbBc	union all
				select * from CalenderTimeNotAggregate				union all
				select * from CalculatedNetRate						union all
				select * from ProductionTime
				) a;

-- if a mismatch here - investigate
--Select count(*) from #Final_Calc_Dataset  where attribute not in ('Fixed Cost', 'Variable Cost') and attribute = 'Calendar Time';
--Select * from #ProductionTime where Attribute = 'Calendar Time';
-- check if calendar time is greater than a particular value
--select * from #ProductionTime;

insert into @results (severity, [message])
select 'error', Location + ' ' + Equipment + ' production time less than zero'
from #ProductionTime where Attribute='Production Time' and Value < 0

--- Checks to ensure net rate matches total movement 
-- Check this again - You need the raw net rate to check otherwise it makes no sense!!
insert into @results (severity, [message])
select case when V.variance > 0.2 then 'error' else 'warning' end,
  V.Location + ' ' + V.Equipment + ' variance between total movement and net rate x production time is ' + cast(cast(V.variance*100 as int) as nvarchar) + '%'
from (select a.Location, a.Activity, a.Equipment_Type, a.Equipment, a.Value as 'TM', b.value as 'NR', c.Value as 'PT',
  case
    when a.Value=b.Value*c.Value*d.Value then 0
	when a.Value <> b.Value*c.Value*d.Value and (a.Value = 0 or b.Value*c.Value*d.Value=0) then 1
	else (b.Value*c.Value*d.Value)/ a.Value - 1
  end as variance
  from #Final_Calc_Dataset a
  	inner join #Final_Calc_Dataset b on a.Location=b.Location and a.Activity=b.Activity and a.Equipment_Type=b.Equipment_Type and a.Equipment = b.Equipment
  	inner join #ProductionTime c on a.Location=c.Location and a.Activity=c.Activity and a.Equipment_Type=c.Equipment_Type and a.Equipment = c.Equipment
  	inner join #Final_Calc_Dataset d on a.Location=b.Location and a.Activity=d.Activity and a.Equipment_Type=d.Equipment_Type and a.Equipment = d.Equipment
  	where a.Attribute = 'Total movement tonnes' and b.Attribute = 'Net Rate' and c.Attribute = 'Production Time' and d.Attribute='Average number of units') V
  where V.variance > 0.05
  	;

-- Back-calculate RH rate, using either (a) given value, (b) RH tonnes / RH hours, or (c) assuming the same net rate as PM
with LoadHaul_RH_rate_given as (
  Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RH rate'  as 'Attribute', c.Unit, c.[Cost?]
    , c.Value
  from #Final_Calc_Dataset c where C.Activity in ('Load', 'Haul') and c.Attribute='RH rate')

, LoadHaul_RH_rate_ratio as (
  Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RH rate'  as 'Attribute', c.Unit, c.[Cost?]
    , case when pa.Value = 0 then 0 else c.Value / pa.Value end as Value
  from #Final_Calc_Dataset c
  inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
  where C.Activity in ('Load', 'Haul') and c.Attribute='Rehandle movement'
    and pa.Activity in ('Load', 'Haul') and pa.Attribute='Rehandle hours')

, LoadHaul_RH_rate_consol as (
  Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RH rate'  as 'Attribute', c.Unit, c.[Cost?]
    , coalesce(pa.Value, pb.Value, c.Value) as Value
  from #Final_Calc_Dataset c
  left join LoadHaul_RH_rate_given pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
  left join LoadHaul_RH_rate_ratio pb on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
  where C.Activity in ('Load', 'Haul') and c.Attribute='Net rate'
    and (pa.Value is null or pa.Activity in ('Load', 'Haul') and pa.Attribute='RH rate')
    and (pb.Value is null or pb.Activity in ('Load', 'Haul') and pa.Attribute='RH rate'))

select * into #LoadHaulRHRate from LoadHaul_RH_rate_consol;

--select * from #LoadHaulRHRate

-- Load adjustments
with TotalProductiveMovementLoad as ( 
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total Productive Movement'  as 'Attribute', c.Unit, c.[Cost?] 
				, sum(distinct c.value) - sum( distinct pa.value) as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Attribute = 'Total Movement tonnes' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Load'
					group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] 
					 ) --select * from TotalProductiveMovementLoad
					 --done
	
	,TotalRehandleMovementLoad as ( 
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total Rehandle Movement'  as 'Attribute', c.Unit, c.[Cost?]
					,  sum(distinct c.value)  as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where  c.Activity = 'Load'  and c.Attribute = 'Rehandle movement' 
					group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] 
					) --select * from TotalRehandleMovementLoad
					--done
	
	,ReportProductiveMovement as (
						Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, 'Report Productive Movement'  as 'Attribute', c.Unit, c.[Cost?]
								,   sum(distinct c.value)  as Value
				from #Final_Calc_Dataset c 
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
				where  c.Attribute = 'Productive movement' and c.Activity is null
				group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, c.Unit, c.[Cost?] ) --select * from ReportProductiveMovement
				--done	
	,ReportRehandleMovement as (
				select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, 'Report Rehandle Movement'  as 'Attribute', c.Unit, c.[Cost?]
								, c.value - pa.value as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where  c.Attribute = 'Total Movement' and pa.Attribute = 'Productive movement'
					)-- select * from ReportRehandleMovement 
					-- done
	
	,RateAdjLoad as (
				Select C.[Sheet], c.[Org_Group], C.Location, 'Adjusted Rate factor' as Attribute
					,case when sum(c.Value) = 0 then 0 else sum(distinct pa.value)/sum (distinct c.Value) end as Value
					--,c.Value sfsf, pa.Value sfffss
					from TotalProductiveMovementLoad c, ReportProductiveMovement pa 
					where c.Location = pa.Location
					group by  C.Location, c.Sheet, c.Org_Group
					)-- select * from RateAdjLoad  
					--done
	
	,RHTonnespercLoad as (
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Tonnes Movement Ratio'  as 'Attribute', c.Unit, c.[Cost?]
					, case when c.Value = 0 then 0 else pa.Value / c.Value end as Value--, pa.Value ssdsd, c.Value gddga
					from  #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'Total movement tonnes' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Load'
					
					) --select * from RHTonnespercLoad

	,RHhoursLoad as (
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Hours'  as 'Attribute', c.Unit, c.[Cost?]
					, case when c.Value = 0 then 0 else pa.Value / c.Value end as Value
					from  #LoadHaulRHRate c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'RH rate' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Load'
				) --select * from RHhoursLoad

	,ProductionHrs as ( -- Total Operating time
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Production Time'  as 'Attribute', c.Unit, c.[Cost?]
					, case when pa.Value = 0 then 0 else (c.Value) / (pa.Value) end as Value
					from  #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
				--	inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pb.cost_type,'') and coalesce(c.workstream,'') = coalesce(pb.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'Total movement tonnes' and pa.Attribute = 'Net rate' --and c.Activity = 'Load' and pb.Attribute = 'Average number of units' and pb.Activity = 'Load'
						) --select * from ProductionHrs

	,PMRateLoad as ( 
				select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'PM rate'  as 'Attribute', c.Unit, c.[Cost?]
					, case when pa.Value - pb.Value = 0 then 0 else c.Value/(pa.Value - pb.Value) end as Value
					from TotalProductiveMovementLoad c
					inner join ProductionHrs pa  on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					inner join RHhoursLoad pb on		coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pb.cost_type,'') and coalesce(c.workstream,'') = coalesce(pb.workstream,'')
					where c.Attribute = 'Total Productive Movement' and pa.Attribute = 'Production Time' and pb.Attribute = 'Rehandle Hours')
					--select * from PMRateLoad
					-- Done
	,RHRateLoad as (Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Rate %'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
					from #LoadHaulRHRate c
					where c.Activity = 'Load' and c.Attribute = 'RH rate')  --select * from RHRateLoad
  
	-- backcalcs starting
	,PMRateAdj_LoadBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted PM rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from PMRateLoad c, RateAdjLoad b 
							where c.Location = b.Location and b.Org_Group = c.Org_Group )  -- select * from PMRateAdj_LoadBc
	
	,RHRateAdj_LoadBc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted RH rate'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*b.Value as Value
								from RHRateLoad c, RateAdjLoad b
								where c.Location = b.Location)  --select * from RHRateAdj_LoadBc
	
	,ProductiveTonnes_LoadBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Productive Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*(b.Value -d.Value) as Value
									from PMRateAdj_LoadBc c
									inner join ProductionHrs b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
									inner join RHhoursLoad d on coalesce(c.Activity, '') = coalesce(d.Activity,'') and coalesce(c.org_group ,'') = coalesce(d.org_group ,'') and coalesce(c.location  ,'') = coalesce(d.Location  ,'') and coalesce(c.[function],'') = coalesce(d.[function],'') and coalesce(c.equipment,'') = coalesce(d.equipment,'') and coalesce(c.equipment_type,'') = coalesce(d.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(d.cost_type,'') and coalesce(c.workstream,'') = coalesce(d.workstream,'')
									where c.Location = b.Location and b.Attribute = 'Production Time' and c.Attribute = 'Adjusted PM rate' and d.Attribute = 'Rehandle Hours') --select * from ProductiveTonnes_LoadBc
	
	,RehandleTonnes_LoadBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Rehandle Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
									, c.Value*b.Value as Value
									from RHRateAdj_LoadBc c
									inner join RHhoursLoad b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
									where c.location = b.location) --select * from RehandleTonnes_LoadBc
	
	,TotalRHTonnes_LoadBc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Total RH Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*b.Value as Value
								from RHRateAdj_LoadBc c
								inner join RHhoursLoad b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
								) --select * from TotalRHTonnes_LoadBc
	, TotalRHPerMineLoad as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, NULL as [Equipment_type], 'NULL' As equipment, c.Cost_Type, c.Product, 'Adjusted Total RH Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, sum(c.Value*b.Value) as Value
								from RHRateAdj_LoadBc c
								inner join RHhoursLoad b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
								group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, c.Unit, c.[Cost?]
								
								) -- select * from TotalRHPerMine

	,TargetTonnes_Bc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Target Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value + b.Value as Value
							from ProductiveTonnes_LoadBc c
							inner join RehandleTonnes_LoadBc b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
							where c.Location = b.Location)  --select * from TargetTonnes_Bc
	

	/*Additional rates to be added to both load & haul*/

	,Load_AdjDesignRate as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Design Rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjLoad b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Design Rate' and c.Activity = 'Load') --select * from Load_AdjDesignRate

	,Load_AdjNetRate as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Net Rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjLoad b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Net Rate' and c.Activity = 'Load') --select * from Load_AdjDesignRate

	,Adj_TM as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total movement tonnes'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjLoad b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Total Movement tonnes' and c.Activity = 'Load') --select * from Adj_TM where Location = 'Whaleback'

	,Adj_RM as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle movement'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjLoad b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Rehandle movement' and c.Activity = 'Load') --select * from Adj_RM

	,Adj_RR as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RH rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #LoadHaulRHRate c
							inner join RateAdjLoad b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'RH rate' and c.Activity = 'Load') --select * from Adj_RM

	,Rehandle_Other as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], b.Activity, 'Operations' as Workstream, NULL as equipment_type, NULL as equipment, NULL as Cost_Type, NULL as Product, 'Rehandle Other'  as 'Attribute', c.Unit, c.[Cost?] 
							,c.Value - b.Value as Value
							from  (select sum(value) as value, Activity, Location as Location from Adj_RM where activity = 'Load' group by Location, activity ) b
							inner join ReportRehandleMovement c on coalesce(c.location  ,'') = coalesce(b.Location  ,'') 
							where c.Location = b.Location 
					)  --select * from Rehandle_Other


			select a.* into #LoadAdjustments from (
			select * from Load_AdjDesignRate union all
			select * from Load_AdjNetRate union all
			select * from Adj_TM union all
			select * from Adj_RM union all
			select * from Adj_RR union all
			select * from Rehandle_Other) a;

-- Mismatch - Investigate
--Select count(distinct Equipment)*5 from #Final_Calc_Dataset where activity = 'Load' and attribute not in ('Fixed Cost', 'Variable Cost')
-- ensure that the total productive movement has values
--Select * from #LoadAdjustments where equipment = 'WB LBHR 996 EXC'

-- Haul adjustments
with TotalProductiveMovementHaul as ( 
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total Productive Movement'  as 'Attribute', c.Unit, c.[Cost?] 
				, sum(distinct c.value) - sum( distinct pa.value) as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Attribute = 'Total Movement tonnes' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Haul'
					group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] 
					 ) --select * from TotalProductiveMovementHaul
					 --done
	
	,TotalRehandleMovementHaul as ( 
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total Rehandle Movement'  as 'Attribute', c.Unit, c.[Cost?]
					,  sum(distinct c.value)  as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where  c.Activity = 'Haul'  and c.Attribute = 'Rehandle movement' 
					group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] 
					) --select * from TotalRehandleMovementHaul
					--done
	
	,ReportProductiveMovement as (
						Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, 'Report Productive Movement'  as 'Attribute', c.Unit, c.[Cost?]
								,   sum(distinct c.value)  as Value
				from #Final_Calc_Dataset c 
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
				where  c.Attribute = 'Productive movement' and c.Activity is null
				group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, c.Unit, c.[Cost?] ) --select * from ReportProductiveMovement
				--done	
	,ReportRehandleMovement as (
				select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, 'Report Rehandle Movement'  as 'Attribute', c.Unit, c.[Cost?]
								, c.value - pa.value as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where  c.Attribute = 'Total Movement' and pa.Attribute = 'Productive movement'
					)-- select * from ReportRehandleMovement 
					-- done
	
	,RateAdjHaul as (
				Select C.[Sheet], c.[Org_Group], C.Location, 'Adjusted Productive Movement Rate factor' as Attribute
					,case when sum(c.Value) = 0 then 0 else sum(distinct pa.value)/sum (distinct c.Value) end as Value
					--,c.Value sfsf, pa.Value sfffss
					from TotalProductiveMovementHaul c, ReportProductiveMovement pa 
					where c.Location = pa.Location
					group by  C.Location, c.Sheet, c.Org_Group
					) --select * from RateAdjPMHaul  
					--done
	
	,RHTonnespercHaul as (
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Tonnes Movement Ratio'  as 'Attribute', c.Unit, c.[Cost?]
					, case when c.Value = 0 then 0 else pa.Value / c.Value end as Value--, pa.Value ssdsd, c.Value gddga
					from  #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'Total movement tonnes' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Haul'
					
					) --select * from RHTonnespercHaul

	,RHhoursHaul as (
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Hours'  as 'Attribute', c.Unit, c.[Cost?]
					, case when c.Value = 0 then 0 else pa.Value / c.Value end as Value
					from  #LoadHaulRHRate c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'RH rate' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Haul'
				) --select * from RHhoursHaul

	,ProductionHrs as ( -- Total Operating time
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Production Time'  as 'Attribute', c.Unit, c.[Cost?]
					, case when pa.Value = 0 then 0 else (c.Value) / (pa.Value) end as Value
					from  #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
				--	inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pb.cost_type,'') and coalesce(c.workstream,'') = coalesce(pb.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'Total movement tonnes' and pa.Attribute = 'Net rate' --and c.Activity = 'Haul' and pb.Attribute = 'Average number of units' and pb.Activity = 'Haul'
						) --select * from ProductionHrs

	,PMRateHaul as ( 
				select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'PM rate'  as 'Attribute', c.Unit, c.[Cost?]
					, case when pa.Value - pb.Value = 0 then 0 else c.Value/(pa.Value - pb.Value) end as Value
					from TotalProductiveMovementHaul c
					inner join ProductionHrs pa  on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					inner join RHhoursHaul pb on		coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pb.cost_type,'') and coalesce(c.workstream,'') = coalesce(pb.workstream,'')
					where c.Attribute = 'Total Productive Movement' and pa.Attribute = 'Production Time' and pb.Attribute = 'Rehandle Hours')
					--select * from PMRateHaul
					-- Done
	,RHRateHaul as (Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Rate %'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
					from #LoadHaulRHRate c
					where c.Activity = 'Haul' and c.Attribute = 'RH rate')  --select * from RHRateHaul
  
	-- backcalcs starting
	,PMRateAdj_HaulBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted PM rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from PMRateHaul c, RateAdjHaul b 
							where c.Location = b.Location and b.Org_Group = c.Org_Group )  -- select * from PMRateAdj_HaulBc
	
	,RHRateAdj_HaulBc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted RH rate'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*b.Value as Value
								from RHRateHaul c, RateAdjHaul b
								where c.Location = b.Location)  --select * from RHRateAdj_HaulBc
	
	,ProductiveTonnes_HaulBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Productive Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*(b.Value -d.Value) as Value
									from PMRateAdj_HaulBc c
									inner join ProductionHrs b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
									inner join RHhoursHaul d on coalesce(c.Activity, '') = coalesce(d.Activity,'') and coalesce(c.org_group ,'') = coalesce(d.org_group ,'') and coalesce(c.location  ,'') = coalesce(d.Location  ,'') and coalesce(c.[function],'') = coalesce(d.[function],'') and coalesce(c.equipment,'') = coalesce(d.equipment,'') and coalesce(c.equipment_type,'') = coalesce(d.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(d.cost_type,'') and coalesce(c.workstream,'') = coalesce(d.workstream,'')
									where c.Location = b.Location and b.Attribute = 'Production Time' and c.Attribute = 'Adjusted PM rate' and d.Attribute = 'Rehandle Hours') --select * from ProductiveTonnes_HaulBc
	
	,RehandleTonnes_HaulBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Rehandle Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
									, c.Value*b.Value as Value
									from RHRateAdj_HaulBc c
									inner join RHhoursHaul b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
									where c.location = b.location) --select * from RehandleTonnes_HaulBc
	
	,TotalRHTonnes_HaulBc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Total RH Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*b.Value as Value
								from RHRateAdj_HaulBc c
								inner join RHhoursHaul b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
								) --select * from TotalRHTonnes_HaulBc
	, TotalRHPerMineHaul as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, NULL as [Equipment_type], 'NULL' As equipment, c.Cost_Type, c.Product, 'Adjusted Total RH Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, sum(c.Value*b.Value) as Value
								from RHRateAdj_HaulBc c
								inner join RHhoursHaul b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
								group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, c.Unit, c.[Cost?]
								
								) -- select * from TotalRHPerMine

	,TargetTonnes_Bc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Target Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value + b.Value as Value
							from ProductiveTonnes_HaulBc c
							inner join RehandleTonnes_HaulBc b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
							where c.Location = b.Location)  --select * from TargetTonnes_Bc
	
	
	/*Additional rates to be added to both load & haul*/
	,Haul_AdjDesignRate as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type , c.Product , 'Design Rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjHaul b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Design Rate' and c.Activity = 'Haul') --select * from Haul_AdjDesignRate

	,Haul_AdjNetRate as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type , c.Product , 'Net Rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjHaul b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Net Rate' and c.Activity = 'Haul') --select * from Haul_AdjDesignRate

	,Adj_TM as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total movement tonnes'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjHaul b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Total Movement tonnes' and c.Activity = 'Haul') --select * from Adj_TM where Location = 'Whaleback'

	,Adj_RM as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product , 'Rehandle movement'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjHaul b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Rehandle movement' and c.Activity = 'Haul') --select * from Adj_RM

	,Adj_RR as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product , 'RH rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #LoadHaulRHRate c
							inner join RateAdjHaul b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'RH rate' and c.Activity = 'Haul') --select * from Adj_RM

	,Rehandle_Other as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], b.Activity, 'Operations' as Workstream, NULL as equipment_type, NULL as equipment, NULL as Cost_Type, NULL as Product, 'Rehandle Other'  as 'Attribute', c.Unit, c.[Cost?] 
							,c.Value - b.Value as Value
							from  (select sum(value) as value, Activity, Location as Location from Adj_RM where activity = 'Haul' group by Location, activity ) b
							inner join ReportRehandleMovement c on coalesce(c.location  ,'') = coalesce(b.Location  ,'') 
							where c.Location = b.Location 
					)  --select * from Rehandle_Other


			select a.* into #HaulAdjustments from (
			select * from Haul_AdjDesignRate	union all
			select * from Haul_AdjNetRate union all
			select * from Adj_TM union all
			select * from Adj_RM union all
			select * from Adj_RR union all
			select * from Rehandle_Other) a;

-- Patch the data set with the load/haul calcs
delete from #Final_Calc_Dataset where Activity in ('Load', 'Haul') and Attribute in ('Design rate', 'Net rate', 'Total movement', 'Total movement tonnes', 'Rehandle movement', 'RH rate', 'Rehandle hours')
insert into #Final_Calc_Dataset select * from #LoadAdjustments
insert into #Final_Calc_Dataset select * from #HaulAdjustments

-- Mismatch - Investigate
--Select count(distinct Equipment)*5 from #Final_Calc_Dataset where activity = 'Haul' and attribute not in ('Fixed Cost', 'Variable Cost')
--Select * from #HaulAdjustments			

insert into @results (severity, [message])
select 'error', Location + ' ' + Equipment + ' calculated target tonnes < 0'
from #HaulAdjustments where Attribute='Target Tonnes' and Value < 0
;

-- Calculate mining stockpile opening balances from closing balances
with ClosingBalance as (
select * from #Final_Calc_Dataset where [Function]='Mining' and Attribute='Closing balance')

, MiningActivity as (
select Location, coalesce(Activity, 'LoadHaul') as Activity, sum(Value) as Value from #Final_Calc_Dataset
where Activity in ('Drill', 'Blast') and Attribute in ('Tonnes Drilled', 'Tonnes Blasted') or [Function]='Mining' and Activity is null and Attribute='Productive Movement'
group by Location, Activity)

, OpeningBalances as (
select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, 'Stockpile' as Equipment_type, C.equipment, C.Cost_Type, C.Product, 'Opening balance' as 'Attribute', c.Unit, c.[Cost?]
  , case when C.Value - I.Value + O.Value < 0 then 0 else C.Value - I.Value + O.Value end as Value
from ClosingBalance C
inner join MiningActivity I on C.Location=I.Location
inner join MiningActivity O on C.Location=O.Location
where (C.Equipment='Drill stock' and I.Activity = 'Drill' and O.Activity='Blast')
  or (C.Equipment='Blast inventory' and I.Activity = 'Blast' and O.Activity='LoadHaul')
)

insert into #Final_Calc_Dataset select * from OpeningBalances;

-- Processing stocks are a little harder because of the hub model

with ClosingBalance as (
select * from #Final_Calc_Dataset where [Function]='Processing' and Attribute='Closing balance')

, LumpFines as (
select A.Location, A.Value * B.Value as Fines, A.Value * (1 - B.Value) as Lump from #Final_Calc_Dataset A, #Final_Calc_Dataset B
where A.Equipment='Bene Plant' and A.Attribute in ('Throughput', 'Target tonnes')
  and A.Equipment='Bene Plant' and B.Attribute='Bypass ratio')

, Throughput as (
select Location, [Function], [Activity], [Equipment], [Value]
from  #Final_Calc_Dataset
where Attribute in ('Throughput', 'Target tonnes') and [Function]='Processing' and Equipment <> 'Bene Plant'
union all
select H.Location, H.[Function], H.[Activity], H.[Equipment], H.[Value] / (1 + S.[Value])
from  #Final_Calc_Dataset H
inner join #Final_Calc_Dataset S on H.Location=S.Location
where H.[Function]='Mining' and H.Attribute='Productive Movement' and H.Activity is null
  and S.[Function]='Mining' and S.Attribute='Stripping Ratio'
union all
select Location, 'Processing' as [Function], 'Beneficiation' as [Activity], 'Bene Plant Lump' as Equipment, Lump as value from LumpFines
union all
select Location, 'Processing' as [Function], 'Beneficiation' as [Activity], 'Bene Plant Fines' as Equipment, Fines as value from LumpFines
)

, Routing as (
select Location,
  case
    when [Location]='Whaleback' and Equipment in ('CR2', 'Crusher 9', 'OHP 5') then 'Pre-Crushing Stockpile'
	when [Location]='Whaleback' and Equipment='OHP 4' then 'OFH Stockpile'
	when [Location]='Whaleback' and Equipment='Car Dumper' then null -- 'Orebody'
	when [Equipment] in ('OB24 TLO', 'OB18 TLO') then 'OFH Stockpile'
	when Activity='TLO' then 'OFR Stockpile'
	when Activity in ('OFR', 'OFH') then 'Pre-Crushing Stockpile'
	else null
  end as [Source],
  case
    when [Function]='Mining' then 'Pre-Crushing Stockpile'
	when Location='Whaleback' and Equipment in ('CR2', 'Car Dumper', 'Bene Plant Lump') then 'OFH Stockpile'
	when Location='Whaleback' and Equipment in ('Crusher 9', 'OHP 5', 'OHP 4', 'Bene Plant Fines') then 'OFR Stockpile'
	--when Activity='TLO' and Equipment in ('OB18 TLO', 'OB24 TLO') then 'Orebody'
	when Activity='OFH' then 'OFH Stockpile'
	when Activity='OFR' then 'OFR Stockpile'
  end as Destination, Activity, Equipment
, Value
from Throughput
)

, Outflow as (
select Location, [Source], sum(Value) as Outflow
from Routing group by Location, [Source]
)

, Inflow as (
select Location, [Destination], sum(Value) as Inflow
from Routing group by Location, [Destination]
)

, OpeningBalances as (
select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.Equipment_type, C.equipment, C.Cost_Type, C.Product, 'Opening balance' as 'Attribute', c.Unit, c.[Cost?]
 , C.Value + coalesce(O.Outflow, 0) - coalesce(I.Inflow, 0) as Value
from ClosingBalance C
left join Inflow I on C.Location=I.Location and C.Equipment=I.[Destination]
left join Outflow O on C.Location=O.Location and C.Equipment=O.[Source]
)

insert into #Final_Calc_Dataset select * from OpeningBalances;

-------------------######################################################################################################################-----------------------	
-------------------######################################################################################################################-----------------------
-------------------######################################################################################################################-----------------------
--------------------------------------------------Rail----------------------------------------------------------------------------------------------------------

declare @daysinyear int;

select @daysinyear=Value from #Final_Calc_Dataset where Attribute='Days in year';
if @daysinyear is null set @daysinyear=365;

--Re rail recon calculations
With RailInvTransit as (select distinct  NULL as [Sheet], NULL as [Org_Group], null as Location, null as [function], null as Activity, null as Workstream, null as [Equipment_type], null as equipment, null as Cost_Type, null as Product, 'Rail inventory transit' as Attribute, null as  Unit, null as [Cost?]
							 , sum(distinct b.value) - sum(distinct a.Value) as Value
							from #Final_Calc_Dataset a , #Final_Calc_Dataset b
						where a.Activity = 'TLO' and a.Attribute = 'Target tonnes' and a.equipment not in ('OB24 TLO','OB18 TLO')
						and b.Org_Group = 'Port' and b.Activity = 'Inflow' and b.Attribute = 'Target Tonnes') --select * from RailInvTransit

	,CurrentActiveRakes as (
					select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] , c.Value as Value
						from #Final_Calc_Dataset c
						where c.[Function] = 'Mainline' and c.Attribute = 'Active Rakes')

	, TotalOOR as (
					select C.[Sheet], c.[Org_Group], NULL as Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Total OOR' as Attribute, c.Unit, c.[Cost?] 
							, sum(c.Value) as Value
						from #Final_Calc_Dataset c
						where c.Activity = 'TLO' and c.Attribute = 'Target Tonnes' and c.Equipment not in ('OB24 TLO','OB18 TLO')
						group by C.[Sheet], c.[Org_Group],  C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] ) --select * from TotalOOR

	--Throughput will be 'target tonnes'
	, OORbyLocation as (
					select C.[Sheet], c.[Org_Group], c.Location as Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] 
							, sum(c.Value) as Value
						from #Final_Calc_Dataset c
						where c.Activity = 'TLO' and c.Attribute = 'Target Tonnes' and c.Equipment not in ('OB24 TLO','OB18 TLO')
						group by C.[Sheet],c.Location, c.[Org_Group],  C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] ) --select * from OORbyLocation
	, MaximumTonnes as (
					select C.[Sheet], c.[Org_Group], c.Location as Location, NULL as [function], NULL as Activity, NULL as Workstream, NULL as [Equipment_type], NULL as Equipment, NULL as Cost_Type, null as Product, 'Maximum tonnes constraint' as Attribute, c.Unit, c.[Cost?] 
							, 100000000 as Value
						from #Final_Calc_Dataset c
						where c.Activity = 'TLO' and c.Attribute = 'Target Tonnes' and c.Equipment not in ('OB24 TLO','OB18 TLO')
						 ) 
						--select * from MaximumTonnes

	, OORbyLocationAndEquip as (
				select C.[Sheet], c.[Org_Group], c.Location as Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment, c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] 
						, sum(c.Value) as Value
					from #Final_Calc_Dataset c
					where c.Activity = 'TLO' and c.Attribute = 'Target Tonnes' and c.Equipment not in ('OB24 TLO','OB18 TLO')
					group by C.[Sheet],c.Location, c.[Org_Group],  C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?], c.Equipment ) --select * from OORbyLocationAndEquip

	, TimeAtMine as (
					select C.[Sheet], c.[Org_Group], c.Location, 'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], c.Equipment, c.Cost_Type, c.Product, 'Time at mine' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
					,sum(c.value) as Value 
						from #Final_Calc_Dataset c
						where c.Attribute = 'queue to load' or c.Attribute = 'Pre Load' or c.Attribute = 'Train Load' or c.Attribute = 'Post Load'
								or c.Attribute = 'mine to mine queue' or c.Attribute = 'mine 1 pre load' or c.Attribute = 'mine 1 train load'
								or c.Attribute = 'mine 1 to mine 2' or c.Attribute = 'mine 2 train load' or c.Attribute = 'mine 2 post load'
						group by C.[Sheet], c.Location, c.[Org_Group], C.Activity, C.Workstream, C.[Equipment_type],c.Equipment, c.Cost_Type, c.Product, c.[Cost?] )

	, TotalPortInflow as (
					select C.[Sheet], c.[Org_Group], c.Location, 'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Port Ore' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
							, sum(c.value) as Value 
					from #Final_Calc_Dataset c
						where c.Org_Group = 'Port' and c.Activity = 'Inflow' and c.Attribute = 'Target Tonnes'
						group by C.[Sheet], c.[Org_Group], c.Location,  C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?] 
						)

	, NoOfOreCars as (
						select C.[Sheet], c.[Org_Group], c.Location, 'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'No. of Ore Cars' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
						, c.Value as Value
							from #Final_Calc_Dataset c
							where c.org_group = 'Rail' and c.attribute in ('No of ore cars', 'No. of ore cars') and c.[function] = 'mainline'
						) 

	, OreCarTonnage as (
						select C.[Sheet], c.[Org_Group], c.Location,'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Ore car tonnage' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
						, c.Value as Value
							from #Final_Calc_Dataset c
							where c.org_group = 'Rail' and c.attribute in ('Ore car tonnage') and c.[function] = 'mainline'
						) 

	, RakeTonnes as (
						select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Rake tonnes' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
						, c.Value*ca.Value as Value
							from OreCarTonnage c
							inner join NoOfOreCars ca on coalesce(c.Activity, '') = coalesce(ca.Activity,'') and coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.[function]  ,'') = coalesce(ca.[function]  ,'') 
								
						) 

	, DepPerDay as ( --match the max departures per day to this
						select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Departures per Day' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
						, case when ca.Value = 0 then 0 else c.Value/ca.Value/@daysinyear end as Value
							from OORbyLocation c
							inner join RakeTonnes ca on coalesce(c.Location, '') = coalesce(ca.Location,'') 
								
						) --select * from DepPerDay

	, ToFromJunction as (select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'To/From Junction' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								, sum(c.Value) as Value
								from #Final_Calc_Dataset c
									where c.org_group = 'Rail' and  c.attribute = 'Junction to mine queue' or c.attribute = 'Mine queue to junction'
								group by C.[Sheet], c.[Org_Group], c.Location, C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?], c.[Function] ) 

	, CarDumperWeight as (	
						select  C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'CD Weight' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								,case when sum(b.Value) = 0 then 0 else sum(c.Value)/sum(b.Value) end as Value
								from #Final_Calc_Dataset c, (select sum(value) as Value from #Final_Calc_Dataset  where Equipment in ('CD1', 'CD2','CD3','CD4','CD5') and Attribute = 'Target Tonnes') b
									where c.org_group = 'Port' and c.Equipment in ('CD1', 'CD2','CD3','CD4','CD5') and c.Attribute = 'Target Tonnes'
								group by C.[Sheet], c.[Org_Group], c.Location, C.Activity, C.Workstream, C.[Equipment_type], c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.[Function] )
								--select * from CarDumperWeight
									
	, CarDumperCycle as (
						select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'CD Cycle' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								, sum(c.Value) as Value
								from #Final_Calc_Dataset c
									where  c.Attribute in ('Queue to Dump', 'Dump')
								group by C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.[Cost?] 
							) --select * from CarDumperCycle

	, CDCycleContribution as (
						select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'CD Cycle Contribution' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								, sum(c.Value)*sum(ca.Value) as Value
								from CarDumperCycle c
								inner join CarDumperWeight ca on coalesce(c.equipment, '') =  coalesce(ca.equipment, '')
								group by C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.[Cost?] 
							) --select * from CycleContribution

	, NelsonFuncicaneWeight as (
						select C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment , c.Cost_Type, c.Product, 'NF Weight' as 'Attribute', '%' as 'unit', c.[Cost?] 
								,sum(c.Value) as Value 
								from
								(
										select  a.[Sheet], a.[Org_Group], a.[Function], a.Activity, a.Workstream, a.[Equipment_type], a.Equipment , a.Cost_Type, a.Product, a.[Cost?]
											,case when a.Equipment in ('CD1','CD2', 'CD3') then 'Nelson Point' else 'Finucane Island' end as Location, 'CD Weight' as Reference
											,case when sum(b.Value) = 0 then 0 else  sum(a.Value)/sum(b.Value) end as Value
											from #Final_Calc_Dataset a, (select sum(value) as Value from #Final_Calc_Dataset  where Equipment in ('CD1', 'CD2','CD3','CD4','CD5') and Attribute = 'Target Tonnes') b
											where a.org_group = 'Port' and  a.Equipment in ('CD1', 'CD2','CD3','CD4','CD5') and a.Attribute = 'Target Tonnes'
											group by a.Equipment, a.[Sheet], a.[Org_Group], a.Location, a.[Function], a.Activity, a.Workstream, a.[Equipment_type], a.Equipment , a.Cost_Type, a.Product, a.[Cost?])  c 
									group by  C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type] , c.Cost_Type, c.Product,  c.[Cost?] 
									)
									--select * from NelsonFuncicaneWeight
	, NFCycle as (
					select C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment , c.Cost_Type, c.Product, 'NF Cycle' as 'Attribute', '%' as 'unit', c.[Cost?] 
							,  sum(c.Value) as Value
							from #Final_Calc_Dataset c
								where   c.Attribute in ( 'Port to dumper queue' ,'Post dump')
								group by C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type] , c.Cost_Type, c.Product, c.[Cost?] ) --select * from NFCycle
								--select * from #Final_Calc_Dataset where attribute like '%dump%'
	, NFCycleContribution as ( 
								select C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment , c.Cost_Type, c.Product, 'NFCycle Contribution' as 'Attribute', '%' as 'unit', c.[Cost?] 
								,  sum(c.Value)*sum(ca.Value) as Value
								from NFCycle c
								inner join NelsonFuncicaneWeight ca on ca.Location = c.Location
								group by C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?] 
									) --select * from NFCycleContribution

				, TimeAtPort as ( select c.value + ca.value as value
								from (select sum(value) as value from NFCycleContribution) c, (select sum(value) as value from  CDCycleContribution) ca
										) --select * from TimeAtPort
					
				, RestOfCycle as ( select c.value+ca.value as value
						from 
							(select sum(value) as value from #Final_Calc_Dataset where Attribute in ('Empty travel to junction','Loaded travel from junction')) c,
							TimeAtPort ca) --select * from RestOfCycle
					--select * from #Final_Calc_Dataset where attribute like '%loaded%'
				, TotalDepPerDay as ( select sum(value) as Value from DepPerDay)
					
				, CycleTime as (select C.[Sheet], c.[Org_Group], cb.Location, 'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], c.Equipment, c.Cost_Type, c.Product, 'Cycle Time' as 'Attribute', 'hr' as 'unit', c.[Cost?]
									,c.value + cb.Value + ca.value as value
 									from ToFromJunction c,
									(select case when a.Location in ('Whaleback','Jimblebar','Eastern Ridge') then 'east' else 'west' end as Region, a.Location,a.Value from TimeAtMine a) cb
									, RestOfCycle ca
									where c.Location = cb.Region) 	
														
	,AvgRakeTons as (
						select C.[Sheet], c.[Org_Group], NULL as location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Avg Rake Tonnes' as 'Attribute', 't' as 'unit', c.[Cost?]
						,case when cb.Value = 0 then 0 else sum(c.Value*ca.value)/cb.Value end as value
						from TotalDepPerDay cb, RakeTonnes c
						inner join DepPerDay ca on c.Location = ca.Location
						group by C.[Sheet], c.[Org_Group], c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?], cb.Value
						) --select * from AvgRakeTons

	,AvgTimeAtMine as (
						select C.[Sheet], c.[Org_Group], NULL as location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Avg Time at Mine' as 'Attribute', 't' as 'unit', c.[Cost?]
								,case when cb.Value = 0 then 0 else sum(c.Value*ca.value)/cb.Value end as value
								from TotalDepPerDay cb, TimeAtMine c
								inner join DepPerDay ca on c.Location = ca.Location
								group by C.[Sheet], c.[Org_Group], c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?], cb.Value
							) --select * from AvgTimeAtMine	

	,AvgToFromJunction as (		
							select Ca.[Sheet], ca.[Org_Group], NULL as location, ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], NULL as Equipment, ca.Cost_Type, null as Product, 'Avg To From Junction' as 'Attribute', 't' as 'unit', ca.[Cost?]
								,case when c.Value = 0 then 0 else sum(cb.Value*ca.value)/c.Value end as value
								from TotalDepPerDay c, ToFromJunction ca
										inner join (select case when a.Location in ('Whaleback','Jimblebar','Eastern Ridge') then 'east' else 'west' end as Region, a.Location,a.Value from DepPerDay a) cb
										on ca.Location = cb.Region
								group by Ca.[Sheet], ca.[Org_Group], ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], ca.Cost_Type, ca.[Cost?],c.Value
						) 
									
	,AvgRestOfCycle as ( 
							select ca.[Sheet], ca.[Org_Group], NULL as location, ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], NULL as Equipment, ca.Cost_Type, null as Product, 'Avg Rest of Cycle' as 'Attribute', 't' as 'unit', ca.[Cost?]
								, case when cb.Value = 0 then 0 else  sum(c.Value*ca.value)/cb.Value end as value, c.value lsds, cb.Value dsss
								from TotalDepPerDay cb, RestOfCycle c, DepPerDay ca
								group by Ca.[Sheet], ca.[Org_Group], ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], ca.Cost_Type, ca.[Cost?], cb.Value
											,c.value, ca.value) 
	,AvgTotalCycle as ( 
							select ca.[Sheet], ca.[Org_Group], NULL as location, ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], NULL as Equipment, ca.Cost_Type, null as Product, 'Avg Total of Cycle' as 'Attribute', 't' as 'unit', ca.[Cost?]
								, case when cb.Value = 0 then 0 else sum(c.Value*ca.value)/cb.Value end as value
								from TotalDepPerDay cb, CycleTime c, DepPerDay ca
								where ca.Location = c.Location
								group by Ca.[Sheet], ca.[Org_Group], ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], ca.Cost_Type, ca.[Cost?], cb.Value) 
								--select * from AvgTotalCycle

	,NumberActiveRakes as (	select	c.[Sheet], 'Rail' as Org_group, NULL as location, 'Mainline' as [function], NULL as Activity, NULL as Workstream,  NULL as Equipment_Type, NULL as Equipment, c.Cost_Type, null as Product, 'Active Rakes' as 'Attribute', 't' as 'unit', c.[Cost?]
								--select 'Rail' as Org_group, 'Mainline' as [function], 'Active Rakes' as Reference
								, ((a.value + d.Value/(@daysinyear*b.value))*(c.value/24)) as value
								from AvgTotalCycle c, RailInvTransit d, AvgRakeTons b, TotalDepPerDay a) --select * from NumberActiveRakes
								
	,LoadTimePerTrain as ( select ca.[Sheet], ca.[Org_Group],  ca.location, ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type],ca.Equipment, ca.Cost_Type, ca.Product, ca.Attribute as 'Attribute', 'h' as 'unit', ca.[Cost?]
								, ca.Value--, sum(c.Value*ca.value)/cb.Value as value
								from #Final_Calc_Dataset ca
								where Attribute in ( 'Train load', 'Mine 1 Train Load', 'Mine 2 Train Load')
								) --select * from LoadTimePerTrain

	,TotalDepTrains as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Total Departure Trains' as 'Attribute', '#' as 'unit', c.[Cost?] 
						, c.Value * @daysinyear/2 as Value
							from DepPerDay c) --select * from TotalDepTrains

	, TotalLoadHours as (select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], b.Equipment, c.Cost_Type, c.Product, 'Total Load Hours' as 'Attribute', 'h' as 'unit', c.[Cost?] 
							, c.Value * ca.Value as Value
								from LoadTimePerTrain c 
								inner join TotalDepTrains ca on c.Location = ca.Location 
								inner join  
								(select distinct b.Location, c.Equipment as oc, c.Attribute
										, case	
											when c.Attribute = 'Mine 1 Train Load' then 'TLO1'
											when c.Attribute = 'Mine 2 Train Load' then 'TLO2'
											when c.Attribute = 'Train load' and c.Location = 'Eastern Ridge' then 'OB25 TLO'
											when c.Attribute = 'Train load' and c.Location = 'Whaleback' then 'TLO'
											when c.Attribute = 'Train load' and c.Location = 'Jimblebar' then 'JMB TLO'
											when c.Attribute = 'Train load' and c.Location = 'Area C' then 'TLO'
											else '' end as Equipment
												from #Final_Calc_Dataset b  
												inner join LoadTimePerTrain c	on b.Location = c.Location)
									 d on c.Location = d.Location  and d.Attribute = c.Attribute
								inner join #Final_Calc_Dataset b on coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.workstream  ,'') = coalesce(b.workstream  ,'') and d.Equipment = b.Equipment
								where b.Activity = 'TLO' and b.Attribute = 'Target Tonnes' and b.Equipment not in ('OB24 TLO','OB18 TLO')
							) --select * from TotalLoadHours

	, EffectiveLoadingHours as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], b.equipment, c.Cost_Type, c.Product, 'Effective Loading Hours'  as 'Attribute', c.Unit, c.[Cost?] 
							,case when b.Value = 0 then 0 else c.value/b.Value end as Value
							from OORbyLocationAndEquip c
							inner join #Final_Calc_Dataset b on  coalesce(c.org_group ,'') = coalesce(b.org_group , '') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') 
							where b.Attribute = 'Net rate' and b.Activity = 'TLO' and b.Equipment not in ('OB24 TLO','OB18 TLO') ) --select * from EffectiveLoadingHours
	
	, TLODowntimeLoading as (	select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Effective Loading Hours'  as 'Attribute', c.Unit, c.[Cost?] 
										,c.value - b.Value as Value, c.Value shdh, b.Value shhsbd
										from TotalLoadHours c
										inner join EffectiveLoadingHours b on c.Location = b.Location and c.Equipment = b.Equipment) --select * from TLODowntimeLoading
	
	, TotalTLOdowntimeExcSchMain as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total TLO downtime exc sch. maint.'  as 'Attribute', c.Unit, c.[Cost?] 
										,sum(c.value) as Value
										from #ProductionTime c 
										where c.Attribute in ('Scheduled process downtime raw','Unscheduled equipment downtime raw','Unscheduled process downtime excl. starve/block raw')
										and c.Activity = 'TLO' and c.Equipment not in ('OB24 TLO','OB18 TLO')
										group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] )

	, DTImpactingTrains as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Downtime Impacting Trains                     '  as 'Attribute', '%' as unit, c.[Cost?] 
									, case when b.Value = 0 then 0 else c.Value / b.Value end as Value
									from TLODowntimeLoading c
									inner join TotalTLOdowntimeExcSchMain b on c.Equipment = b.Equipment  and c.Location = b.Location 			 
								)

	, DumpTime as			(select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'Dump Time' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								, sum(c.Value) as Value
									from #Final_Calc_Dataset c
										where  c.Attribute in ( 'Dump')
									group by C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.[Cost?])

	, CarDumperTonnes as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #Final_Calc_Dataset c
										where  c.Attribute in ( 'Target Tonnes') and c.equipment in ('CD1','CD2','CD3','CD4','CD5')				
									)

	, CarDumperNetRate as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #Final_Calc_Dataset c
										where  c.Attribute in ( 'Net Rate') and c.equipment in ('CD1','CD2','CD3','CD4','CD5')
									)

	, CarDumperProductionTime as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.Attribute, c.unit, c.[Cost?] 
									, c.Value as Value
									from #ProductionTime c
									where   c.equipment in ('CD1','CD2','CD3','CD4','CD5') and c.attribute = 'Production Time'
									)

	, CarDumperUnscheduledEqp as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.Attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #ProductionTime c
									where   c.equipment in ('CD1','CD2','CD3','CD4','CD5') and c.attribute = 'Unscheduled equipment downtime raw')

	, CarDumperScheduledProcess as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.Attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #ProductionTime c
									where   c.equipment in ('CD1','CD2','CD3','CD4','CD5') and c.attribute = 'Scheduled process downtime raw')

	, CarDumperUnschedProcess as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.Attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #ProductionTime c
									where   c.equipment in ('CD1','CD2','CD3','CD4','CD5') and c.attribute = 'Unscheduled process downtime excl. starve/block raw'
									) --select * from CarDumperUnschedProcess
						--	select * from #ProductionTime
	, HoursOfDumpDownTime as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'Hours of Dump Downtime CD' as 'Attribute', c.unit, c.[Cost?] 
								, case when cc.value*ca.Value-cb.Value = 0 then 0 else c.Value/cc.value*ca.Value-cb.Value end as Value
									from CarDumperTonnes c
									inner join DumpTime					ca on c.equipment = ca.equipment
									inner join CarDumperProductionTime	cb on c.equipment = cb.equipment
									, AvgRakeTons				cc 
									) --select * from HoursOfDumpDownTime

	, DowntimeImpactingTrainsCD as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'Hours of Downtime CD' as 'Attribute', c.unit, c.[Cost?] 
								, case when (ca.Value + cb.Value + cc.Value) = 0 then 0 else c.Value/(ca.Value + cb.Value + cc.Value) end as Value
								--, c.Value wwds, ca.Value sdfa, cb.Value sdsdfa, cc.Value sdajjff
									from HoursOfDumpDownTime c
									inner join CarDumperUnscheduledEqp ca on c.equipment = ca.equipment
									inner join CarDumperUnschedProcess	cb on c.equipment = cb.equipment
									inner join CarDumperScheduledProcess cc on c.equipment = cc.equipment
									) --select * from DowntimeImpactingTrainsCD
	, MaximumRakes as (
					select top 1 NULL as [Sheet], 'Rail' as [Org_Group], NULL as Location, 'Shuttle' as [function], 'Rail' as Activity, 'Operations' as Workstream, NULL as [Equipment_type], NULL as Equipment, NULL as Cost_Type, null as Product, 'Maximum allowable active rakes' as Attribute, NULL as Unit, NULL as [Cost?] 
							, 6 as Value
						)
					select a.* into #ActiveRakesCalc from 
					(
						select * from NumberActiveRakes union all
						select * from DTImpactingTrains union all
						select * from RailInvTransit    union all
						select * from MaximumTonnes     union all
						--select * from MaximumRakes		union all
						select * from TotalOOR			union all
						select * from DowntimeImpactingTrainsCD
						) a
						
 if (select abs(b.value/a.Value) as value from #ActiveRakesCalc a,#ActiveRakesCalc b where a.Attribute = 'Total OOR' and  b.Attribute = 'Rail inventory transit') > 0.1
 insert into @results (severity, [message]) values ('warning', 'Mainline calculated rail inventory transit > 10% of total OOR')

 declare @ar_calc float = (select value from #ActiveRakesCalc where Attribute='Active Rakes')
 declare @ar_var float = (select abs(@ar_calc / b.Value - 1) from #Final_Calc_Dataset b where b.Attribute = 'Active Rakes' and b.[function] = 'Mainline');
if @ar_var >= 0.01
insert into @results (severity, [message]) select
  case when @ar_var > 0.05 then 'error' else 'warning' end,
  'Active rakes calculated from cycle (' + cast(@ar_calc as nvarchar) + ') differs from supplied value by ' + cast(cast(@ar_var*100 as int) as nvarchar) + '%'
;

		-------------------######################################################################################################################-----------------------	
		-------------------######################################################################################################################-----------------------
		-------------------######################################################################################################################-----------------------
		--------------------------------------------------------------------------------Port----------------------------------------------------------------------------
; 
	With Screened as (
	-- Screened
	select distinct  c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Screened'  as 'Attribute', c.Unit, c.[Cost?]
			,c.[Value]*(1 - pa.[Value]) as [Value]
			FROM #Final_Calc_Dataset c
			left join #Final_Calc_Dataset pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.workstream, '') = coalesce(pa.workstream,'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.location,'') = coalesce(pa.location,'')
			where  c.Attribute = 'Lump' and pa.Attribute = 'LRP Bypass') --select * from Screened
	-- RSF
	,RSF as (
	select distinct  c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RSF'  as 'Attribute' ,c.Unit, c.[Cost?] 
			,case when  pa.value = 0 or (1 + (c.[Value]/(pa.value))) = 0 then 0 else (c.[Value]/(pa.value))/(1 + (c.[Value]/(pa.value))) end as [Value]
			FROM #Final_Calc_Dataset c
			left join Screened pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.workstream, '') = coalesce(pa.workstream,'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.location,'') = coalesce(pa.location,'')
			where  c.Attribute = 'Screen stack' and pa.Attribute = 'Screened' ) --select * from RSF

				-- Yard outflow
				,YardOutflow as ( select distinct c.sheet, C.[Org_Group], C.Location, 'Yard Outflow'  as 'Attribute' ,c.Unit, c.[Cost?]
								, sum(c.value) as Value
								from #Final_Calc_Dataset c
									where c.Org_Group = 'Port' and c.Activity = 'Outflow' and c.Equipment_Type = 'Shiploader' and c.Attribute = 'Target Tonnes'
								group by  c.sheet, C.[Org_Group], C.Location,c.Unit, c.[Cost?]) -- select * from YardOutflow

	-- Lump ratio
	,LR as (select distinct  c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Lump ratio'  as 'Attribute' ,c.Unit, c.[Cost?] 
			,case when ca.value = 0 then 0 else c.[Value] / ca.[Value] end as [Value]
			FROM #Final_Calc_Dataset c
			inner join YardOutflow ca on ca.Location = c.Location and ca.Org_Group = c.Org_Group
			where  c.Attribute = 'Lump' ) 
				
	-- DSO
	,DSO as (select distinct  c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'DSO'  as 'Attribute', c.Unit, c.[Cost?] 
			,ca.[Value] * c.[Value] as [Value]
			FROM #Final_Calc_Dataset c
			inner join #Final_Calc_Dataset ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'')  and coalesce(c.workstream, '') = coalesce(ca.workstream,'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.location,'') = coalesce(ca.location,'')
			where  ca.Attribute = 'Yard Inflow' and c.Attribute = 'DL%' )	
		
	-- Screen Stack Per Ton outflow
	, ScreenStackPerTon as (select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Screen stack per ton outflow'  as 'Attribute' , c.Unit, c.[Cost?]  
								,case when (1-pb.Value) = 0 then 0 else (pb.Value * pa.Value *(1 - c.[Value])) / (1 - pb.Value) end as [Value]
								from   #Final_Calc_Dataset c
								inner join LR pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'')  and coalesce(c.workstream, '') = coalesce(pa.workstream,'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.location,'') = coalesce(pa.location,'')
								inner join RSF pb on coalesce(c.org_group ,'') = coalesce(pb.org_group ,'')  and coalesce(c.workstream, '') = coalesce(pb.workstream,'')  and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.location,'') = coalesce(pb.location,'')
								where c.Attribute = 'LRP Bypass') 	 
		 
	--Reclaimed 
	,Reclaimed as (select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Reclaimed'  as 'Attribute', c.Unit, c.[Cost?] 
						,(ca.Value + (ca.Value*pe.Value) - c.Value) as [Value] 
						from   DSO c
						inner join YardOutflow ca on ca.Location = c.Location and ca.Org_Group = c.Org_Group  
						inner join ScreenStackPerTon pe on coalesce(c.org_group ,'') = coalesce(pe.org_group ,'') and coalesce(c.[function],'') = coalesce(pe.[function] ,'')  and coalesce(c.location,'') = coalesce(pe.location,'')
							) 

					-- Reclaimer Throughput
				,ReclaimerThroughput as ( select distinct c.sheet, C.[Org_Group], C.Location, 'Reclaimer Throughput'  as 'Attribute' 
								, sum(c.value) as Value
								from #Final_Calc_Dataset c
									where c.Org_Group = 'Port' and c.Activity = 'Outflow' and c.Equipment_Type = 'Reclaimer' and c.Attribute = 'Target Tonnes'
								group by  c.sheet, C.[Org_Group], C.Location) 

	--Write off adjustments
	,WriteOffAdj as (	select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Write off adjustments'  as 'Attribute', c.Unit, c.[Cost?] 
								,  c.Value - ca.Value  as [Value] 
								from  Reclaimed c
								inner join ReclaimerThroughput ca on    coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location ,'') = coalesce(ca.location ,'') 
									) 
	--Inventory change 
	,InventoryChange as (select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Inventory change'  as 'Attribute', c.Unit, c.[Cost?]
							,c.Value - ca.Value + cb.Value as [Value] 
									from   #Final_Calc_Dataset c
									inner join YardOutflow ca on    coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location ,'') = coalesce(ca.location ,'')
									inner join WriteOffAdj cb on coalesce(c.org_group ,'') = coalesce(cb.org_group ,'') and coalesce(c.[function],'') = coalesce(cb.[function] ,'') and coalesce(c.workstream, '') = coalesce(cb.workstream,'')  and coalesce(c.equipment,'') = coalesce(cb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cb.equipment_type,'') and coalesce(c.location,'') = coalesce(cb.location,'')
									where c.Attribute = 'Yard Inflow') 
	-- opening stock
	,OpeningStock as ( 
					select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Opening stock'  as 'Attribute', c.Unit, c.[Cost?] 
				,c.Value - ca.Value as [Value] 
				from   #Final_Calc_Dataset c
						inner join InventoryChange ca on    coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location,'') = coalesce(ca.location,'')
						where c.Attribute = 'Closing stock')
	-- Total Ore Handled
	,TotalOreHandled as (select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total ore handled'  as 'Attribute', c.Unit, c.[Cost?] 
						,pe.Value + c.Value - pe.Value + pa.Value + pb.Value as [Value] 
							from   #Final_Calc_Dataset c
							inner join DSO pe		on coalesce(c.org_group ,'') = coalesce(pe.org_group ,'') and coalesce(c.[function],'') = coalesce(pe.[function] ,'')  and coalesce(c.location,'') = coalesce(pe.location,'')
							inner join Reclaimed pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.[function],'') = coalesce(pa.[function] ,'')  and coalesce(c.location,'') = coalesce(pa.location,'')
							inner join Screened pb	on coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.[function],'') = coalesce(pb.[function] ,'')  and coalesce(c.location,'') = coalesce(pb.location,'')
							where c.Attribute = 'Yard Inflow')
	--select * from #Final_Calc_Dataset where Equipment like 'SL C%'
	, SLConVDirectCost as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
								,case when sum (distinct ca.Value) + sum(distinct cb.value) = 0 
								then 0 
								else (c.Value/(sum (distinct ca.Value) + sum(distinct cb.value))) end as Value
								from #Final_Calc_Dataset c 
								inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Reclaimed' as 'Attribute' , sum(a.Value) as Value 
													from Reclaimed a where a.Attribute = 'Reclaimed' group by a.Location) ca on c.Location = ca.location
								inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Screened' as 'Attribute' , sum(a.Value) as Value 
													from Screened a where a.Attribute = 'Screened' group by a.Location) cb on c.Location = cb.location
								where c.Cost_Type = 'Direct Cost' and ca.Attribute = 'Reclaimed' and c.Equipment = 'SL Conv Syst' and cb.Attribute = 'Screened'
								group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.Value )
	/*, SLConVMaterials as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
								,case when sum (distinct ca.Value) + sum(distinct cb.value) = 0 
								then 0 
								else (c.Value/(sum (distinct ca.Value) + sum(distinct cb.value))) end as Value
								from #Final_Calc_Dataset c 
								inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Reclaimed' as 'Attribute' , sum(a.Value) as Value 
													from Reclaimed a where a.Attribute = 'Reclaimed' group by a.Location) ca on c.Location = ca.location
								inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Screened' as 'Attribute' , sum(a.Value) as Value 
													from Screened a where a.Attribute = 'Screened' group by a.Location) cb on c.Location = cb.location
								where c.Cost_Type = 'Maintenance Materials' and ca.Attribute = 'Reclaimed' and c.Equipment = 'SL Conv Syst' and cb.Attribute = 'Screened'
								group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.Value )*/	
	Select a.* into #PortCostDrivers from (
			select * from Screened union all
			select * from RSF union all
			select * from LR union all
			select * from DSO union all
			select * from ScreenStackPerTon union all
			select * from Reclaimed union all
			select * from WriteOffAdj union all
			select * from InventoryChange union all
			select * from OpeningStock union all
			select * from TotalOreHandled union all
			--select * from SLConVMaterials union all
			select * from SLConVDirectCost
	) a
; 
 
		-------------------######################################################################################################################-----------------------	
		-------------------######################################################################################################################-----------------------
		-------------------######################################################################################################################-----------------------
		--------------------------------------------------------------------------Cost Rates----------------------------------------------------------------------------
select a.* into #MiningCostRates from (
	-- drills
	select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, c.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost Rate' as Attribute, 'A$/m' as Unit, c.[Cost?]
	,case when (ca.[Value] is null or da.[Value] is null or (ca.[Value]*da.[Value])=0) then c.Value else c.[Value]/(ca.[Value]*da.[Value]) end as 'Value'
		from #Final_Calc_Dataset c
		left join #Final_Calc_Dataset ca on ca.Attribute = 'Average no. of drills' and coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '')  and coalesce(c.Equipment_type, '') = coalesce(ca.Equipment_type, '')
		left join #Final_Calc_Dataset da on da.Attribute = 'Meters drilled per rig' and coalesce(da.org_group, '') = coalesce(c.org_group, '') and coalesce(da.location, '') = coalesce(c.location, '') and coalesce(da.[function], '') = coalesce(c.[function], '')   and coalesce(c.Equipment, '') = coalesce(da.Equipment, '') and coalesce(c.Equipment_type, '') = coalesce(da.Equipment_type, '')
		where c.Activity ='drill' and c.Cost_Type is not null and c.Equipment is not null
	union all
	-- Overall Cost rate drill
	select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, c.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost Rate' as Attribute, 'A$/m' as Unit, c.[Cost?]
	,case when (ca.[Value])=0 then c.[Value] else c.[Value]/(ca.[Value]) end as 'Value'
		from #Final_Calc_Dataset c
		inner join (select c.Location, sum(c.Value*ca.Value) as value  from #Final_Calc_Dataset c
							inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '')  and coalesce(c.Equipment_type, '') = coalesce(ca.Equipment_type, '')
							where  c.Attribute = 'Average no. of drills' and  ca.Attribute = 'Meters drilled per rig'
							group by c.Location) ca on c.Location = ca.Location
		where c.Activity = 'Drill' and Equipment_Type is null and c.Cost_Type is not null
	union all
	-- blast cost rates 
	select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', '$/t' as [Unit], c.[Cost?]
	,case when ca.[Value] = 0 then C.[Value] else (C.[Value] / ca.[Value]) end as Value
		from #Final_Calc_Dataset c
		inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '') and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '')
		where c.[Function] ='Mining' and c.Activity = 'Blast' and ca.Attribute = 'Tonnes blasted' and c.Cost_Type <> 'Consumables' 
	union all
	-- Load & Haul diesel cost rates
	select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', c.Unit, c.[Cost?]
	,case when coalesce(cb.value, 0) * coalesce(cb.value, 0) = 0 then c.value else ca.value * cb.value end as Value
		from #Final_Calc_Dataset c
		left join #MiningCostDrivers ca on ca.Attribute = 'Diesel price per litre' and coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') ---and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') 
		left join #MiningCostDrivers cb on cb.Attribute = 'Burn Rate' and coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(cb.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') --and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') 
		where c.[Function] ='Mining' and c.Cost_Type = 'Diesel' and c.Attribute='Variable cost' and c.Activity in ('Load', 'Haul') --c.Equipment in ('WB LBHR 996 EXC','WB LBHR 9400 EXC','WB CAT 994 FEL','KOM 1200 FEL','WB CAT 793F DT','WB CAT 793C DT', 'ER LBHR 9250 EXC','ER LBHR 9400 EXC','ER CAT 992 FEL','ER CAT 993 FEL','ER CAT 994 FEL','ER CAT 793F DT','ER CAT 785C DT','MAC LBHR 996 EXC','MAC HIT 3600 EXC','MAC LBHR 9400 EXC','MAC KOM 1200 FEL','MAC CAT 793F DT','MAC CAT 793D DT','MAC CAT 789C DT','Liebherr 996 Manned','Liebherr 996 AHPT','Liebherr 9400 Manned','Liebherr 9400 AHPT','CAT 994 Manned','CAT 994 AHPT','YND LBHR 996 EXC','YND LBHR 9400 EXC','YND CAT 994 FEL','YND KOM 1200 FEL','YND LET 1850 FEL','YND CAT 793F DT','YND CAT 785C DT')
	) a;
	-- Mine Services cost rates
		--Mine Services - Part 1 (Calculating Productive Movement)

	-- Other Cost rates (Rail & Port)
		with productive_mvmt as (
		select distinct  c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream
		,sum ((1-c.[Value])*pa.[Value]) as  [Value]
		FROM #MiningCostDrivers c
		inner join #Final_Calc_Dataset pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'')
		where c.attribute='RH tonnes %' and  pa.attribute='Total movement tonnes' and c.Activity='Haul'
		group by c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream
	 		)
		--Mine Services - Part 2 (Calculating Cost Rates)
	,MineServices as (select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', c.Unit, c.[Cost?]
						,case when ca.value = 0 then C.[Value] else c.[Value]/ca.[Value] end  as Value 
						from #Final_Calc_Dataset c
						inner join productive_mvmt ca on coalesce(ca.org_group, '') = coalesce(c.org_group ,'')  and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  
						where  c.Activity ='Mine Services')
	,PortThroughPut as (
						select  case when C.Location in ('North Yard', 'South Yard') then 'Nelson Point' else 'Finucane Island' end as location
								, sum(DISTINCT c.value) as value
									from #Final_Calc_Dataset c
								inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') 
								where c.Attribute = 'Target Tonnes' and c.Org_Group = 'Port' and c.Activity = 'Outflow'
						group by C.Location)

	, PortOpsCostRate as ( select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', c.Unit, c.[Cost?]
								,case when sum(distinct a.value) = 0 then 0 else  c.Value / sum(distinct a.value) end as value
								from #Final_Calc_Dataset c
								inner join ( select case when Location in ('North Yard', 'South Yard') then 'Nelson Point' else 'Finucane Island' end location , sum(distinct value) value from #PortCostDrivers where Attribute = 'Total ore handled' group by location) a on a.Location = c.Location
								where c.Attribute = 'Variable Cost' and c.Cost_Type = 'Electricity'
								group by c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Equipment, c.Cost_Type, c.Product,c.Unit, c.[Cost?], c.value
								)
	--Rail - Diesel Cost Rate
	--[Tonnes per rake]

	,tonsperRake as		(select distinct c.sheet, C.[Org_Group], Ca.[Location], C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Equipment, c.Cost_Type, c.Product, 'Tons per rake'  as 'Attribute', 't/rake' as Unit, c.[Cost?]
						,((c.[Value])*(ca.[Value])) as value
						from #Final_Calc_Dataset c
						inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  
						where c.Org_Group ='Rail' and c.Attribute='No. of ore cars' /*and c.[Function]='Mainline'*/ and ca.Org_Group ='Rail' and ca.Activity ='Rail' and ca.Attribute = 'Ore car tonnage' 
						),

		--[OOR]
	OOR as				(select distinct c.sheet, C.[Org_Group], case Equipment when 'OB18 TLO' then 'OB18' when 'OB24 TLO' then 'OB24' else c.[Location] end as Location, C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, 'OOR'  as 'Attribute', 'tpa' as Unit, c.[Cost?]
						,sum(c.[Value]) as [Value]
						from #Final_Calc_Dataset c 
						where Activity = 'TLO' and Attribute = 'Target Tonnes' and Equipment in ('TLO','OB25 TLO','TLO','JMB TLO','TLO1','TLO2', 'OB24 TLO', 'OB18 TLO')
						group by c.sheet, C.[Org_Group], case Equipment when 'OB18 TLO' then 'OB18' when 'OB24 TLO' then 'OB24' else c.[Location] end, C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Cost_Type, c.Product, c.[Attribute], c.[Unit], c.[Cost?]
						),

	--[No. rakes] =  ([OOR]/[Tonnes per rake])
	NumberOfRakes as	(select distinct c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Cost_Type, c.Product, 'No. rakes'  as 'Attribute', '#' as Unit, c.[Cost?]
						,case when ca.value = 0 then 0 else (c.[Value]/ca.[Value]) end as value
						from OOR c
						inner join tonsperRake ca on coalesce(c.[Location],'') = coalesce(ca.[Location],'')  
						),

	--[Diesel Volume] = ([Diesel Consumption per trip]*[No. locos]*[No. rakes])
	DieselVolume as		(select distinct c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Cost_Type, c.Product, 'Diesel Volume'  as 'Attribute', 'l' as Unit, c.[Cost?]
						,(c.[Value])*(ca.[Value])*case ca.Location when 'OB18' then 1 when 'OB24' then 1 else 2 end as value
						from #Final_Calc_Dataset c
						inner join NumberOfRakes ca on coalesce(c.[Location],'') = coalesce(ca.[Location],'') 
						where c.Org_Group ='Rail' and c.org_group ='Rail' and c.Attribute = 'Diesel consumption per trip'
						), 
				
	--[Total Diesel Volume] = ([Diesel Consumption per trip]*[No. locos]*[No. rakes])
	TotDieselVolume as	(select distinct c.sheet, C.[Org_Group], C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, 'Diesel Volume'  as 'Attribute', 'l' as Unit, c.[Cost?]
						,sum(c.[Value]) as [Value]
						from DieselVolume c
						group by c.sheet, C.[Org_Group], C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, c.[Attribute], c.[Unit], c.[Cost?]
						),

	--[Diesel Cost Rate] = ([Diesel Fixed Cost]/[Total Diesel Volume])
	DieselCostRate as	(select distinct c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/L' as Unit, c.[Cost?]
						,case when ca.Value = 0 then 0 else (c.[Value]/ca.[Value]) end as value
						from #Final_Calc_Dataset c
						inner join TotDieselVolume ca on coalesce(ca.org_group, '') = coalesce(c.org_group ,'')
						where c.Org_Group ='Rail' and c.Cost_Type='Diesel' 
						)
	,ActualThroughput as	(select distinct c.sheet, 'Rail' as [Org_Group], C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, 'Actual throughput'  as 'Attribute', 'tpa' as Unit, c.[Cost?]
						,sum(c.[Value]) as [Value]
						from #Final_Calc_Dataset c 
						where Activity = 'TLO' and Attribute = 'Target Tonnes' and Equipment in ('TLO','OB25 TLO','TLO','JMB TLO','TLO1','TLO2')
						group by c.sheet, C.[Org_Group], C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, c.[Attribute], c.[Unit], c.[Cost?]
						),

	OtherCostRate as	(select distinct c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]
						,case when ca.Value = 0 then 0 else (c.[Value]/ca.[Value]) end as value
						from #Final_Calc_Dataset c
						inner join ActualThroughput ca on coalesce(ca.org_group, '') = coalesce(c.org_group ,'')
						where c.Org_Group ='Rail' and c.Workstream='Direct Cost' and c.Cost_Type='Other')
	,RateLoss as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Rate Loss'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
						,case when ca.value = 0 then 0 else 1 - (c.Value/ca.Value) end as Value
						from #Final_Calc_Dataset c 
						inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') 
						where c.Attribute = 'Net Rate' and ca.Attribute = 'Design Rate')
				
	, STKDirectCost as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
						,case when sum(ca.value) = 0 then 0 else (c.Value/sum (distinct ca.Value)) end as Value
						from #Final_Calc_Dataset c 
						inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Ore Inflow' as 'Attribute' , sum(a.Value) as Value 
											from #Final_Calc_Dataset a where a.Attribute = 'Yard Inflow' group by a.Location) ca on c.Location = ca.location
						where c.Cost_Type = 'Direct Cost' and ca.Attribute = 'Ore Inflow' and c.Equipment = 'STK Conv Syst'
						group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.Value )
				
	/*, STKMaintenenceMaterials as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
						,case when sum(distinct ca.value) = 0 then 0 else (c.Value/sum (distinct ca.Value)) end as Value
						from #Final_Calc_Dataset c 
						inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Ore Inflow' as 'Attribute' , sum(a.Value) as Value 
											from #Final_Calc_Dataset a where a.Attribute = 'Yard Inflow' group by a.Location) ca on c.Location = ca.location
						where c.Cost_Type = 'Maintenance Materials' and ca.Attribute = 'Ore Inflow' and c.Equipment = 'STK Conv Syst'
						group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.Value )*/
	-- Load & Haul Cost rates
	,LHCostRateseqp as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
						,coalesce(case when sum(distinct ca.value) = 0 then sum(c.Value) else (sum(c.Value)/sum (distinct ca.Value)) end, sum(c.Value)) as Value
						from #Final_Calc_Dataset c
						left join ( select distinct c.equipment ,case when c.Value = 0 then 1 else  cb.Value/c.Value end as value 
											from #Final_Calc_Dataset c 
											inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(cb.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_type, '') = coalesce(cb.cost_type, '')
											where c.Activity in ('load', 'haul') and c.Attribute = 'Net Rate' and cb.Attribute = 'Total movement tonnes') ca on c.Equipment = ca.Equipment
						where c.Cost_Type <> 'Diesel' and c.Cost_Type is not null and c.Activity in ('Load', 'Haul')
						group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?]  )
	,LandHCostRates as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
		,case when sum(distinct ca.value) = 0 then 0 else (sum(c.Value)/sum (distinct ca.Value)) end as Value
		from #Final_Calc_Dataset c
		inner join ( select distinct c.Location ,case when sum(c.Value) = 0 then 0 else  sum(cb.Value - c.Value) end as value 
							from #Final_Calc_Dataset c 
							inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(cb.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_type, '') = coalesce(cb.cost_type, '')
							where  c.Attribute = 'Rehandle movement' and cb.Attribute = 'Total movement tonnes' and c.Activity in ('haul')
							group by c.Location) ca on c.Location = ca.Location
		where  c.Cost_Type is not null and c.Activity = 'Load & Haul'
		group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?]  )
				
	,OB18CostRate as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, 'OB18 Proc Dir O_H' as Equipment, 'Electricity' as 'Cost_Type', c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
		,case when sum(distinct c.value) = 0 then 0 else (sum(cb.Value)/sum (distinct c.Value)) end as Value
		from #Final_Calc_Dataset c
		inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') 
		where  c.Attribute = 'Target Tonnes'  and cb.Cost_Type is not null and cb.Equipment = 'OB18 Proc Dir O_H'
		group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?]  )
	--OFR Cost rates
	,OFRCostRate as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
		,case when ca.value = 0 then 0 else (c.Value/ca.Value) end as Value
		from #Final_Calc_Dataset c
			inner join ( select a.Location, sum(a.Value) as Value from #Final_Calc_Dataset a where a.Activity = 'OFR' and a.Attribute = 'Target Tonnes' group by a.Location) ca on c.Location = ca.Location
			where c.Cost_Type is not null and c.Activity = 'OFR' and c.Cost_Type = 'Electricity'	)
	--Unallocated costs
	,UnallocatedRates as (select  c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
								, case when ca.Value = 0 then 0 else c.Value/ca.Value end as Value
								from #Final_Calc_Dataset c
								inner join ( select a.Location, sum(a.Value) as Value from #Final_Calc_Dataset a where a.Activity = 'OFR' and a.Attribute = 'Target Tonnes' group by a.Location) ca on c.Location = ca.Location
								where c.Cost_Type is not null and  c.Workstream = 'Operations' and c.Cost_Type = 'Electricity' and c.Activity = 'Non Allocated Cost' and C.Location <> 'Eastern Ridge')
	,ERElecCostRate as (select  c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
								, case when ca.Value = 0 then 0 else c.Value/ca.Value end as Value
								from #Final_Calc_Dataset c
								inner join ( select a.Location, sum(a.Value) as Value from #Final_Calc_Dataset a where a.Activity in ('OFR', 'OFH') and a.Attribute = 'Target Tonnes' group by a.Location) ca on c.Location = ca.Location
								where c.Cost_Type is not null and  c.Workstream = 'Operations' and c.Cost_Type = 'Electricity' and c.Activity = 'Non Allocated Cost' and C.Location = 'Eastern Ridge')
	--Port demurrage cost rates
	,CargoSize as (select  c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, cb.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cargo Size'  as 'Attribute', 't' as Unit, c.[Cost?]  
								, case when c.Value = 0 then 0 else c.Value*cb.value/c.Value end as Value
								from #Final_Calc_Dataset c
								inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_Type, '') = coalesce(cb.cost_Type, '') 
								where c.attribute = 'Average ship size' and cb.attribute = 'Cargo size baseline')

	, LaytimeAllowed as (select  c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, cb.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Laytime Allowed'  as 'Attribute', 't' as Unit, c.[Cost?]  
								, case when cb.Value = 0 then 0 else (c.Value/cb.value) + ca.Value end as Value
								from CargoSize c
								inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_Type, '') = coalesce(cb.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') 
								inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') and coalesce(c.cost_Type, '') = coalesce(ca.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') 
								where c.attribute = 'Cargo Size' and cb.attribute = 'Contract rate' and ca.attribute = 'Turn time/free time'
							
							)
	, DaysPerShip as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Days Per Ship'  as 'Attribute', 't' as Unit, c.[Cost?]  
								, ca.value - c.Value as Value
								from LaytimeAllowed c
								inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') and coalesce(c.cost_Type, '') = coalesce(ca.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') 
								where ca.Attribute = 'Laytime used') --select * from DaysPerShip
-- Work from here
	, TotalShips as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, NULL as Equipment, c.Cost_Type, c.Product, 'Total Ships'  as 'Attribute', 't' as Unit, c.[Cost?]  
								,case when c.value = 0 then 0 else  Sum(ca.value)/c.value end as Value
								from #Final_Calc_Dataset c
								inner join #Final_Calc_Dataset ca ON C.org_group = ca.org_group
								where ca.Attribute = 'Target Tonnes' and  ca.Equipment_Type = 'Shiploader' and c.attribute = 'Average ship size' 
								group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Cost_Type, c.Product, c.[Cost?] ,c.value
								
						)
	, CFRFOBShips as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.attribute, 't' as Unit, c.[Cost?]  
								, c.value*ca.Value as Value
								from #Final_Calc_Dataset c, TotalShips ca
								where c.Attribute in ( 'FOB ratio' , 'CFR Ratio')) --select * from CFRFOBShips

	, TotalDays as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Days Per Ship'  as 'Attribute', 't' as Unit, c.[Cost?]  
								, ca.value - c.Value as Value
								from DaysPerShip c
								inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') and coalesce(c.cost_Type, '') = coalesce(ca.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') 
								where ca.Attribute = 'Laytime used')

	, DemurrageCostRate as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', 't' as Unit, c.[Cost?]  
								,case when (c.value*ca.Value) = 0 then 0 else cb.value/(c.value*ca.Value) end as Value
								from DaysPerShip c
								inner join CFRFOBShips ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') and coalesce(c.cost_Type, '') = coalesce(ca.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') 
								inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_Type, '') = coalesce(cb.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') 
								where cb.attribute = 'Variable Cost'
								) 


	select a.* into #CostRates from 
	(	
		select * from MineServices union all
		select * from PortOpsCostRate union all
		select * from OtherCostRate union all
		select * from DieselCostRate union all
		select * from RateLoss union all
		select * from STKDirectCost union all
		--select * from STKMaintenenceMaterials union all
		select * from LHCostRateseqp union all
		select * from LandHCostRates union all
		select * from ERElecCostRate union all
		select * from OFRCostRate union all
		select * from OB18CostRate union all
		--select * from DemurrageCostRate union all
		select * from UnallocatedRates) a;


--######################################################################################
--################################## NB CHANGES ########################################
--######################################################################################
Select * into #Final_Calc_Dataset_Complete from #Final_Calc_Dataset ;

-- Update 
--Other updates to ensure that records match after calculations

update #Final_Calc_Dataset_Complete set Attribute = 'Target Tonnes' where Attribute = 'Tonnes Drilled';  -- this is an assumption
--update #Final_Calc_Dataset_Complete set Attribute = 'Blasted Tonnes' where Attribute = 'Tonnes Blasted';
update #Final_Calc_Dataset_Complete set Attribute = 'Strip Ratio', Activity=null, Workstream=null where Attribute='Stripping Ratio';

update #Final_Calc_Dataset_Complete set Attribute = 'No of ore cars' where Attribute = 'No. of ore cars';
update #Final_Calc_Dataset_Complete set Attribute = 'Port to dumper queue Finucane Island' where attribute = 'Port to dumper queue' and location = 'Finucane Island';
update #Final_Calc_Dataset_Complete set Attribute = 'Port to dumper queue Nelson Point' where attribute = 'Port to dumper queue' and location = 'Nelson Point';
update #Final_Calc_Dataset_Complete set Attribute = 'Post dump Finucane Island' where attribute = 'Post dump' and location = 'Finucane Island';
update #Final_Calc_Dataset_Complete set Attribute = 'Post dump Nelson Point' where attribute = 'Post dump' and location = 'Nelson Point';
update #Final_Calc_Dataset_Complete set Attribute = 'Junction to mine queue east' where attribute like 'Junction to mine queue' and location = 'east';
update #Final_Calc_Dataset_Complete set Attribute = 'Junction to mine queue west' where attribute = 'Junction to mine queue' and location = 'west';
update #Final_Calc_Dataset_Complete set Attribute = 'Mine queue to junction east' where attribute like 'Mine queue to junction' and location = 'east';
update #Final_Calc_Dataset_Complete set Attribute = 'Mine queue to junction west' where attribute = 'Mine queue to junction' and location = 'west';
update #Final_Calc_Dataset_Complete set Location = NULL where Attribute like 'Port to dumper queue%';
update #Final_Calc_Dataset_Complete set Location = NULL where Attribute like 'Post dump%';
update #Final_Calc_Dataset_Complete set Location = NULL where Attribute like 'Junction to mine queue%';
update #Final_Calc_Dataset_Complete set Location = NULL where Attribute like 'Mine queue to junction%';

update #Final_Calc_Dataset_Complete set Attribute = 'Scheduled equipment downtime' where Attribute = 'Scheduled maintenance time';
update #Final_Calc_Dataset_Complete set Attribute = 'Unscheduled equipment downtime' where Attribute = 'Unscheduled maintenance time';
update #Final_Calc_Dataset_Complete set Attribute = 'Scheduled process downtime' where Attribute = 'Scheduled operating loss time';
update #Final_Calc_Dataset_Complete set Attribute = 'Unscheduled process downtime excl. starve/block' where Attribute = 'Unscheduled operating loss time (exclude starve/block time)';
update #Final_Calc_Dataset_Complete set Attribute = 'Scheduled standby hours' where Attribute = 'Standby time' and Activity in ('load','haul','drill')
update #Final_Calc_Dataset_Complete set Attribute = 'Scheduled standby time' where Attribute = 'Standby time' and Activity not in ('load','haul','drill')
update #Final_Calc_Dataset_Complete set Attribute = 'Standby time' where Attribute in ('Standby time', 'Scheduled standby time', 'Scheduled standby hours') and activity in ('Load','Haul','OFH','OFR','TLO','Beneficiation','Inflow','Outflow','Drill');
update #CostRates set Equipment = 'OB18 Proc Dir O_H' where Equipment = 'OB18' and Activity = 'OFH'

update #Final_Calc_Dataset_Complete set Attribute = 'Rehandle tonnes' where Attribute = 'Rehandle movement' and Activity in ('load', 'haul')
update #Final_Calc_Dataset_Complete set Attribute = 'Target tonnes' where Attribute in ('Total movement', 'Total movement tonnes') and Activity in ('load', 'haul')
--update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes processed' where Attribute = 'Target Tonnes' and  Activity in ('OFH','OFR','Beneficiation','Inflow','Outflow')

update #Final_Calc_Dataset_Complete set Location = 'North Yard' where Attribute in ( 'CD1 to North Yard', 'CD2 to North Yard', 'CD3 to North Yard', 'CD4 to North Yard', 'CD5 to North Yard') 
update #Final_Calc_Dataset_Complete set Location = 'East Yard' where Attribute in ( 'CD1 to East Yard', 'CD2 to East Yard', 'CD3 to East Yard', 'CD4 to East Yard', 'CD5 to East Yard')
update #Final_Calc_Dataset_Complete set Location = 'West Yard' where Attribute in ( 'CD1 to West Yard', 'CD2 to West Yard', 'CD3 to West Yard', 'CD4 to West Yard', 'CD5 to West Yard') 
update #Final_Calc_Dataset_Complete set Location = 'South Yard' where Attribute in ( 'CD1 to South Yard', 'CD2 to South Yard', 'CD3 to South Yard', 'CD4 to South Yard', 'CD5 to South Yard') 

update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes transferred' where Attribute in ( 'CD1 to North Yard', 'CD2 to North Yard', 'CD3 to North Yard', 'CD4 to North Yard', 'CD5 to North Yard') 
update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes transferred' where Attribute in ( 'CD1 to East Yard', 'CD2 to East Yard', 'CD3 to East Yard', 'CD4 to East Yard', 'CD5 to East Yard')
update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes transferred' where Attribute in ( 'CD1 to West Yard', 'CD2 to West Yard', 'CD3 to West Yard', 'CD4 to West Yard', 'CD5 to West Yard') 
update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes transferred' where Attribute in ( 'CD1 to South Yard', 'CD2 to South Yard', 'CD3 to South Yard', 'CD4 to South Yard', 'CD5 to South Yard') 

update #Final_Calc_Dataset_Complete set Location = Equipment where Attribute = 'Queue to Dump'
update #Final_Calc_Dataset_Complete set Equipment = NULL where Attribute = 'Queue to Dump'

update #Final_Calc_Dataset_Complete set Cost_Type = 'Consumables' where Attribute = 'Powder Factor' and Activity = 'Blast'
update #Final_Calc_Dataset_Complete set Attribute = 'Unscheduled process downtime excl. starve/block' where Attribute = 'Unscheduled process downtime' and Activity = 'TLO'
update #Final_Calc_Dataset_Complete 
set Value = ca.Value
from #Final_Calc_Dataset_Complete c
inner join #ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'') and coalesce(c.attribute,'') = coalesce(ca.attribute,'')

-- Update Active Rakes
update #Final_Calc_Dataset_Complete set Value = b.value
		from #ActiveRakesCalc b
		inner join #Final_Calc_Dataset_Complete a on a.Org_Group = b.Org_group and a.[Function] = b.[function]
		where a.Attribute = 'Active Rakes' and  a.[Function] = 'mainline'

update #ActiveRakesCalc set Attribute = 'TLO downtime affecting loading' where location in ('Area C','Eastern Ridge','Jimblebar','Whaleback') and Equipment like '%TLO%'
update #ActiveRakesCalc set Attribute = 'TLO 1 downtime affecting loading' where location in ('Yandi') and Equipment = 'TLO1'
update #ActiveRakesCalc set Attribute = 'TLO 2 downtime affecting loading' where location in ('Yandi') and Equipment = 'TLO2'
update #ActiveRakesCalc set [function] = 'Mainline' where location in ('Area C','Eastern Ridge','Jimblebar','Whaleback', 'Yandi') and Attribute not in ('Maximum tonnes constraint','Maximum allowable active rakes')
update #ActiveRakesCalc set Equipment = NULL where location in ('Area C','Eastern Ridge','Jimblebar','Whaleback', 'Yandi')

update #ActiveRakesCalc set Attribute = 'CD downtime affecting dumping' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set location = Equipment where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Org_group = 'Rail' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set [function] = 'Mainline' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Activity = 'Rail' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Workstream = 'Operations' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Equipment_Type = NULL where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Equipment = NULL where Equipment in ('CD1','CD2','CD3','CD4','CD5')

update #Final_Calc_Dataset_Complete set Equipment_Type = NULL Where attribute = 'CFR ratio'
update #Final_Calc_Dataset_Complete set Equipment_Type = NULL Where attribute = 'FOB ratio'
;


----
--- Create an upadate into the results table for the assumptions
--- 
/*update #Final_Calc_Dataset_Complete set Value = 100000000 where Attribute = 'Maximum tonnes constraint'
update #Final_Calc_Dataset_Complete set Value = 6 where Attribute = 'Maximum allowable active rakes'*/

select a.* into #final_attribute from 
(	select * from #MiningCostDrivers A union all
	select * from #MiningCostRates union all
	select * from #CostRates		union all
	select * from #PortCostDrivers union all
	--select * from #LoadAdjustments union all
	--select * from #HaulAdjustments union all
	select * from #ActiveRakesCalc union all
	select * from #Final_Calc_Dataset_Complete
	) a


select a.* into #retrieve_attribute_id from (
select distinct a.*, og.og_id, l.loc_id, f.func_id, ac.act_id, ws.ws_id, et.eqp_type_id, e.eqp_id, ct.ct_id, prod.prod_id  from 
	#final_attribute a
	left join vdt.org_group og on a.Org_Group = og.og_name
	left join vdt.location l on l.loc_name = a.Location
	left join vdt.[function] f on f.func_name = a.[Function]
	left join vdt.activity ac on ac.act_name = a.Activity 
	left join vdt.workstream ws on ws.ws_name = a.Workstream
	left join vdt.eqp_type et on et.eqp_type_name = a.Equipment_Type 
	left join vdt.equipment e on e.eqp_name  = a.Equipment
	left join vdt.cost_type ct on ct.ct_name = a.Cost_Type 
	left join vdt.product prod on prod.prod_name = a.Product) a
;

insert into @results (severity, [message])
select 'info', cast(count(*) as nvarchar) + ' data points mapped from Excel' from #retrieve_attribute_id

select c.* into #fulljoin from (
select b.attr_id, b.attribute as model_attribute, a.Org_Group, a.Location, a.[Function], a.Activity, a.Workstream, a.Equipment_Type, a.Equipment, a.Cost_Type, a.Product, a.Attribute, a.Value
from (vdt.attribute_category b inner join vdt.attribute x on b.attr_id=x.attr_id) full outer join #retrieve_attribute_id a 
on									coalesce(a.og_id		,-1)	= coalesce(b.og_id 		,-1)
								and coalesce(b.loc_id		,-1)	= coalesce(a.loc_id 	,-1)
								and coalesce(a.func_id		,-1)	= coalesce(b.func_id 	,-1)
								and coalesce(a.act_id		,-1)	= coalesce(b.act_id 	,-1)
								and coalesce(a.ws_id		,-1)	= coalesce(b.ws_id		,-1)
								and coalesce(a.eqp_id		,-1)	= coalesce(b.eqp_id		,-1)
								and coalesce(a.eqp_type_id	,-1)	= coalesce(b.eqp_type_id,-1)
								and coalesce(a.ct_id		,-1)	= coalesce(b.ct_id		,-1)
								and coalesce(a.prod_id      ,-1)    = coalesce(b.prod_id    ,-1)
								and coalesce(a.Attribute	,'')	= coalesce(b.attribute 	,'')
where x.is_calculated = 0) c 

insert into @results (severity, [message])
select top 25 'error', concat(org_group, '-', Location, '-', [Function], '-', [Activity], '-', Workstream, '-',
                              Equipment_Type, '-', Equipment, '-', Cost_Type, '-', Attribute, ' has no corresponding lever in the model')
from #fulljoin where attr_id is null;
if (select count(*) from #fulljoin where attr_id is null) > 25
insert into @results (severity, [message]) values ('error', 'More than 25 rows in the Excel file have no corresponding lever in the model')

insert into @results (severity, [message])
select top 25 'warning', concat(C.org_group, '-', C.Location, '-', C.[Function], '-', C.[Activity], '-', C.Workstream, '-',
                              C.Equipment_Type, '-', C.Equipment, '-', C.Cost_Type, '-', C.Attribute, ' is in the model but not in Excel')
from vdt.attribute_category C inner join #fulljoin F on C.attr_id=F.attr_id
where F.org_group is null;
if (select count(*) from #fulljoin where org_group is null) > 25
insert into @results (severity, [message]) values ('warning', 'More than 25 levers in the model do not have corresponding rows in the Excel file')

insert into @results (severity, [message])
select 'error', concat('Duplicate row: ', org_group, '-', location, '-', [function], '-', activity, '-', workstream, '-',
   equipment_type, '-', equipment, '-', cost_type, '-', attribute, '=', cast(value as nvarchar)) from #fulljoin where attr_id in (
select attr_id from #fulljoin where org_group is not null group by attr_id having count(*) > 1)
and org_group is not null order by attr_id

select a.attr_id, b.Value into #backcalcs  from vdt.attribute A
inner join #retrieve_attribute_id B
on                  coalesce(a.og_id    ,-1)  = coalesce(b.og_id    ,-1)
                and coalesce(b.loc_id   ,-1)  = coalesce(a.loc_id   ,-1)
                and coalesce(a.func_id    ,-1)  = coalesce(b.func_id  ,-1)
                and coalesce(a.act_id   ,-1)  = coalesce(b.act_id   ,-1)
                and coalesce(a.ws_id    ,-1)  = coalesce(b.ws_id    ,-1)
                and coalesce(a.eqp_id   ,-1)  = coalesce(b.eqp_id   ,-1)
                and coalesce(a.eqp_type_id  ,-1)  = coalesce(b.eqp_type_id,-1)
                and coalesce(a.ct_id    ,-1)  = coalesce(b.ct_id    ,-1)
				and coalesce(a.prod_id  ,-1)  = coalesce(b.prod_id  ,-1)
                and coalesce(a.attr_name  ,'')  = coalesce(b.attribute  ,'')
where a.attr_id is not null;

declare @err_count int = (select count(*) from @results where severity='error');
if @err_count > 0
begin
  insert into @results (severity, [message]) values ('info', 'Not creating data set due to ' + cast(@err_count as nvarchar) + ' errors');
end
else
begin
  insert into @results (severity, [message]) values ('info', 'Creating data set');
  declare @dataset_id int;

  insert into vdt.dataset (model_id, dataset_name, origin, last_update, [description], created, category_id, deleted)
  select @model_id, @dataset_name, 'user', CURRENT_TIMESTAMP, @description, CURRENT_TIMESTAMP, category_id, 0
  from vdt.dataset_category where category_name=@category;
  set @dataset_id=SCOPE_IDENTITY();

  insert into vdt.value (dataset_id, attr_id, value) select @dataset_id, attr_id, value from #backcalcs

  insert into @results (severity, [message]) values ('id', cast(@dataset_id as nvarchar));
  insert into @results (severity, [message]) values ('info', 'Data import complete');
end

drop table #Final_Calc_Dataset;
drop table #Final_Calc_Dataset_Complete;
drop table #MiningCostDrivers;
drop table #MiningCostRates;
drop table #retrieve_attribute_id;
drop table #final_attribute;
drop table #fulljoin;
drop table #ProductionTime
drop table #CostRates
drop table #ActiveRakesCalc
drop table #HaulAdjustments
drop table #LoadAdjustments
drop table #LoadHaulRHRate
drop table #PortCostDrivers
drop table #backcalcs


  -- return report to the user
  select * from @results;
end


GO


ALTER  procedure [vdt].[sp_get_vdt_data]
@dataset_id int, 
@benchmark_id int=null,
@user_id int,
@attributeIds vdt.IdFilterTableType READONLY

AS 
BEGIN 
     SET NOCOUNT ON 

	 declare @sec_level int;
	 set @sec_level = (select sec_level from vdt.[user] where [user_id] = @user_id);

SELECT
	V.[attr_id]
    ,UF.[format]
	,UF.[unit]
	,CASE WHEN @sec_level >=  A.sec_level THEN coalesce(B.value, V.value) ELSE null END AS base_value
	,CASE WHEN @sec_level >=  A.sec_level THEN BM.value ELSE null END AS benchmark
	,coalesce(((BM.value - coalesce(B.value, V.value)) / nullif(coalesce(B.value, V.value),0)),null) as target_change
	,coalesce(((coalesce(C.new_value, V.value) - coalesce(B.value, V.value)) / nullif(coalesce(B.value, V.value),0)),null) as what_if_change
	,CASE WHEN @sec_level >=  A.sec_level THEN coalesce(C.new_value, V.value) ELSE null END AS override_value
  FROM [vdt].[value] V
  inner join vdt.attribute A on V.attr_id = A.attr_id
  inner join vdt.dataset DS on V.dataset_id = DS.dataset_id
  left join vdt.scenario DSS on DS.dataset_id = DSS.view_dataset_id
  left join vdt.scenario_change C on DSS.scenario_id = C.scenario_id and A.attr_id = C.attr_id
  left join vdt.unit_format UF on A.unit = UF.unit
  left join vdt.value B on V.attr_id = B.attr_id and B.dataset_id = DSS.base_dataset_id
  left join vdt.value BM on V.attr_id = BM.attr_id and BM.dataset_id = @benchmark_id
  WHERE V.dataset_id = @dataset_id
  AND (A.attr_id IN (select id from @attributeIds))
  

END 

GO


commit transaction Version9;
go

PRINT 'Database has been updated successfully to version 9'
set noexec off;


--------------------------------------------------- Version 10 update ------------------------------------------------------------------

declare @cur_version int = (select max(db_version) from vdt.config)
IF @cur_version >= 10
begin
  print 'Skipping database update to v10; already at version ' + cast(@cur_version as nvarchar)
  set noexec on
end

begin transaction Version10;
go

set xact_abort on;
set nocount on;

INSERT INTO vdt.config([db_version],[updated_on]) VALUES(10,  getdate())
go


create procedure [vdt].[sp_get_custom_views]
AS 
BEGIN 
     SET NOCOUNT ON 


declare @views table (
    name nvarchar(50),
	sproc nvarchar(50),
	template nvarchar(100),
	filter_columns nvarchar(50),
	key_columns nvarchar(50));

 insert into @views (name, sproc, template, filter_columns, key_columns) values ('System View', 'vdt.sp_get_system_view', '/Content/templates/SystemView.html', 'Case,Display', 'Process,Attribute');

 select * from @views

END 

go


create procedure [vdt].[sp_get_system_view]  
@dataset_id int,
@user_id int
as

begin

with excl_port_and_shuttle as (
select
  case org_group
    when 'Mines' then [location] + ' ' + [activity]
	when 'Rail' then 'Rail Mainline'
	when 'Port' then 'Port ' + coalesce([location], [activity])
  end as Process,
  attribute,
  base_value,
  value
from vdt.data where attribute in ('Internal Capacity', 'Value Chain Tonnes')
and org_group <> 'Port' and ([function] <> 'Shuttle' or [function] is null)
and dataset_id=@dataset_id
)
,data as (
select * from excl_port_and_shuttle
union all
select 'Rail Shuttle' as Process, case when attribute='Actual Throughput' then 'Value Chain Tonnes' else attribute end as attribute, base_value, value
from vdt.data where [function]='Shuttle' and attribute in ('Actual Throughput', 'Internal Capacity') and dataset_id = @dataset_id
union all
select equipment as Process, case attribute /* Car dumpers */
  when 'Tonnes processed' then 'Value Chain Tonnes'
  when 'Internal process capacity' then 'Internal Capacity' end as attribute,
base_value, value from vdt.data where org_group='Port' and [activity]='Inflow' and equipment_type='Car Dumper'
and attribute in ('Tonnes processed', 'Internal process capacity') and dataset_id = @dataset_id
union all
select location as Process, case attribute /* Yards */
  when 'Yard inflow' then 'Value Chain Tonnes'
  when 'Yard capacity' then 'Internal Capacity' end as attribute,
base_value, value from vdt.data where org_group='Port' and activity='Outflow'
and attribute in ('Yard capacity', 'Yard inflow') and dataset_id = @dataset_id
union all
select case location   /* Shiploaders */
  when 'North Yard' then 'SL1&2'
  when 'East Yard' then 'SL3&4'
  when 'South Yard' then 'SL5&6'
  when 'West Yard' then 'SL7&8'
end as Process, case attribute
  when 'Yard outflow' then 'Value Chain Tonnes'
  when 'Shiploader capacity' then 'Internal Capacity' end as attribute,
base_value, value from vdt.data where org_group='Port' and activity='Outflow'
and attribute in ('Shiploader capacity', 'Yard outflow') and dataset_id = @dataset_id
)
,pivoted_prod as (
select T.Process, T.base_value as base_tonnes, T.value as scenario_tonnes, C.base_value as base_capacity, C.value as scenario_capacity,
         T.base_value / nullif(C.base_value,0) as base_uoc, T.value / nullif(C.value,0) as scenario_uoc,
		 case when T.base_value / nullif(C.base_value,0) > 0.9 then 14428421--'#dc2905'
		      when T.base_value / nullif(C.base_value,0) > 0.65 then 14448901--'#dc7905'
			  when T.base_value / nullif(C.base_value,0) > 0.40 then 6347781--'#60dc05'
			  else 9962972/*'#9805dc'*/ end as base_color,
		 case when T.value / nullif(C.value,0) > 0.9 then 14428421--'#dc2905'
		      when T.value / nullif(C.value,0) > 0.65 then 14448901--'#dc7905'
			  when T.value / nullif(C.value,0) > 0.40 then 6347781--'#60dc05'
			  else 9962972/*'#9805dc'*/ end as scenario_color
from data T inner join data C on T.Process=C.Process
where T.attribute='Value Chain Tonnes' and C.attribute='Internal Capacity')
,stock_data as (
select location + ' ' + equipment as Process, attribute, base_value, value
from vdt.data where attribute in ('Closing Balance', 'Maximum Level', 'Minimum Level')
  and equipment is not null and equipment <> 'Orebody'
and dataset_id=@dataset_id
)
,pivoted_stock as (
select T.Process, T.base_value as base_tonnes, T.value as scenario_tonnes, C.base_value as base_capacity, C.value as scenario_capacity,
         case when T.base_value > C.base_value then 1 else T.base_value / nullif(C.base_value,0) end as base_uoc,
		 case when T.value > C.value then 1 else T.value / nullif(C.value,0) end as scenario_uoc,
		 case when T.base_value / nullif(C.base_value,0) > 0.9 or T.base_value < L.base_value then 14428421--'#dc2905'
			  else 9962972/*'#9805dc'*/ end as base_color,
		 case when T.value / nullif(C.value,0) > 0.9 or T.value < L.value then 14428421--'#dc2905'
			  else 9962972/*'#9805dc'*/ end as scenario_color
from stock_data T inner join stock_data C on T.Process=C.Process inner join stock_data L on T.Process=L.Process
where T.attribute='Closing Balance' and C.attribute='Maximum Level' and L.attribute='Minimum Level'
union all
select [location] + ' Stock' as Process, base_value as base_tonnes, value as scenario_tonnes, 10000000 as base_capacity, 10000000 as scenario_capacity,
  case when base_value > 10000000 then 1 else base_value / 10000000 end as base_uoc,
  case when value > 10000000 then 1 else value / 10000000 end as scenario_uoc,
  case when base_value / 10000000 > 0.9 or base_value < 0 then 14428421--'#dc2905'
    else 9962972/*'#9805dc'*/ end as base_color,
  case when value / 10000000 > 0.9 or value < 0 then 14428421--'#dc2905'
    else 9962972/*'#9805dc'*/ end as scenario_color
from vdt.data where attribute in ('Closing stock')
and dataset_id=@dataset_id
)
,pivoted as (
select * from pivoted_prod
union all
select * from pivoted_stock
)
,result as (
select 'Scenario' as [Case], 'Current Tonnes' as [Display], Process, 'Tonnes' as Attribute, scenario_tonnes as Value, 'Mtpa' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Current Tonnes' as [Display], Process, 'Use of Capacity' as Attribute, scenario_uoc as Value, '%' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Current Tonnes' as [Display], Process, 'Fill Color' as Attribute, scenario_color as Value, 'color' as Unit from pivoted

union all

select 'Scenario' as [Case], 'Headroom' as [Display], Process, 'Tonnes' as Attribute, scenario_capacity - scenario_tonnes as Value, 'Mtpa' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Headroom' as [Display], Process, 'Use of Capacity' as Attribute, scenario_uoc as Value, '%' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Headroom' as [Display], Process, 'Fill Color' as Attribute, scenario_color as Value, 'color' as Unit from pivoted

union all

select 'Base Case' as [Case], 'Current Tonnes' as [Display], Process, 'Tonnes' as Attribute, base_tonnes as Value, 'Mtpa' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Current Tonnes' as [Display], Process, 'Use of Capacity' as Attribute, base_uoc as Value, '%' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Current Tonnes' as [Display], Process, 'Fill Color' as Attribute, base_color as Value, 'color' as Unit from pivoted

union all

select 'Base Case' as [Case], 'Headroom' as [Display], Process, 'Tonnes' as Attribute, base_capacity - base_tonnes as Value, 'Mtpa' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Headroom' as [Display], Process, 'Use of Capacity' as Attribute, base_uoc as Value, '%' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Headroom' as [Display], Process, 'Fill Color' as Attribute, base_color as Value, 'color' as Unit from pivoted
)

select * from result

end
go
commit transaction Version10;
go

PRINT 'Database has been updated successfully to version 10'
set noexec off;



--------------------------------------------------- Version 11 update ------------------------------------------------------------------

declare @cur_version int = (select max(db_version) from vdt.config)
IF @cur_version >= 11
begin
  print 'Skipping database update to v11; already at version ' + cast(@cur_version as nvarchar)
  set noexec on
end

begin transaction Version11;
go

set xact_abort on;
set nocount on;

INSERT INTO vdt.config([db_version],[updated_on]) VALUES(11,  getdate())
go


ALTER procedure [staging].[sp_import_excel]
  @dataset_name nvarchar(200),
  @model_id int,
  @user_id int,
  @description nvarchar(1000),
  @category nvarchar(100),
  @data staging.ExcelImportType readonly
as
begin
  set nocount on;

  declare @results table (severity nvarchar(20), [message] nvarchar(200));
  declare @shouldCopyData bit = 0
  -- severity is one of: info, warning, error
  insert into @results (severity, [message]) values ('info', 'Starting data import');

/***********************SUMMARY************************** 
Temp tables that exist are the following:
• #Final_Calc_Dataset - The input sheet
• #MiningCostDrivers - Majority of the cost drivers for mining
• #MiningCostRates;   
• #retrieve_attribute_id;    
• #final_attribute;   
• #fulljoin;   
• #ProductionTime - calcs to convert the hours into percentages for production data 
• #CostRates  - Includes the cost rate calc
• #ActiveRakesCalc  
• #HaulAdjustments - Includes the backcals for haul adjustments.
• #LoadAdjustments - Includes the backcals for load adjustments.
• #PortCostDrivers - Includes the port back calculations
*/

select * into #Final_Calc_Dataset from @data;

-- set blanks to null
update #Final_Calc_Dataset set Org_Group = null where Org_Group = '' ;
update #Final_Calc_Dataset set Location = null where Location = '' ;
update #Final_Calc_Dataset set [Function] = null where [Function] = '' ;
update #Final_Calc_Dataset set Activity = null where Activity = '' ;
update #Final_Calc_Dataset set Equipment_Type = null where Equipment_Type = '' ;
update #Final_Calc_Dataset set Equipment = null where Equipment = '' ;
update #Final_Calc_Dataset set Workstream = null where Workstream = '' ;
update #Final_Calc_Dataset set Cost_Type = null where Cost_Type = '' ;
update #Final_Calc_Dataset set Product = null where Product = '' ;
update #Final_Calc_Dataset set Attribute = null where Attribute = '' ;

 --Table updates to conform to the attribute fact table and back calculations
update #Final_Calc_Dataset set Equipment = 'Drill Stock', Equipment_Type='Stockpile' where Equipment = 'Drill Inventory'  --- DKT
update #Final_Calc_Dataset set attribute = 'Tonnes blasted' where attribute = 'Tonnes of ore blasted' ;
update #Final_Calc_Dataset set Equipment_Type = 'Loader' where Equipment_Type = 'Loaders' ;
update #Final_Calc_Dataset set Equipment_Type = 'Excavator' where Equipment_Type = 'Excavators' ;
update #Final_Calc_Dataset set Equipment_Type = 'Truck' where Equipment_Type = 'Trucks' ;
update #Final_Calc_Dataset set Attribute = 'Closing stock' where  Attribute = 'Closing balance' and org_group = 'Port' ;
update #Final_Calc_Dataset set Attribute = 'L/F split' where  Attribute = 'L/F split ratio' ;
update #Final_Calc_Dataset set Attribute = 'Total movement tonnes' where	Attribute = 'Total movement'	and Activity is not null 
																		and Workstream is not null and Equipment_Type is not null 
																		and Equipment is not null ;
update #Final_Calc_Dataset set Attribute = 'Target Tonnes' where Attribute = 'Throughput'; 
update #Final_Calc_Dataset set Attribute = 'Average no. of drills' where Attribute = 'Average no of drills'; 
update #Final_Calc_Dataset set Attribute = 'Starved/blocked' where Attribute = 'Starved/block time'; 
update #Final_Calc_Dataset set Attribute = 'Unscheduled process downtime excl. starve/block' where Attribute = 'Unscheduled operating loss time (exclude starve/block time)'; 
update #Final_Calc_Dataset set Equipment_Type = 'CFR Ships' Where attribute = 'CFR ratio'
update #Final_Calc_Dataset set Equipment_Type = 'FOB Ships' Where attribute = 'FOB ratio'


-------------------######################################################################################################################-----------------------	
-------------------######################################################################################################################-----------------------
-------------------######################################################################################################################-----------------------
----------------------------------------------------------------------------Mining------------------------------------------------------------------------------

--=====================================================================INITIAL CHECKS===========================================================================

-- check if tonnes of ore blasted has missing values
insert into @results (severity, [message])
select 'warning', Location + ' tonnes blasted is zero or blank' from #Final_Calc_Dataset where Attribute='Tonnes blasted' and (Value is null or Value = 0)


-- check if drill stock has missing values
insert into @results (severity, [message])
select 'warning', Location + ' drill stock is zero or blank' from #Final_Calc_Dataset where Equipment = 'Drill Stock' and Attribute='Closing balance' and (Value is null or Value = 0)
;

--=====================================================================Calculations===========================================================================
With DrillDensity as (
			select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Density'  as 'Attribute', c.Unit, c.[Cost?] 
				,case when pb.[Value] = 0 then '0' else (pa.[Value]) / pb.[Value] end as  [Value]
				FROM #Final_Calc_Dataset C
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'') 
				inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.activity,'') = coalesce(pb.activity,'')
				where c.Activity = 'Drill' and pa.Attribute = 'Tonnes drilled' and pb.Attribute = 'Volume drilled' and c.Unit = 'tpa')
			-- drill inventory opening balance
	,DrillInventoryOpeningBal as		
			(select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], 'Drill Stock' as 'Equipment', c.Cost_Type, c.Product, 'Opening Balance'  as 'Attribute', c.Unit, c.[Cost?] 
				,c.Value+ pb.Value - (select sum(pa.Value))  as  [Value]--, c.Value ggsg, pb.value sdsfs, pa.value sdsa
				FROM #Final_Calc_Dataset C
				inner join #Final_Calc_Dataset pa on  coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') 
				inner join #Final_Calc_Dataset pb on  coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') 
				where c.Equipment = 'Drill Stock'  and pb.attribute='Tonnes blasted' and pa.attribute= 'Tonnes Drilled' and pa.Equipment like 'Drill Production%'
				group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.Unit, c.[Cost?],pa.Value, pb.Value, c.Value)
	,DisplacedVolume as 
			-- Displaced Volume
			(select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Displaced Volume'  as 'Attribute', c.Unit, c.[Cost?] 
				,case when c.value*pb.value = 0 then 0 else pa.[Value]/(c.[Value]*pb.[Value]) end as  [Value]
				FROM #Final_Calc_Dataset C
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'') 
				inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.activity,'') = coalesce(pb.activity,'')
				where pa.attribute='Volume drilled' and pb.attribute='Meters drilled per rig' and c.Attribute = 'Average no. of drills')
			-- cost explosive per kg
	,CostPerExplosive as		
			( select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost explosive per kg'  as 'Attribute', c.Unit, c.[Cost?] 
				,case when (pa.[Value]*pb.[Value]) = 0 then 0 else c.[Value]/(pa.[Value]*pb.[Value]) end as  [Value]
				--, c.value as llsk, pa.value sdjfm, pb.value sjjfs 
				FROM #Final_Calc_Dataset C
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'') 
				inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.activity,'') = coalesce(pb.activity,'')
				where pa.activity='Blast' and pa.attribute='Powder factor' and pb.attribute='Tonnes blasted' and c.cost_type = 'Consumables')
	,DieselPricePerLitreHaul as (
			-- Equipment Price per Litre, check values being imported - Haul
			select distinct  
			C.[Sheet], c.[Org_Group], C.Location, C.[function], 'Haul' as 'Activity', 'Operations' as 'Workstream', C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Diesel price per litre'  as 'Attribute', c.Unit, c.[Cost?]
					,case when (pa.[Value]=0 or pa.[Value] is NULL) then 1 else (c.[Value]/ pa.[Value]) end as  [Value]
					FROM #Final_Calc_Dataset c
					left join #Final_Calc_Dataset pa on pa.attribute='Litres consumed' and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'')
					where c.org_group = 'Mines' and  c.Cost_Type = 'Diesel' and c.Activity = 'Haul')
	,DieselPricePerLitreLoad as (
			-- Equipment Price per Litre, check values being imported - Load
			select distinct  
			C.[Sheet], c.[Org_Group], C.Location, C.[function], 'Load' as 'Activity', 'Operations' as 'Workstream', C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Diesel price per litre'  as 'Attribute', c.Unit, c.[Cost?]
					,case when (pa.[Value]=0 or pa.[Value] is NULL) then 1 else (c.[Value] / pa.[Value]) end as  [Value]
					FROM #Final_Calc_Dataset c
					left join #Final_Calc_Dataset pa on pa.attribute='Litres consumed' and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'')
					where c.org_group = 'Mines' and  c.Cost_Type = 'Diesel' and c.Activity = 'Load')
				-- Burn Rate, only applicable to load
	,BurnRateLitresGiven as (
			select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, 'Diesel' as Cost_Type, c.Product, 'Burn Rate'  as 'Attribute', c.Unit, c.[Cost?]					
					,case when pa.[Value] in ('0', NULL)  or pb.[Value] in ('0', NULL) 
					then c.[Value] else (c.[Value]/(pa.[Value]/pb.[Value])) end  as  [Value]
					FROM #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'')
					inner join #Final_Calc_Dataset pb on coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'')  and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.activity,'') = coalesce(pb.activity,'')
					where c.attribute='Litres consumed' and  pa.attribute='Total movement tonnes' and pb.attribute = 'Net rate' and c.Value <> 0)
	,BurnRateNoLitres as (
		select distinct  C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, 'Diesel' as Cost_Type, c.Product, 'Burn Rate'  as 'Attribute', c.Unit, c.[Cost?]					
					,c.Value
					FROM #Final_Calc_Dataset c
					left join #Final_Calc_Dataset pa on pa.attribute = 'Litres consumed' and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'')
					where c.attribute='Variable cost' and c.cost_type='Diesel' and c.Activity in ('Load', 'Haul') and  (pa.attribute is null or pa.Value=0))
	,BurnRate as (
	  select * from BurnRateLitresGiven union all select * from BurnRateNoLitres)
	,RhTonnesperc as (
			-- rehandle tonnes %
			select distinct  c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RH tonnes %'  as 'Attribute', c.Unit, c.[Cost?]  
					,case when pa.[Value] in ('0', NULL)  
					then 0 else (c.[Value]/pa.[Value]) end  as  [Value]
					FROM #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'')
					where c.attribute='Rehandle movement' and  pa.attribute='Total movement tonnes'
			 )  

				 Select a.* into #MiningCostDrivers from (  
				select * from DrillDensity union all
				--select * from DrillInventoryOpeningBal union all
				select * from DisplacedVolume union all
				select * from CostPerExplosive union all
				select * from DieselPricePerLitreHaul union all
				select * from DieselPricePerLitreLoad union all
				select * from BurnRate union all
				select * from RhTonnesperc ) a;

--select * from #MiningCostDrivers
-- Check drill stock sizes, if density is greater than a particular value
-- investigate cost per kg explosives
-- if the sum of drill stock is larger than x% of total tonnes then flag
insert into @results (severity, [message])
select 'warning', Location + ' cost explosive per kg calculated to be less than $0.01' from #MiningCostDrivers where Attribute='Cost explosive per kg' and Value < 0.01
;

with FleetsWithDieselBurnRate as (
select Location, Activity, Equipment_Type, Equipment from #Final_Calc_Dataset
where activity in ('Load', 'Haul') and Cost_Type='Diesel' and Attribute='Variable Cost' and (Value is null or Value <> 0)
)
insert into @results (severity, [message])
select 'warning', F.Location + ' ' + F.Equipment + ' diesel burn rate/price not calculated - check tonnes'
from FleetsWithDieselBurnRate F left join #MiningCostDrivers C on F.Location=C.Location and F.Activity=C.Activity
and F.Equipment_Type=C.Equipment_Type and F.Equipment=C.Equipment and C.Attribute = 'Diesel price per litre'
where (C.Value is null or C.Value = 0)
;
--Net rate calcs & Checks
-- OEE BackCalcs


with CalendarTime as (
			-- Calendar Time hours
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Calendar time'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value as Value
							from #Final_Calc_Dataset c
							where c.Attribute = 'Calendar time' )

	, CalenderTimeNotAggregate as (
				-- Calendar Time not aggregated
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Calendar time Not Aggregate'  as 'Attribute', c.Unit, c.[Cost?]
							, case when ca.Value = 0 then 0 else c.Value/ca.Value end as Value
							from CalendarTime c
							inner join #Final_Calc_Dataset ca on c.Activity = ca.Activity and c.Equipment = ca.Equipment
							where c.Attribute = 'Calendar time' and ca.Attribute = 'Average number of units'
									) 

	,StandbyTime as (
			-- Standby Time
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Standby time'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
			from #Final_Calc_Dataset c
			where c.Attribute = 'Standby time' )

	,ScheduledEquipDowntime as (
			-- scheduled equipment downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Scheduled equipment downtime raw'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value as Value
							from #Final_Calc_Dataset c
							where c.Attribute = 'Scheduled equipment downtime' )-- select * from ScheduledEquipDowntime

	,UnscheduledEquipDowntime as (
			-- unscheduled equipment downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Unscheduled equipment downtime raw'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
						from #Final_Calc_Dataset c
						where c.Attribute = 'Unscheduled equipment downtime' )

	,ScheduledProcessDowntime as (
			-- Scheduled Process Downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Scheduled process downtime raw'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
						from #Final_Calc_Dataset c
						where c.Attribute = 'Scheduled process downtime' )
--  Unscheduled process downtime excl. starve/block
	,UnscheduledProcessDowntime_exclsb as (
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Unscheduled process downtime excl. starve/block raw'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value as Value
							from #Final_Calc_Dataset c
							where c.Attribute in ('Unscheduled process downtime', 'Unscheduled process downtime excl. starve/block')) 
-- Starve Block time
	,Starve_Block as (
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Starved/blocked time raw'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value as Value
							from #Final_Calc_Dataset c
							where c.Attribute in ('Starved/blocked', 'Starved/blocked time')) --select * from Starve_Block
-- Production Time
	,ProductionTime as ( select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Production Time'  as 'Attribute', c.Unit, c.[Cost?]
									,ISNULL(c.Value,0) - (ISNULL(ca.Value,0) + ISNULL(cb.Value,0) + ISNULL(cc.Value,0) + ISNULL(cd.Value,0) +  ISNULL(ce.Value,0) + ISNULL(cf.Value,0))  as Value
									--,c.Value ss,ca.Value sdas,cb.Value dsad,cc.Value fsaa,cd.Value fsa ,ce.Value fssa ,cf.Value faa
						from #Final_Calc_Dataset c
						left join StandbyTime							ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
						left join ScheduledEquipDowntime				cb on coalesce(c.org_group ,'') = coalesce(cb.org_group ,'') and coalesce(c.location  ,'') = coalesce(cb.Location  ,'') and coalesce(c.[function],'') = coalesce(cb.[function],'')  and coalesce(c.equipment,'') = coalesce(cb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cb.equipment_type,'') and coalesce(c.activity,'') = coalesce(cb.activity,'') and coalesce(c.workstream,'') = coalesce(cb.workstream,'')
						left join UnscheduledEquipDowntime				cc on coalesce(c.org_group ,'') = coalesce(cc.org_group ,'') and coalesce(c.location  ,'') = coalesce(cc.Location  ,'') and coalesce(c.[function],'') = coalesce(cc.[function],'')  and coalesce(c.equipment,'') = coalesce(cc.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cc.equipment_type,'') and coalesce(c.activity,'') = coalesce(cc.activity,'') and coalesce(c.workstream,'') = coalesce(cc.workstream,'')
						left join ScheduledProcessDowntime				cd on coalesce(c.org_group ,'') = coalesce(cd.org_group ,'') and coalesce(c.location  ,'') = coalesce(cd.Location  ,'') and coalesce(c.[function],'') = coalesce(cd.[function],'')  and coalesce(c.equipment,'') = coalesce(cd.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cd.equipment_type,'') and coalesce(c.activity,'') = coalesce(cd.activity,'') and coalesce(c.workstream,'') = coalesce(cd.workstream,'')
						left join UnscheduledProcessDowntime_exclsb		ce on coalesce(c.org_group ,'') = coalesce(ce.org_group ,'') and coalesce(c.location  ,'') = coalesce(ce.Location  ,'') and coalesce(c.[function],'') = coalesce(ce.[function],'')  and coalesce(c.equipment,'') = coalesce(ce.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ce.equipment_type,'') and coalesce(c.activity,'') = coalesce(ce.activity,'') and coalesce(c.workstream,'') = coalesce(ce.workstream,'')
						left join Starve_Block							cf on coalesce(c.org_group ,'') = coalesce(cf.org_group ,'') and coalesce(c.location  ,'') = coalesce(cf.Location  ,'') and coalesce(c.[function],'') = coalesce(cf.[function],'')  and coalesce(c.equipment,'') = coalesce(cf.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cf.equipment_type,'') and coalesce(c.activity,'') = coalesce(cf.activity,'') and coalesce(c.workstream,'') = coalesce(cf.workstream,'')
						where c.Attribute = 'Calendar time') --select * from ProductionTime
--LeverCalculation 
	,UnscheduledEquipDowntimeBc as (
			-- unscheduled equipment downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Unscheduled equipment downtime'  as 'Attribute','%' as 'Unit', c.[Cost?]
						, case when (c.Value + ca.Value) = 0 then 0 else c.Value / (c.Value + ca.Value) end as Value
						from #Final_Calc_Dataset c
						inner join ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
						where c.Attribute = 'Unscheduled equipment downtime' )  

	,ScheduledProcessDowntimeBc as (
			-- Scheduled Process Downtime
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Scheduled process downtime'  as 'Attribute','%' as 'Unit', c.[Cost?]
						, case when (c.Value + ca.Value) = 0 then 0 else c.Value / (c.Value + ca.Value) end as Value
						from #Final_Calc_Dataset c
						inner join ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
						where c.Attribute = 'Scheduled process downtime' ) --select * from ScheduledProcessDowntimeBc

--  Unscheduled process downtime excl. starve/block
	,UnscheduledProcessDowntime_exclsbBc as (
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Unscheduled process downtime excl. starve/block'  as 'Attribute', '%' as 'Unit', c.[Cost?]
						, case when (c.Value + ca.Value) = 0 then 0 else c.Value / (c.Value + ca.Value) end as Value
						from #Final_Calc_Dataset c
						inner join ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
						where c.Attribute = 'Unscheduled process downtime excl. starve/block') --select * from UnscheduledProcessDowntime_exclsbBc
	,CalculatedNetRate as ( 
			select distinct c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Calculated Net Rate'  as 'Attribute', 't/hr' as 'Unit', c.[Cost?]
					, case when ca.Value = 0 then 0 else c.value / ca.Value end as Value
					from #Final_Calc_Dataset c
					inner join ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'')
					where c.Attribute = 'Total movement tonnes')
				
				
			select a.* into #ProductionTime from (
				select * from UnscheduledEquipDowntimeBc			union all
				select * from CalendarTime							union all
				select * from StandbyTime							union all
				select * from ScheduledEquipDowntime				union all
				select * from UnscheduledEquipDowntime				union all
				select * from ScheduledProcessDowntime				union all
				select * from UnscheduledProcessDowntime_exclsb		union all
				select * from ScheduledProcessDowntimeBc			union all
				select * from UnscheduledProcessDowntime_exclsbBc	union all
				select * from CalenderTimeNotAggregate				union all
				select * from CalculatedNetRate						union all
				select * from ProductionTime
				) a;

-- if a mismatch here - investigate
--Select count(*) from #Final_Calc_Dataset  where attribute not in ('Fixed Cost', 'Variable Cost') and attribute = 'Calendar Time';
--Select * from #ProductionTime where Attribute = 'Calendar Time';
-- check if calendar time is greater than a particular value
--select * from #ProductionTime;

insert into @results (severity, [message])
select 'error', Location + ' ' + Equipment + ' production time less than zero'
from #ProductionTime where Attribute='Production Time' and Value < 0

--- Checks to ensure net rate matches total movement 
-- Check this again - You need the raw net rate to check otherwise it makes no sense!!
insert into @results (severity, [message])
select case when V.variance > 0.2 then 'error' else 'warning' end,
  V.Location + ' ' + V.Equipment + ' variance between total movement and net rate x production time is ' + cast(cast(V.variance*100 as int) as nvarchar) + '%'
from (select a.Location, a.Activity, a.Equipment_Type, a.Equipment, a.Value as 'TM', b.value as 'NR', c.Value as 'PT',
  case
    when a.Value=b.Value*c.Value*d.Value then 0
	when a.Value <> b.Value*c.Value*d.Value and (a.Value = 0 or b.Value*c.Value*d.Value=0) then 1
	else (b.Value*c.Value*d.Value)/ a.Value - 1
  end as variance
  from #Final_Calc_Dataset a
  	inner join #Final_Calc_Dataset b on a.Location=b.Location and a.Activity=b.Activity and a.Equipment_Type=b.Equipment_Type and a.Equipment = b.Equipment
  	inner join #ProductionTime c on a.Location=c.Location and a.Activity=c.Activity and a.Equipment_Type=c.Equipment_Type and a.Equipment = c.Equipment
  	inner join #Final_Calc_Dataset d on a.Location=b.Location and a.Activity=d.Activity and a.Equipment_Type=d.Equipment_Type and a.Equipment = d.Equipment
  	where a.Attribute = 'Total movement tonnes' and b.Attribute = 'Net Rate' and c.Attribute = 'Production Time' and d.Attribute='Average number of units') V
  where V.variance > 0.05
  	;

-- Back-calculate RH rate, using either (a) given value, (b) RH tonnes / RH hours, or (c) assuming the same net rate as PM
with LoadHaul_RH_rate_given as (
  Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RH rate'  as 'Attribute', c.Unit, c.[Cost?]
    , c.Value
  from #Final_Calc_Dataset c where C.Activity in ('Load', 'Haul') and c.Attribute='RH rate')

, LoadHaul_RH_rate_ratio as (
  Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RH rate'  as 'Attribute', c.Unit, c.[Cost?]
    , case when pa.Value = 0 then 0 else c.Value / pa.Value end as Value
  from #Final_Calc_Dataset c
  inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
  where C.Activity in ('Load', 'Haul') and c.Attribute='Rehandle movement'
    and pa.Activity in ('Load', 'Haul') and pa.Attribute='Rehandle hours')

, LoadHaul_RH_rate_consol as (
  Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RH rate'  as 'Attribute', c.Unit, c.[Cost?]
    , coalesce(pa.Value, pb.Value, c.Value) as Value
  from #Final_Calc_Dataset c
  left join LoadHaul_RH_rate_given pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
  left join LoadHaul_RH_rate_ratio pb on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
  where C.Activity in ('Load', 'Haul') and c.Attribute='Net rate'
    and (pa.Value is null or pa.Activity in ('Load', 'Haul') and pa.Attribute='RH rate')
    and (pb.Value is null or pb.Activity in ('Load', 'Haul') and pa.Attribute='RH rate'))

select * into #LoadHaulRHRate from LoadHaul_RH_rate_consol;

--select * from #LoadHaulRHRate

-- Load adjustments
with TotalProductiveMovementLoad as ( 
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total Productive Movement'  as 'Attribute', c.Unit, c.[Cost?] 
				, sum(distinct c.value) - sum( distinct pa.value) as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Attribute = 'Total Movement tonnes' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Load'
					group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] 
					 ) --select * from TotalProductiveMovementLoad
					 --done
	
	,TotalRehandleMovementLoad as ( 
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total Rehandle Movement'  as 'Attribute', c.Unit, c.[Cost?]
					,  sum(distinct c.value)  as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where  c.Activity = 'Load'  and c.Attribute = 'Rehandle movement' 
					group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] 
					) --select * from TotalRehandleMovementLoad
					--done
	
	,ReportProductiveMovement as (
						Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, 'Report Productive Movement'  as 'Attribute', c.Unit, c.[Cost?]
								,   sum(distinct c.value)  as Value
				from #Final_Calc_Dataset c 
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
				where  c.Attribute = 'Productive movement' and c.Activity is null
				group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, c.Unit, c.[Cost?] ) --select * from ReportProductiveMovement
				--done	
	,ReportRehandleMovement as (
				select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, 'Report Rehandle Movement'  as 'Attribute', c.Unit, c.[Cost?]
								, c.value - pa.value as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where  c.Attribute = 'Total Movement' and pa.Attribute = 'Productive movement'
					)-- select * from ReportRehandleMovement 
					-- done
	
	,RateAdjLoad as (
				Select C.[Sheet], c.[Org_Group], C.Location, 'Adjusted Rate factor' as Attribute
					,case when sum(c.Value) = 0 then 0 else sum(distinct pa.value)/sum (distinct c.Value) end as Value
					--,c.Value sfsf, pa.Value sfffss
					from TotalProductiveMovementLoad c, ReportProductiveMovement pa 
					where c.Location = pa.Location
					group by  C.Location, c.Sheet, c.Org_Group
					)-- select * from RateAdjLoad  
					--done
	
	,RHTonnespercLoad as (
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Tonnes Movement Ratio'  as 'Attribute', c.Unit, c.[Cost?]
					, case when c.Value = 0 then 0 else pa.Value / c.Value end as Value--, pa.Value ssdsd, c.Value gddga
					from  #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'Total movement tonnes' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Load'
					
					) --select * from RHTonnespercLoad

	,RHhoursLoad as (
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Hours'  as 'Attribute', c.Unit, c.[Cost?]
					, case when c.Value = 0 then 0 else pa.Value / c.Value end as Value
					from  #LoadHaulRHRate c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'RH rate' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Load'
				) --select * from RHhoursLoad

	,ProductionHrs as ( -- Total Operating time
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Production Time'  as 'Attribute', c.Unit, c.[Cost?]
					, case when pa.Value = 0 then 0 else (c.Value) / (pa.Value) end as Value
					from  #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
				--	inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pb.cost_type,'') and coalesce(c.workstream,'') = coalesce(pb.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'Total movement tonnes' and pa.Attribute = 'Net rate' --and c.Activity = 'Load' and pb.Attribute = 'Average number of units' and pb.Activity = 'Load'
						) --select * from ProductionHrs

	,PMRateLoad as ( 
				select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'PM rate'  as 'Attribute', c.Unit, c.[Cost?]
					, case when pa.Value - pb.Value = 0 then 0 else c.Value/(pa.Value - pb.Value) end as Value
					from TotalProductiveMovementLoad c
					inner join ProductionHrs pa  on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					inner join RHhoursLoad pb on		coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pb.cost_type,'') and coalesce(c.workstream,'') = coalesce(pb.workstream,'')
					where c.Attribute = 'Total Productive Movement' and pa.Attribute = 'Production Time' and pb.Attribute = 'Rehandle Hours')
					--select * from PMRateLoad
					-- Done
	,RHRateLoad as (Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Rate %'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
					from #LoadHaulRHRate c
					where c.Activity = 'Load' and c.Attribute = 'RH rate')  --select * from RHRateLoad
  
	-- backcalcs starting
	,PMRateAdj_LoadBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted PM rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from PMRateLoad c, RateAdjLoad b 
							where c.Location = b.Location and b.Org_Group = c.Org_Group )  -- select * from PMRateAdj_LoadBc
	
	,RHRateAdj_LoadBc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted RH rate'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*b.Value as Value
								from RHRateLoad c, RateAdjLoad b
								where c.Location = b.Location)  --select * from RHRateAdj_LoadBc
	
	,ProductiveTonnes_LoadBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Productive Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*(b.Value -d.Value) as Value
									from PMRateAdj_LoadBc c
									inner join ProductionHrs b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
									inner join RHhoursLoad d on coalesce(c.Activity, '') = coalesce(d.Activity,'') and coalesce(c.org_group ,'') = coalesce(d.org_group ,'') and coalesce(c.location  ,'') = coalesce(d.Location  ,'') and coalesce(c.[function],'') = coalesce(d.[function],'') and coalesce(c.equipment,'') = coalesce(d.equipment,'') and coalesce(c.equipment_type,'') = coalesce(d.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(d.cost_type,'') and coalesce(c.workstream,'') = coalesce(d.workstream,'')
									where c.Location = b.Location and b.Attribute = 'Production Time' and c.Attribute = 'Adjusted PM rate' and d.Attribute = 'Rehandle Hours') --select * from ProductiveTonnes_LoadBc
	
	,RehandleTonnes_LoadBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Rehandle Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
									, c.Value*b.Value as Value
									from RHRateAdj_LoadBc c
									inner join RHhoursLoad b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
									where c.location = b.location) --select * from RehandleTonnes_LoadBc
	
	,TotalRHTonnes_LoadBc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Total RH Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*b.Value as Value
								from RHRateAdj_LoadBc c
								inner join RHhoursLoad b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
								) --select * from TotalRHTonnes_LoadBc
	, TotalRHPerMineLoad as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, NULL as [Equipment_type], 'NULL' As equipment, c.Cost_Type, c.Product, 'Adjusted Total RH Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, sum(c.Value*b.Value) as Value
								from RHRateAdj_LoadBc c
								inner join RHhoursLoad b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
								group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, c.Unit, c.[Cost?]
								
								) -- select * from TotalRHPerMine

	,TargetTonnes_Bc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Target Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value + b.Value as Value
							from ProductiveTonnes_LoadBc c
							inner join RehandleTonnes_LoadBc b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
							where c.Location = b.Location)  --select * from TargetTonnes_Bc
	

	/*Additional rates to be added to both load & haul*/

	,Load_AdjDesignRate as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Design Rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjLoad b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Design Rate' and c.Activity = 'Load') --select * from Load_AdjDesignRate

	,Load_AdjNetRate as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Net Rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjLoad b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Net Rate' and c.Activity = 'Load') --select * from Load_AdjDesignRate

	,Adj_TM as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total movement tonnes'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjLoad b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Total Movement tonnes' and c.Activity = 'Load') --select * from Adj_TM where Location = 'Whaleback'

	,Adj_RM as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle movement'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjLoad b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Rehandle movement' and c.Activity = 'Load') --select * from Adj_RM

	,Adj_RR as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RH rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #LoadHaulRHRate c
							inner join RateAdjLoad b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'RH rate' and c.Activity = 'Load') --select * from Adj_RM

	,Rehandle_Other as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], b.Activity, 'Operations' as Workstream, NULL as equipment_type, NULL as equipment, NULL as Cost_Type, NULL as Product, 'Rehandle Other'  as 'Attribute', c.Unit, c.[Cost?] 
							,c.Value - b.Value as Value
							from  (select sum(value) as value, Activity, Location as Location from Adj_RM where activity = 'Load' group by Location, activity ) b
							inner join ReportRehandleMovement c on coalesce(c.location  ,'') = coalesce(b.Location  ,'') 
							where c.Location = b.Location 
					)  --select * from Rehandle_Other


			select a.* into #LoadAdjustments from (
			select * from Load_AdjDesignRate union all
			select * from Load_AdjNetRate union all
			select * from Adj_TM union all
			select * from Adj_RM union all
			select * from Adj_RR union all
			select * from Rehandle_Other) a;

-- Mismatch - Investigate
--Select count(distinct Equipment)*5 from #Final_Calc_Dataset where activity = 'Load' and attribute not in ('Fixed Cost', 'Variable Cost')
-- ensure that the total productive movement has values
--Select * from #LoadAdjustments where equipment = 'WB LBHR 996 EXC'

-- Haul adjustments
with TotalProductiveMovementHaul as ( 
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total Productive Movement'  as 'Attribute', c.Unit, c.[Cost?] 
				, sum(distinct c.value) - sum( distinct pa.value) as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Attribute = 'Total Movement tonnes' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Haul'
					group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] 
					 ) --select * from TotalProductiveMovementHaul
					 --done
	
	,TotalRehandleMovementHaul as ( 
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total Rehandle Movement'  as 'Attribute', c.Unit, c.[Cost?]
					,  sum(distinct c.value)  as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where  c.Activity = 'Haul'  and c.Attribute = 'Rehandle movement' 
					group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] 
					) --select * from TotalRehandleMovementHaul
					--done
	
	,ReportProductiveMovement as (
						Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, 'Report Productive Movement'  as 'Attribute', c.Unit, c.[Cost?]
								,   sum(distinct c.value)  as Value
				from #Final_Calc_Dataset c 
				inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
				where  c.Attribute = 'Productive movement' and c.Activity is null
				group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, c.Unit, c.[Cost?] ) --select * from ReportProductiveMovement
				--done	
	,ReportRehandleMovement as (
				select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, 'Report Rehandle Movement'  as 'Attribute', c.Unit, c.[Cost?]
								, c.value - pa.value as Value
					from #Final_Calc_Dataset c 
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where  c.Attribute = 'Total Movement' and pa.Attribute = 'Productive movement'
					)-- select * from ReportRehandleMovement 
					-- done
	
	,RateAdjHaul as (
				Select C.[Sheet], c.[Org_Group], C.Location, 'Adjusted Productive Movement Rate factor' as Attribute
					,case when sum(c.Value) = 0 then 0 else sum(distinct pa.value)/sum (distinct c.Value) end as Value
					--,c.Value sfsf, pa.Value sfffss
					from TotalProductiveMovementHaul c, ReportProductiveMovement pa 
					where c.Location = pa.Location
					group by  C.Location, c.Sheet, c.Org_Group
					) --select * from RateAdjPMHaul  
					--done
	
	,RHTonnespercHaul as (
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Tonnes Movement Ratio'  as 'Attribute', c.Unit, c.[Cost?]
					, case when c.Value = 0 then 0 else pa.Value / c.Value end as Value--, pa.Value ssdsd, c.Value gddga
					from  #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'Total movement tonnes' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Haul'
					
					) --select * from RHTonnespercHaul

	,RHhoursHaul as (
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Hours'  as 'Attribute', c.Unit, c.[Cost?]
					, case when c.Value = 0 then 0 else pa.Value / c.Value end as Value
					from  #LoadHaulRHRate c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'RH rate' and pa.Attribute = 'Rehandle movement' and c.Activity = 'Haul'
				) --select * from RHhoursHaul

	,ProductionHrs as ( -- Total Operating time
				Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Production Time'  as 'Attribute', c.Unit, c.[Cost?]
					, case when pa.Value = 0 then 0 else (c.Value) / (pa.Value) end as Value
					from  #Final_Calc_Dataset c
					inner join #Final_Calc_Dataset pa on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
				--	inner join #Final_Calc_Dataset pb on coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pb.cost_type,'') and coalesce(c.workstream,'') = coalesce(pb.workstream,'') 
					where c.Location = pa.Location and c.Attribute = 'Total movement tonnes' and pa.Attribute = 'Net rate' --and c.Activity = 'Haul' and pb.Attribute = 'Average number of units' and pb.Activity = 'Haul'
						) --select * from ProductionHrs

	,PMRateHaul as ( 
				select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'PM rate'  as 'Attribute', c.Unit, c.[Cost?]
					, case when pa.Value - pb.Value = 0 then 0 else c.Value/(pa.Value - pb.Value) end as Value
					from TotalProductiveMovementHaul c
					inner join ProductionHrs pa  on coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'') and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pa.cost_type,'') and coalesce(c.workstream,'') = coalesce(pa.workstream,'') 
					inner join RHhoursHaul pb on		coalesce(c.Activity, '') = coalesce(pb.Activity,'') and coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.location  ,'') = coalesce(pb.Location  ,'') and coalesce(c.[function],'') = coalesce(pb.[function],'') and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(pb.cost_type,'') and coalesce(c.workstream,'') = coalesce(pb.workstream,'')
					where c.Attribute = 'Total Productive Movement' and pa.Attribute = 'Production Time' and pb.Attribute = 'Rehandle Hours')
					--select * from PMRateHaul
					-- Done
	,RHRateHaul as (Select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Rehandle Rate %'  as 'Attribute', c.Unit, c.[Cost?]
						, c.Value as Value
					from #LoadHaulRHRate c
					where c.Activity = 'Haul' and c.Attribute = 'RH rate')  --select * from RHRateHaul
  
	-- backcalcs starting
	,PMRateAdj_HaulBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted PM rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from PMRateHaul c, RateAdjHaul b 
							where c.Location = b.Location and b.Org_Group = c.Org_Group )  -- select * from PMRateAdj_HaulBc
	
	,RHRateAdj_HaulBc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted RH rate'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*b.Value as Value
								from RHRateHaul c, RateAdjHaul b
								where c.Location = b.Location)  --select * from RHRateAdj_HaulBc
	
	,ProductiveTonnes_HaulBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Productive Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*(b.Value -d.Value) as Value
									from PMRateAdj_HaulBc c
									inner join ProductionHrs b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
									inner join RHhoursHaul d on coalesce(c.Activity, '') = coalesce(d.Activity,'') and coalesce(c.org_group ,'') = coalesce(d.org_group ,'') and coalesce(c.location  ,'') = coalesce(d.Location  ,'') and coalesce(c.[function],'') = coalesce(d.[function],'') and coalesce(c.equipment,'') = coalesce(d.equipment,'') and coalesce(c.equipment_type,'') = coalesce(d.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(d.cost_type,'') and coalesce(c.workstream,'') = coalesce(d.workstream,'')
									where c.Location = b.Location and b.Attribute = 'Production Time' and c.Attribute = 'Adjusted PM rate' and d.Attribute = 'Rehandle Hours') --select * from ProductiveTonnes_HaulBc
	
	,RehandleTonnes_HaulBc as ( select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Rehandle Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
									, c.Value*b.Value as Value
									from RHRateAdj_HaulBc c
									inner join RHhoursHaul b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
									where c.location = b.location) --select * from RehandleTonnes_HaulBc
	
	,TotalRHTonnes_HaulBc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Adjusted Total RH Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, c.Value*b.Value as Value
								from RHRateAdj_HaulBc c
								inner join RHhoursHaul b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
								) --select * from TotalRHTonnes_HaulBc
	, TotalRHPerMineHaul as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, NULL as [Equipment_type], 'NULL' As equipment, c.Cost_Type, c.Product, 'Adjusted Total RH Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
								, sum(c.Value*b.Value) as Value
								from RHRateAdj_HaulBc c
								inner join RHhoursHaul b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
								group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, c.Cost_Type, c.Product, c.Unit, c.[Cost?]
								
								) -- select * from TotalRHPerMine

	,TargetTonnes_Bc as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Target Tonnes'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value + b.Value as Value
							from ProductiveTonnes_HaulBc c
							inner join RehandleTonnes_HaulBc b on coalesce(c.Activity, '') = coalesce(b.Activity,'') and coalesce(c.org_group ,'') = coalesce(b.org_group ,'') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.[function],'') = coalesce(b.[function],'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') and coalesce(c.equipment_type,'') = coalesce(b.equipment_type,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.workstream,'') = coalesce(b.workstream,'')
							where c.Location = b.Location)  --select * from TargetTonnes_Bc
	
	
	/*Additional rates to be added to both load & haul*/
	,Haul_AdjDesignRate as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type , c.Product , 'Design Rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjHaul b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Design Rate' and c.Activity = 'Haul') --select * from Haul_AdjDesignRate

	,Haul_AdjNetRate as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type , c.Product , 'Net Rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjHaul b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Net Rate' and c.Activity = 'Haul') --select * from Haul_AdjDesignRate

	,Adj_TM as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total movement tonnes'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjHaul b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Total Movement tonnes' and c.Activity = 'Haul') --select * from Adj_TM where Location = 'Whaleback'

	,Adj_RM as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product , 'Rehandle movement'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #Final_Calc_Dataset c
							inner join RateAdjHaul b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'Rehandle movement' and c.Activity = 'Haul') --select * from Adj_RM

	,Adj_RR as (select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product , 'RH rate'  as 'Attribute', c.Unit, c.[Cost?]
							, c.Value*b.Value as Value
							from #LoadHaulRHRate c
							inner join RateAdjHaul b on  coalesce(c.location  ,'') = coalesce(b.Location  ,'')
							where c.Location = b.Location and c.Attribute = 'RH rate' and c.Activity = 'Haul') --select * from Adj_RM

	,Rehandle_Other as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], b.Activity, 'Operations' as Workstream, NULL as equipment_type, NULL as equipment, NULL as Cost_Type, NULL as Product, 'Rehandle Other'  as 'Attribute', c.Unit, c.[Cost?] 
							,c.Value - b.Value as Value
							from  (select sum(value) as value, Activity, Location as Location from Adj_RM where activity = 'Haul' group by Location, activity ) b
							inner join ReportRehandleMovement c on coalesce(c.location  ,'') = coalesce(b.Location  ,'') 
							where c.Location = b.Location 
					)  --select * from Rehandle_Other


			select a.* into #HaulAdjustments from (
			select * from Haul_AdjDesignRate	union all
			select * from Haul_AdjNetRate union all
			select * from Adj_TM union all
			select * from Adj_RM union all
			select * from Adj_RR union all
			select * from Rehandle_Other) a;

-- Patch the data set with the load/haul calcs
delete from #Final_Calc_Dataset where Activity in ('Load', 'Haul') and Attribute in ('Design rate', 'Net rate', 'Total movement', 'Total movement tonnes', 'Rehandle movement', 'RH rate', 'Rehandle hours')
insert into #Final_Calc_Dataset select * from #LoadAdjustments
insert into #Final_Calc_Dataset select * from #HaulAdjustments

-- Mismatch - Investigate
--Select count(distinct Equipment)*5 from #Final_Calc_Dataset where activity = 'Haul' and attribute not in ('Fixed Cost', 'Variable Cost')
--Select * from #HaulAdjustments			

insert into @results (severity, [message])
select 'error', Location + ' ' + Equipment + ' calculated target tonnes < 0'
from #HaulAdjustments where Attribute='Target Tonnes' and Value < 0
;

-- Calculate mining stockpile opening balances from closing balances
with ClosingBalance as (
select * from #Final_Calc_Dataset where [Function]='Mining' and Attribute='Closing balance')

, MiningActivity as (
select Location, coalesce(Activity, 'LoadHaul') as Activity, sum(Value) as Value from #Final_Calc_Dataset
where Activity in ('Drill', 'Blast') and Attribute in ('Tonnes Drilled', 'Tonnes Blasted') or [Function]='Mining' and Activity is null and Attribute='Productive Movement'
group by Location, Activity)

, OpeningBalances as (
select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, 'Stockpile' as Equipment_type, C.equipment, C.Cost_Type, C.Product, 'Opening balance' as 'Attribute', c.Unit, c.[Cost?]
  , case when C.Value - I.Value + O.Value < 0 then 0 else C.Value - I.Value + O.Value end as Value
from ClosingBalance C
inner join MiningActivity I on C.Location=I.Location
inner join MiningActivity O on C.Location=O.Location
where (C.Equipment='Drill stock' and I.Activity = 'Drill' and O.Activity='Blast')
  or (C.Equipment='Blast inventory' and I.Activity = 'Blast' and O.Activity='LoadHaul')
)

insert into #Final_Calc_Dataset select * from OpeningBalances;

-- Processing stocks are a little harder because of the hub model

with ClosingBalance as (
select * from #Final_Calc_Dataset where [Function]='Processing' and Attribute='Closing balance')

, LumpFines as (
select A.Location, A.Value * B.Value as Fines, A.Value * (1 - B.Value) as Lump from #Final_Calc_Dataset A, #Final_Calc_Dataset B
where A.Equipment='Bene Plant' and A.Attribute in ('Throughput', 'Target tonnes')
  and A.Equipment='Bene Plant' and B.Attribute='Bypass ratio')

, Throughput as (
select Location, [Function], [Activity], [Equipment], [Value]
from  #Final_Calc_Dataset
where Attribute in ('Throughput', 'Target tonnes') and [Function]='Processing' and Equipment <> 'Bene Plant'
union all
select H.Location, H.[Function], H.[Activity], H.[Equipment], H.[Value] / (1 + S.[Value])
from  #Final_Calc_Dataset H
inner join #Final_Calc_Dataset S on H.Location=S.Location
where H.[Function]='Mining' and H.Attribute='Productive Movement' and H.Activity is null
  and S.[Function]='Mining' and S.Attribute='Stripping Ratio'
union all
select Location, 'Processing' as [Function], 'Beneficiation' as [Activity], 'Bene Plant Lump' as Equipment, Lump as value from LumpFines
union all
select Location, 'Processing' as [Function], 'Beneficiation' as [Activity], 'Bene Plant Fines' as Equipment, Fines as value from LumpFines
)

, Routing as (
select Location,
  case
    when [Location]='Whaleback' and Equipment in ('CR2', 'Crusher 9', 'OHP 5') then 'Pre-Crushing Stockpile'
	when [Location]='Whaleback' and Equipment='OHP 4' then 'OFH Stockpile'
	when [Location]='Whaleback' and Equipment='Car Dumper' then null -- 'Orebody'
	when [Equipment] in ('OB24 TLO', 'OB18 TLO') then 'OFH Stockpile'
	when Activity='TLO' then 'OFR Stockpile'
	when Activity in ('OFR', 'OFH') then 'Pre-Crushing Stockpile'
	else null
  end as [Source],
  case
    when [Function]='Mining' then 'Pre-Crushing Stockpile'
	when Location='Whaleback' and Equipment in ('CR2', 'Car Dumper', 'Bene Plant Lump') then 'OFH Stockpile'
	when Location='Whaleback' and Equipment in ('Crusher 9', 'OHP 5', 'OHP 4', 'Bene Plant Fines') then 'OFR Stockpile'
	--when Activity='TLO' and Equipment in ('OB18 TLO', 'OB24 TLO') then 'Orebody'
	when Activity='OFH' then 'OFH Stockpile'
	when Activity='OFR' then 'OFR Stockpile'
  end as Destination, Activity, Equipment
, Value
from Throughput
)

, Outflow as (
select Location, [Source], sum(Value) as Outflow
from Routing group by Location, [Source]
)

, Inflow as (
select Location, [Destination], sum(Value) as Inflow
from Routing group by Location, [Destination]
)

, OpeningBalances as (
select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.Equipment_type, C.equipment, C.Cost_Type, C.Product, 'Opening balance' as 'Attribute', c.Unit, c.[Cost?]
 , C.Value + coalesce(O.Outflow, 0) - coalesce(I.Inflow, 0) as Value
from ClosingBalance C
left join Inflow I on C.Location=I.Location and C.Equipment=I.[Destination]
left join Outflow O on C.Location=O.Location and C.Equipment=O.[Source]
)

insert into #Final_Calc_Dataset select * from OpeningBalances;

-------------------######################################################################################################################-----------------------	
-------------------######################################################################################################################-----------------------
-------------------######################################################################################################################-----------------------
--------------------------------------------------Rail----------------------------------------------------------------------------------------------------------

declare @daysinyear int;

select @daysinyear=Value from #Final_Calc_Dataset where Attribute='Days in year';
if @daysinyear is null set @daysinyear=365;

--Re rail recon calculations
With RailInvTransit as (select distinct  NULL as [Sheet], NULL as [Org_Group], null as Location, null as [function], null as Activity, null as Workstream, null as [Equipment_type], null as equipment, null as Cost_Type, null as Product, 'Rail inventory transit' as Attribute, null as  Unit, null as [Cost?]
							 , sum(distinct b.value) - sum(distinct a.Value) as Value
							from #Final_Calc_Dataset a , #Final_Calc_Dataset b
						where a.Activity = 'TLO' and a.Attribute = 'Target tonnes' and a.equipment not in ('OB24 TLO','OB18 TLO')
						and b.Org_Group = 'Port' and b.Activity = 'Inflow' and b.Attribute = 'Target Tonnes') --select * from RailInvTransit

	,CurrentActiveRakes as (
					select distinct C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] , c.Value as Value
						from #Final_Calc_Dataset c
						where c.[Function] = 'Mainline' and c.Attribute = 'Active Rakes')

	, TotalOOR as (
					select C.[Sheet], c.[Org_Group], NULL as Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Total OOR' as Attribute, c.Unit, c.[Cost?] 
							, sum(c.Value) as Value
						from #Final_Calc_Dataset c
						where c.Activity = 'TLO' and c.Attribute = 'Target Tonnes' and c.Equipment not in ('OB24 TLO','OB18 TLO')
						group by C.[Sheet], c.[Org_Group],  C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] ) --select * from TotalOOR

	--Throughput will be 'target tonnes'
	, OORbyLocation as (
					select C.[Sheet], c.[Org_Group], c.Location as Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] 
							, sum(c.Value) as Value
						from #Final_Calc_Dataset c
						where c.Activity = 'TLO' and c.Attribute = 'Target Tonnes' and c.Equipment not in ('OB24 TLO','OB18 TLO')
						group by C.[Sheet],c.Location, c.[Org_Group],  C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] ) --select * from OORbyLocation

	, OORbyLocationAndEquip as (
				select C.[Sheet], c.[Org_Group], c.Location as Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment, c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?] 
						, sum(c.Value) as Value
					from #Final_Calc_Dataset c
					where c.Activity = 'TLO' and c.Attribute = 'Target Tonnes' and c.Equipment not in ('OB24 TLO','OB18 TLO')
					group by C.[Sheet],c.Location, c.[Org_Group],  C.[function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.Attribute, c.Unit, c.[Cost?], c.Equipment ) --select * from OORbyLocationAndEquip

	, TimeAtMine as (
					select C.[Sheet], c.[Org_Group], c.Location, 'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], c.Equipment, c.Cost_Type, c.Product, 'Time at mine' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
					,sum(c.value) as Value 
						from #Final_Calc_Dataset c
						where c.Attribute = 'queue to load' or c.Attribute = 'Pre Load' or c.Attribute = 'Train Load' or c.Attribute = 'Post Load'
								or c.Attribute = 'mine to mine queue' or c.Attribute = 'mine 1 pre load' or c.Attribute = 'mine 1 train load'
								or c.Attribute = 'mine 1 to mine 2' or c.Attribute = 'mine 2 train load' or c.Attribute = 'mine 2 post load'
						group by C.[Sheet], c.Location, c.[Org_Group], C.Activity, C.Workstream, C.[Equipment_type],c.Equipment, c.Cost_Type, c.Product, c.[Cost?] )

	, TotalPortInflow as (
					select C.[Sheet], c.[Org_Group], c.Location, 'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Port Ore' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
							, sum(c.value) as Value 
					from #Final_Calc_Dataset c
						where c.Org_Group = 'Port' and c.Activity = 'Inflow' and c.Attribute = 'Target Tonnes'
						group by C.[Sheet], c.[Org_Group], c.Location,  C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?] 
						)

	, NoOfOreCars as (
						select C.[Sheet], c.[Org_Group], c.Location, 'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'No. of Ore Cars' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
						, c.Value as Value
							from #Final_Calc_Dataset c
							where c.org_group = 'Rail' and c.attribute in ('No of ore cars', 'No. of ore cars') and c.[function] = 'mainline'
						) 

	, OreCarTonnage as (
						select C.[Sheet], c.[Org_Group], c.Location,'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Ore car tonnage' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
						, c.Value as Value
							from #Final_Calc_Dataset c
							where c.org_group = 'Rail' and c.attribute in ('Ore car tonnage') and c.[function] = 'mainline'
						) 

	, RakeTonnes as (
						select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Rake tonnes' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
						, c.Value*ca.Value as Value
							from OreCarTonnage c
							inner join NoOfOreCars ca on coalesce(c.Activity, '') = coalesce(ca.Activity,'') and coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.[function]  ,'') = coalesce(ca.[function]  ,'') 
								
						) 

	, DepPerDay as ( --match the max departures per day to this
						select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Departures per Day' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
						, case when ca.Value = 0 then 0 else c.Value/ca.Value/@daysinyear end as Value
							from OORbyLocation c
							inner join RakeTonnes ca on coalesce(c.Location, '') = coalesce(ca.Location,'') 
								
						) --select * from DepPerDay

	, ToFromJunction as (select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'To/From Junction' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								, sum(c.Value) as Value
								from #Final_Calc_Dataset c
									where c.org_group = 'Rail' and  c.attribute = 'Junction to mine queue' or c.attribute = 'Mine queue to junction'
								group by C.[Sheet], c.[Org_Group], c.Location, C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?], c.[Function] ) 

	, CarDumperWeight as (	
						select  C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'CD Weight' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								,case when sum(b.Value) = 0 then 0 else sum(c.Value)/sum(b.Value) end as Value
								from #Final_Calc_Dataset c, (select sum(value) as Value from #Final_Calc_Dataset  where Equipment in ('CD1', 'CD2','CD3','CD4','CD5') and Attribute = 'Target Tonnes') b
									where c.org_group = 'Port' and c.Equipment in ('CD1', 'CD2','CD3','CD4','CD5') and c.Attribute = 'Target Tonnes'
								group by C.[Sheet], c.[Org_Group], c.Location, C.Activity, C.Workstream, C.[Equipment_type], c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.[Function] )
								--select * from CarDumperWeight
									
	, CarDumperCycle as (
						select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'CD Cycle' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								, sum(c.Value) as Value
								from #Final_Calc_Dataset c
									where  c.Attribute in ('Queue to Dump', 'Dump')
								group by C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.[Cost?] 
							) --select * from CarDumperCycle

	, CDCycleContribution as (
						select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'CD Cycle Contribution' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								, sum(c.Value)*sum(ca.Value) as Value
								from CarDumperCycle c
								inner join CarDumperWeight ca on coalesce(c.equipment, '') =  coalesce(ca.equipment, '')
								group by C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.[Cost?] 
							) --select * from CycleContribution

	, NelsonFuncicaneWeight as (
						select C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment , c.Cost_Type, c.Product, 'NF Weight' as 'Attribute', '%' as 'unit', c.[Cost?] 
								,sum(c.Value) as Value 
								from
								(
										select  a.[Sheet], a.[Org_Group], a.[Function], a.Activity, a.Workstream, a.[Equipment_type], a.Equipment , a.Cost_Type, a.Product, a.[Cost?]
											,case when a.Equipment in ('CD1','CD2', 'CD3') then 'Nelson Point' else 'Finucane Island' end as Location, 'CD Weight' as Reference
											,case when sum(b.Value) = 0 then 0 else  sum(a.Value)/sum(b.Value) end as Value
											from #Final_Calc_Dataset a, (select sum(value) as Value from #Final_Calc_Dataset  where Equipment in ('CD1', 'CD2','CD3','CD4','CD5') and Attribute = 'Target Tonnes') b
											where a.org_group = 'Port' and  a.Equipment in ('CD1', 'CD2','CD3','CD4','CD5') and a.Attribute = 'Target Tonnes'
											group by a.Equipment, a.[Sheet], a.[Org_Group], a.Location, a.[Function], a.Activity, a.Workstream, a.[Equipment_type], a.Equipment , a.Cost_Type, a.Product, a.[Cost?])  c 
									group by  C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type] , c.Cost_Type, c.Product,  c.[Cost?] 
									)
									--select * from NelsonFuncicaneWeight
	, NFCycle as (
					select C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment , c.Cost_Type, c.Product, 'NF Cycle' as 'Attribute', '%' as 'unit', c.[Cost?] 
							,  sum(c.Value) as Value
							from #Final_Calc_Dataset c
								where   c.Attribute in ( 'Port to dumper queue' ,'Post dump')
								group by C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type] , c.Cost_Type, c.Product, c.[Cost?] ) --select * from NFCycle
								--select * from #Final_Calc_Dataset where attribute like '%dump%'
	, NFCycleContribution as ( 
								select C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment , c.Cost_Type, c.Product, 'NFCycle Contribution' as 'Attribute', '%' as 'unit', c.[Cost?] 
								,  sum(c.Value)*sum(ca.Value) as Value
								from NFCycle c
								inner join NelsonFuncicaneWeight ca on ca.Location = c.Location
								group by C.[Sheet], c.[Org_Group],c.location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?] 
									) --select * from NFCycleContribution

				, TimeAtPort as ( select c.value + ca.value as value
								from (select sum(value) as value from NFCycleContribution) c, (select sum(value) as value from  CDCycleContribution) ca
										) --select * from TimeAtPort
					
				, RestOfCycle as ( select c.value+ca.value as value
						from 
							(select sum(value) as value from #Final_Calc_Dataset where Attribute in ('Empty travel to junction','Loaded travel from junction')) c,
							TimeAtPort ca) --select * from RestOfCycle
					--select * from #Final_Calc_Dataset where attribute like '%loaded%'
				, TotalDepPerDay as ( select sum(value) as Value from DepPerDay)
					
				, CycleTime as (select C.[Sheet], c.[Org_Group], cb.Location, 'Shuttle' as 'Function', C.Activity, C.Workstream, C.[Equipment_type], c.Equipment, c.Cost_Type, c.Product, 'Cycle Time' as 'Attribute', 'hr' as 'unit', c.[Cost?]
									,c.value + cb.Value + ca.value as value
 									from ToFromJunction c,
									(select case when a.Location in ('Whaleback','Jimblebar','Eastern Ridge') then 'east' else 'west' end as Region, a.Location,a.Value from TimeAtMine a) cb
									, RestOfCycle ca
									where c.Location = cb.Region) 	
														
	,AvgRakeTons as (
						select C.[Sheet], c.[Org_Group], NULL as location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Avg Rake Tonnes' as 'Attribute', 't' as 'unit', c.[Cost?]
						,case when cb.Value = 0 then 0 else sum(c.Value*ca.value)/cb.Value end as value
						from TotalDepPerDay cb, RakeTonnes c
						inner join DepPerDay ca on c.Location = ca.Location
						group by C.[Sheet], c.[Org_Group], c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?], cb.Value
						) --select * from AvgRakeTons

	,AvgTimeAtMine as (
						select C.[Sheet], c.[Org_Group], NULL as location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Avg Time at Mine' as 'Attribute', 't' as 'unit', c.[Cost?]
								,case when cb.Value = 0 then 0 else sum(c.Value*ca.value)/cb.Value end as value
								from TotalDepPerDay cb, TimeAtMine c
								inner join DepPerDay ca on c.Location = ca.Location
								group by C.[Sheet], c.[Org_Group], c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Cost_Type, c.Product, c.[Cost?], cb.Value
							) --select * from AvgTimeAtMine	

	,AvgToFromJunction as (		
							select Ca.[Sheet], ca.[Org_Group], NULL as location, ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], NULL as Equipment, ca.Cost_Type, null as Product, 'Avg To From Junction' as 'Attribute', 't' as 'unit', ca.[Cost?]
								,case when c.Value = 0 then 0 else sum(cb.Value*ca.value)/c.Value end as value
								from TotalDepPerDay c, ToFromJunction ca
										inner join (select case when a.Location in ('Whaleback','Jimblebar','Eastern Ridge') then 'east' else 'west' end as Region, a.Location,a.Value from DepPerDay a) cb
										on ca.Location = cb.Region
								group by Ca.[Sheet], ca.[Org_Group], ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], ca.Cost_Type, ca.[Cost?],c.Value
						) 
									
	,AvgRestOfCycle as ( 
							select ca.[Sheet], ca.[Org_Group], NULL as location, ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], NULL as Equipment, ca.Cost_Type, null as Product, 'Avg Rest of Cycle' as 'Attribute', 't' as 'unit', ca.[Cost?]
								, case when cb.Value = 0 then 0 else  sum(c.Value*ca.value)/cb.Value end as value, c.value lsds, cb.Value dsss
								from TotalDepPerDay cb, RestOfCycle c, DepPerDay ca
								group by Ca.[Sheet], ca.[Org_Group], ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], ca.Cost_Type, ca.[Cost?], cb.Value
											,c.value, ca.value) 
	,AvgTotalCycle as ( 
							select ca.[Sheet], ca.[Org_Group], NULL as location, ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], NULL as Equipment, ca.Cost_Type, null as Product, 'Avg Total of Cycle' as 'Attribute', 't' as 'unit', ca.[Cost?]
								, case when cb.Value = 0 then 0 else sum(c.Value*ca.value)/cb.Value end as value
								from TotalDepPerDay cb, CycleTime c, DepPerDay ca
								where ca.Location = c.Location
								group by Ca.[Sheet], ca.[Org_Group], ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type], ca.Cost_Type, ca.[Cost?], cb.Value) 
								--select * from AvgTotalCycle

	,NumberActiveRakes as (	select	c.[Sheet], 'Rail' as Org_group, NULL as location, 'Mainline' as [function], NULL as Activity, NULL as Workstream,  NULL as Equipment_Type, NULL as Equipment, c.Cost_Type, null as Product, 'Active Rakes' as 'Attribute', 't' as 'unit', c.[Cost?]
								--select 'Rail' as Org_group, 'Mainline' as [function], 'Active Rakes' as Reference
								, ((a.value /*+ d.Value/(@daysinyear*b.value)*/)*(c.value/24)) as value
								from AvgTotalCycle c, RailInvTransit d, AvgRakeTons b, TotalDepPerDay a) --select * from NumberActiveRakes
								
	,LoadTimePerTrain as ( select ca.[Sheet], ca.[Org_Group],  ca.location, ca.[Function], Ca.Activity, Ca.Workstream, Ca.[Equipment_type],ca.Equipment, ca.Cost_Type, ca.Product, ca.Attribute as 'Attribute', 'h' as 'unit', ca.[Cost?]
								, ca.Value--, sum(c.Value*ca.value)/cb.Value as value
								from #Final_Calc_Dataset ca
								where Attribute in ( 'Train load', 'Mine 1 Train Load', 'Mine 2 Train Load')
								) --select * from LoadTimePerTrain

	,TotalDepTrains as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], NULL as Equipment, c.Cost_Type, c.Product, 'Total Departure Trains' as 'Attribute', '#' as 'unit', c.[Cost?] 
						, c.Value * @daysinyear/2 as Value
							from DepPerDay c) --select * from TotalDepTrains

	, TotalLoadHours as (select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], b.Equipment, c.Cost_Type, c.Product, 'Total Load Hours' as 'Attribute', 'h' as 'unit', c.[Cost?] 
							, c.Value * ca.Value as Value
								from LoadTimePerTrain c 
								inner join TotalDepTrains ca on c.Location = ca.Location 
								inner join  
								(select distinct b.Location, c.Equipment as oc, c.Attribute
										, case	
											when c.Attribute = 'Mine 1 Train Load' then 'TLO1'
											when c.Attribute = 'Mine 2 Train Load' then 'TLO2'
											when c.Attribute = 'Train load' and c.Location = 'Eastern Ridge' then 'OB25 TLO'
											when c.Attribute = 'Train load' and c.Location = 'Whaleback' then 'TLO'
											when c.Attribute = 'Train load' and c.Location = 'Jimblebar' then 'JMB TLO'
											when c.Attribute = 'Train load' and c.Location = 'Area C' then 'TLO'
											else '' end as Equipment
												from #Final_Calc_Dataset b  
												inner join LoadTimePerTrain c	on b.Location = c.Location)
									 d on c.Location = d.Location  and d.Attribute = c.Attribute
								inner join #Final_Calc_Dataset b on coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.workstream  ,'') = coalesce(b.workstream  ,'') and d.Equipment = b.Equipment
								where b.Activity = 'TLO' and b.Attribute = 'Target Tonnes' and b.Equipment not in ('OB24 TLO','OB18 TLO')
							) --select * from TotalLoadHours

	, EffectiveLoadingHours as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], b.equipment, c.Cost_Type, c.Product, 'Effective Loading Hours'  as 'Attribute', c.Unit, c.[Cost?] 
							,case when b.Value = 0 then 0 else c.value/b.Value end as Value
							from OORbyLocationAndEquip c
							inner join #Final_Calc_Dataset b on  coalesce(c.org_group ,'') = coalesce(b.org_group , '') and coalesce(c.location  ,'') = coalesce(b.Location  ,'') and coalesce(c.cost_type,'') = coalesce(b.cost_type,'') and coalesce(c.equipment,'') = coalesce(b.equipment,'') 
							where b.Attribute = 'Net rate' and b.Activity = 'TLO' and b.Equipment not in ('OB24 TLO','OB18 TLO') ) --select * from EffectiveLoadingHours
	
	, TLODowntimeLoading as (	select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Effective Loading Hours'  as 'Attribute', c.Unit, c.[Cost?] 
										,c.value - b.Value as Value, c.Value shdh, b.Value shhsbd
										from TotalLoadHours c
										inner join EffectiveLoadingHours b on c.Location = b.Location and c.Equipment = b.Equipment) --select * from TLODowntimeLoading
	
	, TotalTLOdowntimeExcSchMain as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total TLO downtime exc sch. maint.'  as 'Attribute', c.Unit, c.[Cost?] 
										,sum(c.value) as Value
										from #ProductionTime c 
										where c.Attribute in ('Scheduled process downtime raw','Unscheduled equipment downtime raw','Unscheduled process downtime excl. starve/block raw')
										and c.Activity = 'TLO' and c.Equipment not in ('OB24 TLO','OB18 TLO')
										group by C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, c.Unit, c.[Cost?] )

	, DTImpactingTrains as ( select C.[Sheet], c.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Downtime Impacting Trains                     '  as 'Attribute', '%' as unit, c.[Cost?] 
									, case when b.Value = 0 then 0 else c.Value / b.Value end as Value
									from TLODowntimeLoading c
									inner join TotalTLOdowntimeExcSchMain b on c.Equipment = b.Equipment  and c.Location = b.Location 			 
								)

	, DumpTime as			(select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'Dump Time' as 'Attribute', 'hr' as 'unit', c.[Cost?] 
								, sum(c.Value) as Value
									from #Final_Calc_Dataset c
										where  c.Attribute in ( 'Dump')
									group by C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.[Cost?])

	, CarDumperTonnes as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #Final_Calc_Dataset c
										where  c.Attribute in ( 'Target Tonnes') and c.equipment in ('CD1','CD2','CD3','CD4','CD5')				
									)

	, CarDumperNetRate as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #Final_Calc_Dataset c
										where  c.Attribute in ( 'Net Rate') and c.equipment in ('CD1','CD2','CD3','CD4','CD5')
									)

	, CarDumperProductionTime as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.Attribute, c.unit, c.[Cost?] 
									, c.Value as Value
									from #ProductionTime c
									where   c.equipment in ('CD1','CD2','CD3','CD4','CD5') and c.attribute = 'Production Time'
									)

	, CarDumperUnscheduledEqp as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.Attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #ProductionTime c
									where   c.equipment in ('CD1','CD2','CD3','CD4','CD5') and c.attribute = 'Unscheduled equipment downtime raw')

	, CarDumperScheduledProcess as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.Attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #ProductionTime c
									where   c.equipment in ('CD1','CD2','CD3','CD4','CD5') and c.attribute = 'Scheduled process downtime raw')

	, CarDumperUnschedProcess as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, c.Attribute, c.unit, c.[Cost?] 
								, c.Value as Value
									from #ProductionTime c
									where   c.equipment in ('CD1','CD2','CD3','CD4','CD5') and c.attribute = 'Unscheduled process downtime excl. starve/block raw'
									) --select * from CarDumperUnschedProcess
						--	select * from #ProductionTime
	, HoursOfDumpDownTime as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'Hours of Dump Downtime CD' as 'Attribute', c.unit, c.[Cost?] 
								, case when cc.value*ca.Value-cb.Value = 0 then 0 else c.Value/cc.value*ca.Value-cb.Value end as Value
									from CarDumperTonnes c
									inner join DumpTime					ca on c.equipment = ca.equipment
									inner join CarDumperProductionTime	cb on c.equipment = cb.equipment
									, AvgRakeTons				cc 
									) --select * from HoursOfDumpDownTime

	, DowntimeImpactingTrainsCD as ( select C.[Sheet], c.[Org_Group], c.Location, c.[Function], C.Activity, C.Workstream, C.[Equipment_type], c.Equipment , c.Cost_Type, c.Product, 'Hours of Downtime CD' as 'Attribute', c.unit, c.[Cost?] 
								, case when (ca.Value + cb.Value + cc.Value) = 0 then 0 else c.Value/(ca.Value + cb.Value + cc.Value) end as Value
								--, c.Value wwds, ca.Value sdfa, cb.Value sdsdfa, cc.Value sdajjff
									from HoursOfDumpDownTime c
									inner join CarDumperUnscheduledEqp ca on c.equipment = ca.equipment
									inner join CarDumperUnschedProcess	cb on c.equipment = cb.equipment
									inner join CarDumperScheduledProcess cc on c.equipment = cc.equipment
									) --select * from DowntimeImpactingTrainsCD
	, MaximumRakes as (
					select top 1 NULL as [Sheet], 'Rail' as [Org_Group], NULL as Location, 'Shuttle' as [function], 'Rail' as Activity, 'Operations' as Workstream, NULL as [Equipment_type], NULL as Equipment, NULL as Cost_Type, null as Product, 'Maximum allowable active rakes' as Attribute, NULL as Unit, NULL as [Cost?] 
							, 6 as Value
						)
					select a.* into #ActiveRakesCalc from 
					(
						select * from NumberActiveRakes union all
						select * from DTImpactingTrains union all
						select * from RailInvTransit    union all
						--select * from MaximumTonnes     union all
						--select * from MaximumRakes		union all
						select * from TotalOOR			union all
						select * from DowntimeImpactingTrainsCD
						) a
						
 if (select abs(b.value/a.Value) as value from #ActiveRakesCalc a,#ActiveRakesCalc b where a.Attribute = 'Total OOR' and  b.Attribute = 'Rail inventory transit') > 0.1
 insert into @results (severity, [message]) values ('warning', 'Mainline calculated rail inventory transit > 10% of total OOR')

 declare @ar_calc float = (select value from #ActiveRakesCalc where Attribute='Active Rakes')
 declare @ar_var float = (select abs(@ar_calc / b.Value - 1) from #Final_Calc_Dataset b where b.Attribute = 'Active Rakes' and b.[function] = 'Mainline');
if @ar_var >= 0.01
insert into @results (severity, [message]) select
  case when @ar_var > 0.05 then 'error' else 'warning' end,
  'Active rakes calculated from cycle (' + cast(@ar_calc as nvarchar) + ') differs from supplied value by ' + cast(cast(@ar_var*100 as int) as nvarchar) + '%'
;

		-------------------######################################################################################################################-----------------------	
		-------------------######################################################################################################################-----------------------
		-------------------######################################################################################################################-----------------------
		--------------------------------------------------------------------------------Port----------------------------------------------------------------------------
; 
	With Screened as (
	-- Screened
	select distinct  c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Screened'  as 'Attribute', c.Unit, c.[Cost?]
			,c.[Value]*(1 - pa.[Value]) as [Value]
			FROM #Final_Calc_Dataset c
			left join #Final_Calc_Dataset pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.workstream, '') = coalesce(pa.workstream,'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.location,'') = coalesce(pa.location,'')
			where  c.Attribute = 'Lump' and pa.Attribute = 'LRP Bypass') --select * from Screened
	-- RSF
	,RSF as (
	select distinct  c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'RSF'  as 'Attribute' ,c.Unit, c.[Cost?] 
			,case when  pa.value = 0 or (1 + (c.[Value]/(pa.value))) = 0 then 0 else (c.[Value]/(pa.value))/(1 + (c.[Value]/(pa.value))) end as [Value]
			FROM #Final_Calc_Dataset c
			left join Screened pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.Activity, '') = coalesce(pa.Activity,'') and coalesce(c.workstream, '') = coalesce(pa.workstream,'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.location,'') = coalesce(pa.location,'')
			where  c.Attribute = 'Screen stack' and pa.Attribute = 'Screened' ) --select * from RSF

				-- Yard outflow
				,YardOutflow as ( select distinct c.sheet, C.[Org_Group], C.Location, 'Yard Outflow'  as 'Attribute' ,c.Unit, c.[Cost?]
								, sum(c.value) as Value
								from #Final_Calc_Dataset c
									where c.Org_Group = 'Port' and c.Activity = 'Outflow' and c.Equipment_Type = 'Shiploader' and c.Attribute = 'Target Tonnes'
								group by  c.sheet, C.[Org_Group], C.Location,c.Unit, c.[Cost?]) -- select * from YardOutflow

	-- Lump ratio
	,LR as (select distinct  c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Lump ratio'  as 'Attribute' ,c.Unit, c.[Cost?] 
			,case when ca.value = 0 then 0 else c.[Value] / ca.[Value] end as [Value]
			FROM #Final_Calc_Dataset c
			inner join YardOutflow ca on ca.Location = c.Location and ca.Org_Group = c.Org_Group
			where  c.Attribute = 'Lump' ) 
				
	-- DSO
	,DSO as (select distinct  c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'DSO'  as 'Attribute', c.Unit, c.[Cost?] 
			,ca.[Value] * c.[Value] as [Value]
			FROM #Final_Calc_Dataset c
			inner join #Final_Calc_Dataset ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'')  and coalesce(c.workstream, '') = coalesce(ca.workstream,'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.location,'') = coalesce(ca.location,'')
			where  ca.Attribute = 'Yard Inflow' and c.Attribute = 'DL%' )	
		
	-- Screen Stack Per Ton outflow
	, ScreenStackPerTon as (select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Screen stack per ton outflow'  as 'Attribute' , c.Unit, c.[Cost?]  
								,case when (1-pb.Value) = 0 then 0 else (pb.Value * pa.Value *(1 - c.[Value])) / (1 - pb.Value) end as [Value]
								from   #Final_Calc_Dataset c
								inner join LR pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'')  and coalesce(c.workstream, '') = coalesce(pa.workstream,'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.location,'') = coalesce(pa.location,'')
								inner join RSF pb on coalesce(c.org_group ,'') = coalesce(pb.org_group ,'')  and coalesce(c.workstream, '') = coalesce(pb.workstream,'')  and coalesce(c.equipment,'') = coalesce(pb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pb.equipment_type,'') and coalesce(c.location,'') = coalesce(pb.location,'')
								where c.Attribute = 'LRP Bypass') 	 
		 
	--Reclaimed 
	,Reclaimed as (select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Reclaimed'  as 'Attribute', c.Unit, c.[Cost?] 
						,(ca.Value + (ca.Value*pe.Value) - c.Value) as [Value] 
						from   DSO c
						inner join YardOutflow ca on ca.Location = c.Location and ca.Org_Group = c.Org_Group  
						inner join ScreenStackPerTon pe on coalesce(c.org_group ,'') = coalesce(pe.org_group ,'') and coalesce(c.[function],'') = coalesce(pe.[function] ,'')  and coalesce(c.location,'') = coalesce(pe.location,'')
							) 

					-- Reclaimer Throughput
				,ReclaimerThroughput as ( select distinct c.sheet, C.[Org_Group], C.Location, 'Reclaimer Throughput'  as 'Attribute' 
								, sum(c.value) as Value
								from #Final_Calc_Dataset c
									where c.Org_Group = 'Port' and c.Activity = 'Outflow' and c.Equipment_Type = 'Reclaimer' and c.Attribute = 'Target Tonnes'
								group by  c.sheet, C.[Org_Group], C.Location) 

	--Write off adjustments
	,WriteOffAdj as (	select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Write off adjustments'  as 'Attribute', c.Unit, c.[Cost?] 
								,  c.Value - ca.Value  as [Value] 
								from  Reclaimed c
								inner join ReclaimerThroughput ca on    coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location ,'') = coalesce(ca.location ,'') 
									) 
	--Inventory change 
	,InventoryChange as (select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Inventory change'  as 'Attribute', c.Unit, c.[Cost?]
							,c.Value - ca.Value + cb.Value as [Value] 
									from   #Final_Calc_Dataset c
									inner join YardOutflow ca on    coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location ,'') = coalesce(ca.location ,'')
									inner join WriteOffAdj cb on coalesce(c.org_group ,'') = coalesce(cb.org_group ,'') and coalesce(c.[function],'') = coalesce(cb.[function] ,'') and coalesce(c.workstream, '') = coalesce(cb.workstream,'')  and coalesce(c.equipment,'') = coalesce(cb.equipment,'') and coalesce(c.equipment_type,'') = coalesce(cb.equipment_type,'') and coalesce(c.location,'') = coalesce(cb.location,'')
									where c.Attribute = 'Yard Inflow') 
	-- opening stock
	,OpeningStock as ( 
					select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Opening stock'  as 'Attribute', c.Unit, c.[Cost?] 
				,c.Value - ca.Value as [Value] 
				from   #Final_Calc_Dataset c
						inner join InventoryChange ca on    coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location,'') = coalesce(ca.location,'')
						where c.Attribute = 'Closing stock')
	-- Total Ore Handled
	,TotalOreHandled as (select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Total ore handled'  as 'Attribute', c.Unit, c.[Cost?] 
						,pe.Value + c.Value - pe.Value + pa.Value + pb.Value as [Value] 
							from   #Final_Calc_Dataset c
							inner join DSO pe		on coalesce(c.org_group ,'') = coalesce(pe.org_group ,'') and coalesce(c.[function],'') = coalesce(pe.[function] ,'')  and coalesce(c.location,'') = coalesce(pe.location,'')
							inner join Reclaimed pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.[function],'') = coalesce(pa.[function] ,'')  and coalesce(c.location,'') = coalesce(pa.location,'')
							inner join Screened pb	on coalesce(c.org_group ,'') = coalesce(pb.org_group ,'') and coalesce(c.[function],'') = coalesce(pb.[function] ,'')  and coalesce(c.location,'') = coalesce(pb.location,'')
							where c.Attribute = 'Yard Inflow')
	--select * from #Final_Calc_Dataset where Equipment like 'SL C%'
	, SLConVDirectCost as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
								,case when sum (distinct ca.Value) + sum(distinct cb.value) = 0 
								then 0 
								else (c.Value/(sum (distinct ca.Value) + sum(distinct cb.value))) end as Value
								from #Final_Calc_Dataset c 
								inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Reclaimed' as 'Attribute' , sum(a.Value) as Value 
													from Reclaimed a where a.Attribute = 'Reclaimed' group by a.Location) ca on c.Location = ca.location
								inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Screened' as 'Attribute' , sum(a.Value) as Value 
													from Screened a where a.Attribute = 'Screened' group by a.Location) cb on c.Location = cb.location
								where c.Cost_Type = 'Direct Cost' and ca.Attribute = 'Reclaimed' and c.Equipment = 'SL Conv Syst' and cb.Attribute = 'Screened'
								group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.Value )
	/*, SLConVMaterials as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
								,case when sum (distinct ca.Value) + sum(distinct cb.value) = 0 
								then 0 
								else (c.Value/(sum (distinct ca.Value) + sum(distinct cb.value))) end as Value
								from #Final_Calc_Dataset c 
								inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Reclaimed' as 'Attribute' , sum(a.Value) as Value 
													from Reclaimed a where a.Attribute = 'Reclaimed' group by a.Location) ca on c.Location = ca.location
								inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Screened' as 'Attribute' , sum(a.Value) as Value 
													from Screened a where a.Attribute = 'Screened' group by a.Location) cb on c.Location = cb.location
								where c.Cost_Type = 'Maintenance Materials' and ca.Attribute = 'Reclaimed' and c.Equipment = 'SL Conv Syst' and cb.Attribute = 'Screened'
								group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.Value )*/	
	Select a.* into #PortCostDrivers from (
			select * from Screened union all
			select * from RSF union all
			select * from LR union all
			select * from DSO union all
			select * from ScreenStackPerTon union all
			select * from Reclaimed union all
			select * from WriteOffAdj union all
			select * from InventoryChange union all
			select * from OpeningStock union all
			select * from TotalOreHandled union all
			--select * from SLConVMaterials union all
			select * from SLConVDirectCost
	) a
; 
 
		-------------------######################################################################################################################-----------------------	
		-------------------######################################################################################################################-----------------------
		-------------------######################################################################################################################-----------------------
		--------------------------------------------------------------------------Cost Rates----------------------------------------------------------------------------
select a.* into #MiningCostRates from (
	-- drills
	select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, c.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost Rate' as Attribute, 'A$/m' as Unit, c.[Cost?]
	,case when (ca.[Value] is null or da.[Value] is null or (ca.[Value]*da.[Value])=0) then c.Value else c.[Value]/(ca.[Value]*da.[Value]) end as 'Value'
		from #Final_Calc_Dataset c
		left join #Final_Calc_Dataset ca on ca.Attribute = 'Average no. of drills' and coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '')  and coalesce(c.Equipment_type, '') = coalesce(ca.Equipment_type, '')
		left join #Final_Calc_Dataset da on da.Attribute = 'Meters drilled per rig' and coalesce(da.org_group, '') = coalesce(c.org_group, '') and coalesce(da.location, '') = coalesce(c.location, '') and coalesce(da.[function], '') = coalesce(c.[function], '')   and coalesce(c.Equipment, '') = coalesce(da.Equipment, '') and coalesce(c.Equipment_type, '') = coalesce(da.Equipment_type, '')
		where c.Activity ='drill' and c.Cost_Type is not null and c.Equipment is not null
	union all
	-- Overall Cost rate drill
	select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, c.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost Rate' as Attribute, 'A$/m' as Unit, c.[Cost?]
	,case when (ca.[Value])=0 then c.[Value] else c.[Value]/(ca.[Value]) end as 'Value'
		from #Final_Calc_Dataset c
		inner join (select c.Location, sum(c.Value*ca.Value) as value  from #Final_Calc_Dataset c
							inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '')  and coalesce(c.Equipment_type, '') = coalesce(ca.Equipment_type, '')
							where  c.Attribute = 'Average no. of drills' and  ca.Attribute = 'Meters drilled per rig'
							group by c.Location) ca on c.Location = ca.Location
		where c.Activity = 'Drill' and Equipment_Type is null and c.Cost_Type is not null
	union all
	-- blast cost rates 
	select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', '$/t' as [Unit], c.[Cost?]
	,case when ca.[Value] = 0 then C.[Value] else (C.[Value] / ca.[Value]) end as Value
		from #Final_Calc_Dataset c
		inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '') and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '')
		where c.[Function] ='Mining' and c.Activity = 'Blast' and ca.Attribute = 'Tonnes blasted' and c.Cost_Type <> 'Consumables' 
	union all
	-- Load & Haul diesel cost rates
	select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream, C.[Equipment_type], C.equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', c.Unit, c.[Cost?]
	,case when coalesce(cb.value, 0) * coalesce(cb.value, 0) = 0 then c.value else ca.value * cb.value end as Value
		from #Final_Calc_Dataset c
		left join #MiningCostDrivers ca on ca.Attribute = 'Diesel price per litre' and coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') ---and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') 
		left join #MiningCostDrivers cb on cb.Attribute = 'Burn Rate' and coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(cb.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') --and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') 
		where c.[Function] ='Mining' and c.Cost_Type = 'Diesel' and c.Attribute='Variable cost' and c.Activity in ('Load', 'Haul') --c.Equipment in ('WB LBHR 996 EXC','WB LBHR 9400 EXC','WB CAT 994 FEL','KOM 1200 FEL','WB CAT 793F DT','WB CAT 793C DT', 'ER LBHR 9250 EXC','ER LBHR 9400 EXC','ER CAT 992 FEL','ER CAT 993 FEL','ER CAT 994 FEL','ER CAT 793F DT','ER CAT 785C DT','MAC LBHR 996 EXC','MAC HIT 3600 EXC','MAC LBHR 9400 EXC','MAC KOM 1200 FEL','MAC CAT 793F DT','MAC CAT 793D DT','MAC CAT 789C DT','Liebherr 996 Manned','Liebherr 996 AHPT','Liebherr 9400 Manned','Liebherr 9400 AHPT','CAT 994 Manned','CAT 994 AHPT','YND LBHR 996 EXC','YND LBHR 9400 EXC','YND CAT 994 FEL','YND KOM 1200 FEL','YND LET 1850 FEL','YND CAT 793F DT','YND CAT 785C DT')
	) a;
	-- Mine Services cost rates
		--Mine Services - Part 1 (Calculating Productive Movement)

	-- Other Cost rates (Rail & Port)
		with productive_mvmt as (
		select distinct  c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream
		,sum ((1-c.[Value])*pa.[Value]) as  [Value]
		FROM #MiningCostDrivers c
		inner join #Final_Calc_Dataset pa on coalesce(c.org_group ,'') = coalesce(pa.org_group ,'') and coalesce(c.location  ,'') = coalesce(pa.Location  ,'') and coalesce(c.[function],'') = coalesce(pa.[function],'')  and coalesce(c.equipment,'') = coalesce(pa.equipment,'') and coalesce(c.equipment_type,'') = coalesce(pa.equipment_type,'') and coalesce(c.activity,'') = coalesce(pa.activity,'')
		where c.attribute='RH tonnes %' and  pa.attribute='Total movement tonnes' and c.Activity='Haul'
		group by c.Sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream
	 		)
		--Mine Services - Part 2 (Calculating Cost Rates)
	,MineServices as (select distinct c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', c.Unit, c.[Cost?]
						,case when ca.value = 0 then C.[Value] else c.[Value]/ca.[Value] end  as Value 
						from #Final_Calc_Dataset c
						inner join productive_mvmt ca on coalesce(ca.org_group, '') = coalesce(c.org_group ,'')  and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  
						where  c.Activity ='Mine Services')
	,PortThroughPut as (
						select  case when C.Location in ('North Yard', 'South Yard') then 'Nelson Point' else 'Finucane Island' end as location
								, sum(DISTINCT c.value) as value
									from #Final_Calc_Dataset c
								inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') 
								where c.Attribute = 'Target Tonnes' and c.Org_Group = 'Port' and c.Activity = 'Outflow'
						group by C.Location)

	, PortOpsCostRate as ( select c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', c.Unit, c.[Cost?]
								,case when sum(distinct a.value) = 0 then 0 else  c.Value / sum(distinct a.value) end as value
								from #Final_Calc_Dataset c
								inner join ( select case when Location in ('North Yard', 'South Yard') then 'Nelson Point' else 'Finucane Island' end location , sum(distinct value) value from #PortCostDrivers where Attribute = 'Total ore handled' group by location) a on a.Location = c.Location
								where c.Attribute = 'Variable Cost' and c.Cost_Type = 'Electricity'
								group by c.sheet, C.[Org_Group], C.Location, C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Equipment, c.Cost_Type, c.Product,c.Unit, c.[Cost?], c.value
								)
	--Rail - Diesel Cost Rate
	--[Tonnes per rake]

	,tonsperRake as		(select distinct c.sheet, C.[Org_Group], Ca.[Location], C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Equipment, c.Cost_Type, c.Product, 'Tons per rake'  as 'Attribute', 't/rake' as Unit, c.[Cost?]
						,((c.[Value])*(ca.[Value])) as value
						from #Final_Calc_Dataset c
						inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  
						where c.Org_Group ='Rail' and c.Attribute='No. of ore cars' /*and c.[Function]='Mainline'*/ and ca.Org_Group ='Rail' and ca.Activity ='Rail' and ca.Attribute = 'Ore car tonnage' 
						),

		--[OOR]
	OOR as				(select distinct c.sheet, C.[Org_Group], case Equipment when 'OB18 TLO' then 'OB18' when 'OB24 TLO' then 'OB24' else c.[Location] end as Location, C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, 'OOR'  as 'Attribute', 'tpa' as Unit, c.[Cost?]
						,sum(c.[Value]) as [Value]
						from #Final_Calc_Dataset c 
						where Activity = 'TLO' and Attribute = 'Target Tonnes' and Equipment in ('TLO','OB25 TLO','TLO','JMB TLO','TLO1','TLO2', 'OB24 TLO', 'OB18 TLO')
						group by c.sheet, C.[Org_Group], case Equipment when 'OB18 TLO' then 'OB18' when 'OB24 TLO' then 'OB24' else c.[Location] end, C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Cost_Type, c.Product, c.[Attribute], c.[Unit], c.[Cost?]
						),

	--[No. rakes] =  ([OOR]/[Tonnes per rake])
	NumberOfRakes as	(select distinct c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Cost_Type, c.Product, 'No. rakes'  as 'Attribute', '#' as Unit, c.[Cost?]
						,case when ca.value = 0 then 0 else (c.[Value]/ca.[Value]) end as value
						from OOR c
						inner join tonsperRake ca on coalesce(c.[Location],'') = coalesce(ca.[Location],'')  
						),

	--[Diesel Volume] = ([Diesel Consumption per trip]*[No. locos]*[No. rakes])
	DieselVolume as		(select distinct c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream,c.Equipment_Type,c.Cost_Type, c.Product, 'Diesel Volume'  as 'Attribute', 'l' as Unit, c.[Cost?]
						,(c.[Value])*(ca.[Value])*case ca.Location when 'OB18' then 1 when 'OB24' then 1 else 2 end as value
						from #Final_Calc_Dataset c
						inner join NumberOfRakes ca on coalesce(c.[Location],'') = coalesce(ca.[Location],'') 
						where c.Org_Group ='Rail' and c.org_group ='Rail' and c.Attribute = 'Diesel consumption per trip'
						), 
				
	--[Total Diesel Volume] = ([Diesel Consumption per trip]*[No. locos]*[No. rakes])
	TotDieselVolume as	(select distinct c.sheet, C.[Org_Group], C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, 'Diesel Volume'  as 'Attribute', 'l' as Unit, c.[Cost?]
						,sum(c.[Value]) as [Value]
						from DieselVolume c
						group by c.sheet, C.[Org_Group], C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, c.[Attribute], c.[Unit], c.[Cost?]
						),

	--[Diesel Cost Rate] = ([Diesel Fixed Cost]/[Total Diesel Volume])
	DieselCostRate as	(select distinct c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/L' as Unit, c.[Cost?]
						,case when ca.Value = 0 then 0 else (c.[Value]/ca.[Value]) end as value
						from #Final_Calc_Dataset c
						inner join TotDieselVolume ca on coalesce(ca.org_group, '') = coalesce(c.org_group ,'')
						where c.Org_Group ='Rail' and c.Cost_Type='Diesel' 
						)
	,ActualThroughput as	(select distinct c.sheet, 'Rail' as [Org_Group], C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, 'Actual throughput'  as 'Attribute', 'tpa' as Unit, c.[Cost?]
						,sum(c.[Value]) as [Value]
						from #Final_Calc_Dataset c 
						where Activity = 'TLO' and Attribute = 'Target Tonnes' and Equipment in ('TLO','OB25 TLO','TLO','JMB TLO','TLO1','TLO2')
						group by c.sheet, C.[Org_Group], C.[function], C.Activity, C.Workstream,c.Equipment_Type, c.Cost_Type, c.Product, c.[Attribute], c.[Unit], c.[Cost?]
						),

	OtherCostRate as	(select distinct c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]
						,case when ca.Value = 0 then 0 else (c.[Value]/ca.[Value]) end as value
						from #Final_Calc_Dataset c
						inner join ActualThroughput ca on coalesce(ca.org_group, '') = coalesce(c.org_group ,'')
						where c.Org_Group ='Rail' and c.Workstream='Direct Cost' and c.Cost_Type='Other')
	,RateLoss as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Rate Loss'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
						,case when ca.value = 0 then 0 else 1 - (c.Value/ca.Value) end as Value
						from #Final_Calc_Dataset c 
						inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(ca.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') 
						where c.Attribute = 'Net Rate' and ca.Attribute = 'Design Rate')
				
	, STKDirectCost as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
						,case when sum(ca.value) = 0 then 0 else (c.Value/sum (distinct ca.Value)) end as Value
						from #Final_Calc_Dataset c 
						inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Ore Inflow' as 'Attribute' , sum(a.Value) as Value 
											from #Final_Calc_Dataset a where a.Attribute = 'Yard Inflow' group by a.Location) ca on c.Location = ca.location
						where c.Cost_Type = 'Direct Cost' and ca.Attribute = 'Ore Inflow' and c.Equipment = 'STK Conv Syst'
						group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.Value )
				
	/*, STKMaintenenceMaterials as (select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
						,case when sum(distinct ca.value) = 0 then 0 else (c.Value/sum (distinct ca.Value)) end as Value
						from #Final_Calc_Dataset c 
						inner join (select case when a.Location in ('North Yard','South Yard') then 'Nelson Point' else 'Finucane Island' end as location,'Ore Inflow' as 'Attribute' , sum(a.Value) as Value 
											from #Final_Calc_Dataset a where a.Attribute = 'Yard Inflow' group by a.Location) ca on c.Location = ca.location
						where c.Cost_Type = 'Maintenance Materials' and ca.Attribute = 'Ore Inflow' and c.Equipment = 'STK Conv Syst'
						group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?],c.Value )*/
	-- Load & Haul Cost rates
	,LHCostRateseqp as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
						,coalesce(case when sum(distinct ca.value) = 0 then sum(c.Value) else (sum(c.Value)/sum (distinct ca.Value)) end, sum(c.Value)) as Value
						from #Final_Calc_Dataset c
						left join ( select distinct c.equipment ,case when c.Value = 0 then 1 else  cb.Value/c.Value end as value 
											from #Final_Calc_Dataset c 
											inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(cb.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_type, '') = coalesce(cb.cost_type, '')
											where c.Activity in ('load', 'haul') and c.Attribute = 'Net Rate' and cb.Attribute = 'Total movement tonnes') ca on c.Equipment = ca.Equipment
						where c.Cost_Type <> 'Diesel' and c.Cost_Type is not null and c.Activity in ('Load', 'Haul')
						group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?]  )
	,LandHCostRates as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
		,case when sum(distinct ca.value) = 0 then 0 else (sum(c.Value)/sum (distinct ca.Value)) end as Value
		from #Final_Calc_Dataset c
		inner join ( select distinct c.Location ,case when sum(c.Value) = 0 then 0 else  sum(cb.Value - c.Value) end as value 
							from #Final_Calc_Dataset c 
							inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '') and coalesce(c.Equipment, '') = coalesce(cb.Equipment, '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_type, '') = coalesce(cb.cost_type, '')
							where  c.Attribute = 'Rehandle movement' and cb.Attribute = 'Total movement tonnes' and c.Activity in ('haul')
							group by c.Location) ca on c.Location = ca.Location
		where  c.Cost_Type is not null and c.Activity = 'Load & Haul'
		group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?]  )
				
	,OB18CostRate as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, 'OB18 Proc Dir O_H' as Equipment, 'Electricity' as 'Cost_Type', c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
		,case when sum(distinct c.value) = 0 then 0 else (sum(cb.Value)/sum (distinct c.Value)) end as Value
		from #Final_Calc_Dataset c
		inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') 
		where  c.Attribute = 'Target Tonnes'  and cb.Cost_Type is not null and cb.Equipment = 'OB18 Proc Dir O_H'
		group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.[Cost?]  )
	--OFR Cost rates
	,OFRCostRate as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
		,case when ca.value = 0 then 0 else (c.Value/ca.Value) end as Value
		from #Final_Calc_Dataset c
			inner join ( select a.Location, sum(a.Value) as Value from #Final_Calc_Dataset a where a.Activity = 'OFR' and a.Attribute = 'Target Tonnes' group by a.Location) ca on c.Location = ca.Location
			where c.Cost_Type is not null and c.Activity = 'OFR' and c.Cost_Type = 'Electricity'	)
	--Unallocated costs
	,UnallocatedRates as (select  c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
								, case when ca.Value = 0 then 0 else c.Value/ca.Value end as Value
								from #Final_Calc_Dataset c
								inner join ( select a.Location, sum(a.Value) as Value from #Final_Calc_Dataset a where a.Activity = 'OFR' and a.Attribute = 'Target Tonnes' group by a.Location) ca on c.Location = ca.Location
								where c.Cost_Type is not null and  c.Workstream = 'Operations' and c.Cost_Type = 'Electricity' and c.Activity = 'Non Allocated Cost' and C.Location <> 'Eastern Ridge')
	,ERElecCostRate as (select  c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost rate'  as 'Attribute', '$/t' as Unit, c.[Cost?]  
								, case when ca.Value = 0 then 0 else c.Value/ca.Value end as Value
								from #Final_Calc_Dataset c
								inner join ( select a.Location, sum(a.Value) as Value from #Final_Calc_Dataset a where a.Activity in ('OFR', 'OFH') and a.Attribute = 'Target Tonnes' group by a.Location) ca on c.Location = ca.Location
								where c.Cost_Type is not null and  c.Workstream = 'Operations' and c.Cost_Type = 'Electricity' and c.Activity = 'Non Allocated Cost' and C.Location = 'Eastern Ridge')
	--Port demurrage cost rates
	,CargoSize as (select  c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, cb.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cargo Size'  as 'Attribute', 't' as Unit, c.[Cost?]  
								, case when c.Value = 0 then 0 else c.Value*cb.value/c.Value end as Value
								from #Final_Calc_Dataset c
								inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_Type, '') = coalesce(cb.cost_Type, '') 
								where c.attribute = 'Average ship size' and cb.attribute = 'Cargo size baseline')

	, LaytimeAllowed as (select  c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, cb.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Laytime Allowed'  as 'Attribute', 't' as Unit, c.[Cost?]  
								, case when cb.Value = 0 then 0 else (c.Value/cb.value) + ca.Value end as Value
								from CargoSize c
								inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_Type, '') = coalesce(cb.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') 
								inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') and coalesce(c.cost_Type, '') = coalesce(ca.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') 
								where c.attribute = 'Cargo Size' and cb.attribute = 'Contract rate' and ca.attribute = 'Turn time/free time'
							
							)
	, DaysPerShip as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Days Per Ship'  as 'Attribute', 't' as Unit, c.[Cost?]  
								, ca.value - c.Value as Value
								from LaytimeAllowed c
								inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') and coalesce(c.cost_Type, '') = coalesce(ca.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') 
								where ca.Attribute = 'Laytime used') --select * from DaysPerShip
-- Work from here
	, TotalShips as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, NULL as Equipment, c.Cost_Type, c.Product, 'Total Ships'  as 'Attribute', 't' as Unit, c.[Cost?]  
								,case when c.value = 0 then 0 else  Sum(ca.value)/c.value end as Value
								from #Final_Calc_Dataset c
								inner join #Final_Calc_Dataset ca ON C.org_group = ca.org_group
								where ca.Attribute = 'Target Tonnes' and  ca.Equipment_Type = 'Shiploader' and c.attribute = 'Average ship size' 
								group by c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Cost_Type, c.Product, c.[Cost?] ,c.value
								
						)
	, CFRFOBShips as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, c.attribute, 't' as Unit, c.[Cost?]  
								, c.value*ca.Value as Value
								from #Final_Calc_Dataset c, TotalShips ca
								where c.Attribute in ( 'FOB ratio' , 'CFR Ratio')) --select * from CFRFOBShips

	, TotalDays as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Days Per Ship'  as 'Attribute', 't' as Unit, c.[Cost?]  
								, ca.value - c.Value as Value
								from DaysPerShip c
								inner join #Final_Calc_Dataset ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') and coalesce(c.cost_Type, '') = coalesce(ca.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') 
								where ca.Attribute = 'Laytime used')

	, DemurrageCostRate as ( select c.sheet, C.[Org_Group], c.[Location], C.[function], C.Activity, C.Workstream, c.Equipment_Type, c.Equipment, c.Cost_Type, c.Product, 'Cost Rate'  as 'Attribute', 't' as Unit, c.[Cost?]  
								,case when (c.value*ca.Value) = 0 then 0 else cb.value/(c.value*ca.Value) end as Value
								from DaysPerShip c
								inner join CFRFOBShips ca on coalesce(ca.org_group, '') = coalesce(c.org_group, '') and coalesce(ca.location, '') = coalesce(c.location, '') and coalesce(ca.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(ca.workstream, '') and coalesce(c.activity, '') = coalesce(ca.activity, '') and coalesce(c.cost_Type, '') = coalesce(ca.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(ca.equipment_type, '') 
								inner join #Final_Calc_Dataset cb on coalesce(cb.org_group, '') = coalesce(c.org_group, '') and coalesce(cb.location, '') = coalesce(c.location, '') and coalesce(cb.[function], '') = coalesce(c.[function], '')  and coalesce(c.workstream, '') = coalesce(cb.workstream, '') and coalesce(c.activity, '') = coalesce(cb.activity, '') and coalesce(c.cost_Type, '') = coalesce(cb.cost_Type, '') and coalesce(c.equipment_type, '') = coalesce(cb.equipment_type, '') 
								where cb.attribute = 'Variable Cost'
								) 


	select a.* into #CostRates from 
	(	
		select * from MineServices union all
		select * from PortOpsCostRate union all
		select * from OtherCostRate union all
		select * from DieselCostRate union all
		select * from RateLoss union all
		select * from STKDirectCost union all
		--select * from STKMaintenenceMaterials union all
		select * from LHCostRateseqp union all
		select * from LandHCostRates union all
		select * from ERElecCostRate union all
		select * from OFRCostRate union all
		select * from OB18CostRate union all
		--select * from DemurrageCostRate union all
		select * from UnallocatedRates) a;


--######################################################################################
--################################## NB CHANGES ########################################
--######################################################################################
Select * into #Final_Calc_Dataset_Complete from #Final_Calc_Dataset ;

-- Update 
--Other updates to ensure that records match after calculations

update #Final_Calc_Dataset_Complete set Attribute = 'Target Tonnes' where Attribute = 'Tonnes Drilled';  -- this is an assumption
--update #Final_Calc_Dataset_Complete set Attribute = 'Blasted Tonnes' where Attribute = 'Tonnes Blasted';
update #Final_Calc_Dataset_Complete set Attribute = 'Strip Ratio', Activity=null, Workstream=null where Attribute='Stripping Ratio';

update #Final_Calc_Dataset_Complete set Attribute = 'No of ore cars' where Attribute = 'No. of ore cars';
update #Final_Calc_Dataset_Complete set Attribute = 'Port to dumper queue Finucane Island' where attribute = 'Port to dumper queue' and location = 'Finucane Island';
update #Final_Calc_Dataset_Complete set Attribute = 'Port to dumper queue Nelson Point' where attribute = 'Port to dumper queue' and location = 'Nelson Point';
update #Final_Calc_Dataset_Complete set Attribute = 'Post dump Finucane Island' where attribute = 'Post dump' and location = 'Finucane Island';
update #Final_Calc_Dataset_Complete set Attribute = 'Post dump Nelson Point' where attribute = 'Post dump' and location = 'Nelson Point';
update #Final_Calc_Dataset_Complete set Attribute = 'Junction to mine queue east' where attribute like 'Junction to mine queue' and location = 'east';
update #Final_Calc_Dataset_Complete set Attribute = 'Junction to mine queue west' where attribute = 'Junction to mine queue' and location = 'west';
update #Final_Calc_Dataset_Complete set Attribute = 'Mine queue to junction east' where attribute like 'Mine queue to junction' and location = 'east';
update #Final_Calc_Dataset_Complete set Attribute = 'Mine queue to junction west' where attribute = 'Mine queue to junction' and location = 'west';
update #Final_Calc_Dataset_Complete set Location = NULL where Attribute like 'Port to dumper queue%';
update #Final_Calc_Dataset_Complete set Location = NULL where Attribute like 'Post dump%';
update #Final_Calc_Dataset_Complete set Location = NULL where Attribute like 'Junction to mine queue%';
update #Final_Calc_Dataset_Complete set Location = NULL where Attribute like 'Mine queue to junction%';

update #Final_Calc_Dataset_Complete set Attribute = 'Scheduled equipment downtime' where Attribute = 'Scheduled maintenance time';
update #Final_Calc_Dataset_Complete set Attribute = 'Unscheduled equipment downtime' where Attribute = 'Unscheduled maintenance time';
update #Final_Calc_Dataset_Complete set Attribute = 'Scheduled process downtime' where Attribute = 'Scheduled operating loss time';
update #Final_Calc_Dataset_Complete set Attribute = 'Unscheduled process downtime excl. starve/block' where Attribute = 'Unscheduled operating loss time (exclude starve/block time)';
update #Final_Calc_Dataset_Complete set Attribute = 'Scheduled standby hours' where Attribute = 'Standby time' and Activity in ('load','haul','drill')
update #Final_Calc_Dataset_Complete set Attribute = 'Scheduled standby time' where Attribute = 'Standby time' and Activity not in ('load','haul','drill')
update #Final_Calc_Dataset_Complete set Attribute = 'Standby time' where Attribute in ('Standby time', 'Scheduled standby time', 'Scheduled standby hours') and activity in ('Load','Haul','OFH','OFR','TLO','Beneficiation','Inflow','Outflow','Drill');
update #CostRates set Equipment = 'OB18 Proc Dir O_H' where Equipment = 'OB18' and Activity = 'OFH'

update #Final_Calc_Dataset_Complete set Attribute = 'Rehandle tonnes' where Attribute = 'Rehandle movement' and Activity in ('load', 'haul')
update #Final_Calc_Dataset_Complete set Attribute = 'Target tonnes' where Attribute in ('Total movement', 'Total movement tonnes') and Activity in ('load', 'haul')
--update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes processed' where Attribute = 'Target Tonnes' and  Activity in ('OFH','OFR','Beneficiation','Inflow','Outflow')

update #Final_Calc_Dataset_Complete set Location = 'North Yard' where Attribute in ( 'CD1 to North Yard', 'CD2 to North Yard', 'CD3 to North Yard', 'CD4 to North Yard', 'CD5 to North Yard') 
update #Final_Calc_Dataset_Complete set Location = 'East Yard' where Attribute in ( 'CD1 to East Yard', 'CD2 to East Yard', 'CD3 to East Yard', 'CD4 to East Yard', 'CD5 to East Yard')
update #Final_Calc_Dataset_Complete set Location = 'West Yard' where Attribute in ( 'CD1 to West Yard', 'CD2 to West Yard', 'CD3 to West Yard', 'CD4 to West Yard', 'CD5 to West Yard') 
update #Final_Calc_Dataset_Complete set Location = 'South Yard' where Attribute in ( 'CD1 to South Yard', 'CD2 to South Yard', 'CD3 to South Yard', 'CD4 to South Yard', 'CD5 to South Yard') 

update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes transferred' where Attribute in ( 'CD1 to North Yard', 'CD2 to North Yard', 'CD3 to North Yard', 'CD4 to North Yard', 'CD5 to North Yard') 
update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes transferred' where Attribute in ( 'CD1 to East Yard', 'CD2 to East Yard', 'CD3 to East Yard', 'CD4 to East Yard', 'CD5 to East Yard')
update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes transferred' where Attribute in ( 'CD1 to West Yard', 'CD2 to West Yard', 'CD3 to West Yard', 'CD4 to West Yard', 'CD5 to West Yard') 
update #Final_Calc_Dataset_Complete set Attribute = 'Tonnes transferred' where Attribute in ( 'CD1 to South Yard', 'CD2 to South Yard', 'CD3 to South Yard', 'CD4 to South Yard', 'CD5 to South Yard') 

update #Final_Calc_Dataset_Complete set Location = Equipment where Attribute = 'Queue to Dump'
update #Final_Calc_Dataset_Complete set Equipment = NULL where Attribute = 'Queue to Dump'

update #Final_Calc_Dataset_Complete set Cost_Type = 'Consumables' where Attribute = 'Powder Factor' and Activity = 'Blast'
update #Final_Calc_Dataset_Complete set Attribute = 'Unscheduled process downtime excl. starve/block' where Attribute = 'Unscheduled process downtime' and Activity = 'TLO'
update #Final_Calc_Dataset_Complete 
set Value = ca.Value
from #Final_Calc_Dataset_Complete c
inner join #ProductionTime ca on coalesce(c.org_group ,'') = coalesce(ca.org_group ,'') and coalesce(c.location  ,'') = coalesce(ca.Location  ,'') and coalesce(c.[function],'') = coalesce(ca.[function],'')  and coalesce(c.equipment,'') = coalesce(ca.equipment,'') and coalesce(c.equipment_type,'') = coalesce(ca.equipment_type,'') and coalesce(c.activity,'') = coalesce(ca.activity,'') and coalesce(c.workstream,'') = coalesce(ca.workstream,'') and coalesce(c.attribute,'') = coalesce(ca.attribute,'')

-- Update Active Rakes
update #Final_Calc_Dataset_Complete set Value = b.value
		from #ActiveRakesCalc b
		inner join #Final_Calc_Dataset_Complete a on a.Org_Group = b.Org_group and a.[Function] = b.[function]
		where a.Attribute = 'Active Rakes' and  a.[Function] = 'mainline'

update #ActiveRakesCalc set Attribute = 'TLO downtime affecting loading' where location in ('Area C','Eastern Ridge','Jimblebar','Whaleback') and Equipment like '%TLO%'
update #ActiveRakesCalc set Attribute = 'TLO 1 downtime affecting loading' where location in ('Yandi') and Equipment = 'TLO1'
update #ActiveRakesCalc set Attribute = 'TLO 2 downtime affecting loading' where location in ('Yandi') and Equipment = 'TLO2'
update #ActiveRakesCalc set [function] = 'Mainline' where location in ('Area C','Eastern Ridge','Jimblebar','Whaleback', 'Yandi') and Attribute not in ('Maximum tonnes constraint','Maximum allowable active rakes')
update #ActiveRakesCalc set Equipment = NULL where location in ('Area C','Eastern Ridge','Jimblebar','Whaleback', 'Yandi')

update #ActiveRakesCalc set Attribute = 'CD downtime affecting dumping' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set location = Equipment where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Org_group = 'Rail' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set [function] = 'Mainline' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Activity = 'Rail' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Workstream = 'Operations' where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Equipment_Type = NULL where Equipment in ('CD1','CD2','CD3','CD4','CD5')
update #ActiveRakesCalc set Equipment = NULL where Equipment in ('CD1','CD2','CD3','CD4','CD5')

update #Final_Calc_Dataset_Complete set Equipment_Type = NULL Where attribute = 'CFR ratio'
update #Final_Calc_Dataset_Complete set Equipment_Type = NULL Where attribute = 'FOB ratio'
;


----
--- Create an upadate into the results table for the assumptions
--- 
/*update #Final_Calc_Dataset_Complete set Value = 100000000 where Attribute = 'Maximum tonnes constraint'
update #Final_Calc_Dataset_Complete set Value = 6 where Attribute = 'Maximum allowable active rakes'*/

select a.* into #final_attribute from 
(	select * from #MiningCostDrivers A union all
	select * from #MiningCostRates union all
	select * from #CostRates		union all
	select * from #PortCostDrivers union all
	--select * from #LoadAdjustments union all
	--select * from #HaulAdjustments union all
	select * from #ActiveRakesCalc union all
	select * from #Final_Calc_Dataset_Complete
	) a


select a.* into #retrieve_attribute_id from (
select distinct a.*, og.og_id, l.loc_id, f.func_id, ac.act_id, ws.ws_id, et.eqp_type_id, e.eqp_id, ct.ct_id, prod.prod_id  from 
	#final_attribute a
	left join vdt.org_group og on a.Org_Group = og.og_name
	left join vdt.location l on l.loc_name = a.Location
	left join vdt.[function] f on f.func_name = a.[Function]
	left join vdt.activity ac on ac.act_name = a.Activity 
	left join vdt.workstream ws on ws.ws_name = a.Workstream
	left join vdt.eqp_type et on et.eqp_type_name = a.Equipment_Type 
	left join vdt.equipment e on e.eqp_name  = a.Equipment
	left join vdt.cost_type ct on ct.ct_name = a.Cost_Type 
	left join vdt.product prod on prod.prod_name = a.Product) a
;

insert into @results (severity, [message])
select 'info', cast(count(*) as nvarchar) + ' data points mapped from Excel' from #retrieve_attribute_id

select c.* into #fulljoin from (
select b.attr_id, b.attribute as model_attribute, a.Org_Group, a.Location, a.[Function], a.Activity, a.Workstream, a.Equipment_Type, a.Equipment, a.Cost_Type, a.Product, a.Attribute, a.Value
from (vdt.attribute_category b inner join vdt.attribute x on b.attr_id=x.attr_id) full outer join #retrieve_attribute_id a 
on									coalesce(a.og_id		,-1)	= coalesce(b.og_id 		,-1)
								and coalesce(b.loc_id		,-1)	= coalesce(a.loc_id 	,-1)
								and coalesce(a.func_id		,-1)	= coalesce(b.func_id 	,-1)
								and coalesce(a.act_id		,-1)	= coalesce(b.act_id 	,-1)
								and coalesce(a.ws_id		,-1)	= coalesce(b.ws_id		,-1)
								and coalesce(a.eqp_id		,-1)	= coalesce(b.eqp_id		,-1)
								and coalesce(a.eqp_type_id	,-1)	= coalesce(b.eqp_type_id,-1)
								and coalesce(a.ct_id		,-1)	= coalesce(b.ct_id		,-1)
								and coalesce(a.prod_id      ,-1)    = coalesce(b.prod_id    ,-1)
								and coalesce(a.Attribute	,'')	= coalesce(b.attribute 	,'')
where x.is_calculated = 0) c 

insert into @results (severity, [message])
select top 25 'error', concat(org_group, '-', Location, '-', [Function], '-', [Activity], '-', Workstream, '-',
                              Equipment_Type, '-', Equipment, '-', Cost_Type, '-', Attribute, ' has no corresponding lever in the model')
from #fulljoin where attr_id is null;
if (select count(*) from #fulljoin where attr_id is null) > 25
insert into @results (severity, [message]) values ('error', 'More than 25 rows in the Excel file have no corresponding lever in the model')

insert into @results (severity, [message])
select top 25 'warning', concat(C.org_group, '-', C.Location, '-', C.[Function], '-', C.[Activity], '-', C.Workstream, '-',
                              C.Equipment_Type, '-', C.Equipment, '-', C.Cost_Type, '-', C.Attribute, ' is in the model but not in Excel')
from vdt.attribute_category C inner join #fulljoin F on C.attr_id=F.attr_id
where F.org_group is null;
if (select count(*) from #fulljoin where org_group is null) > 25
insert into @results (severity, [message]) values ('warning', 'More than 25 levers in the model do not have corresponding rows in the Excel file')

insert into @results (severity, [message])
select 'error', concat('Duplicate row: ', org_group, '-', location, '-', [function], '-', activity, '-', workstream, '-',
   equipment_type, '-', equipment, '-', cost_type, '-', attribute, '=', cast(value as nvarchar)) from #fulljoin where attr_id in (
select attr_id from #fulljoin where org_group is not null group by attr_id having count(*) > 1)
and org_group is not null order by attr_id

select a.attr_id, b.Value into #backcalcs  from vdt.attribute A
inner join #retrieve_attribute_id B
on                  coalesce(a.og_id    ,-1)  = coalesce(b.og_id    ,-1)
                and coalesce(b.loc_id   ,-1)  = coalesce(a.loc_id   ,-1)
                and coalesce(a.func_id    ,-1)  = coalesce(b.func_id  ,-1)
                and coalesce(a.act_id   ,-1)  = coalesce(b.act_id   ,-1)
                and coalesce(a.ws_id    ,-1)  = coalesce(b.ws_id    ,-1)
                and coalesce(a.eqp_id   ,-1)  = coalesce(b.eqp_id   ,-1)
                and coalesce(a.eqp_type_id  ,-1)  = coalesce(b.eqp_type_id,-1)
                and coalesce(a.ct_id    ,-1)  = coalesce(b.ct_id    ,-1)
				and coalesce(a.prod_id  ,-1)  = coalesce(b.prod_id  ,-1)
                and coalesce(a.attr_name  ,'')  = coalesce(b.attribute  ,'')
where a.attr_id is not null;

declare @err_count int = (select count(*) from @results where severity='error');
if @err_count > 0
begin
  insert into @results (severity, [message]) values ('info', 'Not creating data set due to ' + cast(@err_count as nvarchar) + ' errors');
end
else
begin
  insert into @results (severity, [message]) values ('info', 'Creating data set');
  declare @dataset_id int;

  insert into vdt.dataset (model_id, dataset_name, origin, last_update, [description], created, category_id, deleted)
  select @model_id, @dataset_name, 'user', CURRENT_TIMESTAMP, @description, CURRENT_TIMESTAMP, category_id, 0
  from vdt.dataset_category where category_name=@category;
  set @dataset_id=SCOPE_IDENTITY();

  insert into vdt.value (dataset_id, attr_id, value) select @dataset_id, attr_id, value from #backcalcs

  insert into @results (severity, [message]) values ('id', cast(@dataset_id as nvarchar));
  insert into @results (severity, [message]) values ('info', 'Data import complete');
end

drop table #Final_Calc_Dataset;
drop table #Final_Calc_Dataset_Complete;
drop table #MiningCostDrivers;
drop table #MiningCostRates;
drop table #retrieve_attribute_id;
drop table #final_attribute;
drop table #fulljoin;
drop table #ProductionTime
drop table #CostRates
drop table #ActiveRakesCalc
drop table #HaulAdjustments
drop table #LoadAdjustments
drop table #LoadHaulRHRate
drop table #PortCostDrivers
drop table #backcalcs


  -- return report to the user
  select * from @results;
end

GO

ALTER procedure [vdt].[sp_get_site_data]
  @site nvarchar(100),
  @dataset_id int,
  @user_id int
as
begin
  set nocount on;

  if exists (select * from vdt.data where org_group='Mines' and location=@site)
  begin
    -- it's a mining location
	with allattrs as (
	select 
	  coalesce([function], 'Mining') as tab_name, coalesce([activity], [function], 'Mining') as panel, 'ActivityTemplate' as template,
	  org_group, [function], activity, workstream, location, equipment_type, equipment, cost_type, product, attr_id, attribute, attribute_unit,
	  attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	from vdt.data where org_group='Mines' and location=@site and dataset_id=@dataset_id
	and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
    and ([function] is not null or attribute_is_kpi=0) and (attribute_is_kpi=1 or attribute_is_lever=1))
	,customattrs as (
	select [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	  org_group, [function], activity, workstream, location, equipment_type, 'Operations Costs' as equipment, cost_type, product, attr_id, attribute, attribute_unit,
	  attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	from allattrs where [activity]='Blast' and attribute_is_cost=1
	union all
	select [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	  org_group, [function], activity, workstream, location, equipment_type, null as equipment, cost_type, product, attr_id, attribute, attribute_unit,
	  attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	from allattrs where [activity]='Load & Haul' and attribute_is_cost=1
    union all
    select tab_name, panel, 'DrillDownTemplate' as template,
      org_group, [function], activity, workstream, null as location, case when equipment_type=cost_type then null else equipment_type end as equipment_type,
	  equipment, cost_type, product, attr_id, attribute, attribute_unit,
      attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
    from allattrs where [activity] in ('Overheads', 'Non Allocated Cost') or [function] = 'Overheads'
	)
	,unioned as (
	select * from customattrs
	union all
	select * from allattrs where attr_id not in (select attr_id from customattrs))

	select * from unioned
	where tab_name is not null and panel is not null
	order by
	case coalesce([function], 'Mining')
	  when 'Mining' then 1
	  when 'Processing' then 2
	  else 3
	end,
	case coalesce([activity], 'Mining')
	  when 'Mining' then 1
	  when 'Drill' then 10
	  when 'Blast' then 20
	  when 'Load & haul' then 30
	  when 'Load' then 40
	  when 'Haul' then 50
	  when 'Ore Sources' then 60
	  when 'Beneficiation' then 70
	  when 'OFH' then 80
	  when 'OFR' then 90
	  when 'TLO' then 100
	  else 999
	end, [function], [activity]
  end
  else if @site='Rail'
  begin
    with allattrs as (
	  select 
	    [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type, equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from vdt.data where org_group=@site and dataset_id=@dataset_id
	  and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
	  and (attribute_is_kpi=1 or attribute_is_lever=1)
	)
	,customattrs as (
	  select 
	    [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type,
		case when location like 'CD%' then 'Car Dumpers' else location end as equipment,
		cost_type, product, attr_id,
		case when location like 'CD%' then location + ' ' + attribute else attribute end as attribute,
		attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity]='Rail'
	  union all
	  select 
	    [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type, coalesce(equipment, equipment_type, workstream) as equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from vdt.data where org_group=@site and dataset_id=@dataset_id
	  and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
	  and (attribute_is_kpi=1 or attribute_is_lever=1)
	  and [function]='Maintenance'
	  union all
	  select 
	    [function] as tab_name, [activity] as panel, 'DrillDownTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type, equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from vdt.data where org_group=@site and dataset_id=@dataset_id
	  and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
	  and (attribute_is_kpi=1 or attribute_is_lever=1)
	  and [function]='Production'
	)
	,unioned as (
	select * from customattrs
	union all
	select * from allattrs where attr_id not in (select attr_id from customattrs))

	select * from unioned
	where tab_name is not null and panel is not null
	order by
	case coalesce([function], 'Rail')
	  when 'Mainline' then 1
	  when 'Shuttle' then 2
	  else 3
	end, [function], [activity]
  end
  else if @site='Port'
  begin
    with allattrs as (
	  select 
	    [function] as tab_name, coalesce([activity], [function]) as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type, equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from vdt.data where org_group=@site and dataset_id=@dataset_id
	  and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
	  and (attribute_is_lever=1 or attribute_is_kpi=1)
	)
	,customattrs as (
	  select 
	    [function] as tab_name, [location] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type,
		equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity]='Outflow'
	  union all
	  select 
	    [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type,
		workstream as equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity] in ('Overheads') and [function] in ('Production', 'Marine')
	  union all
	  select 
	    [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type,
		location as equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity] in ('Operations') and [function]='Production'
	  union all
	  select 
	    [function] as tab_name, [activity] as panel, 'ActivityTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type,
		equipment_type as equipment, attribute as cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity] in ('Demurrage') and [function]='Marine'
	  union all
	  select 
	    [function] as tab_name, [location] as panel, 'DrillDownTemplate' as template,
	    org_group, [function], null as activity, null as workstream, null as location, equipment_type,
		equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity]='Maintenance' and [function]='Maintenance'
	  union all
	  select 
	    [function] as tab_name, [location] as panel, 'DrillDownTemplate' as template,
	    org_group, [function], null as activity, activity as workstream, workstream as location, equipment_type,
		equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity]='Overheads' and location is not null and [function]='Maintenance'
	  union all
	  select 
	    [function] as tab_name, activity as panel, 'DrillDownTemplate' as template,
	    org_group, [function], null as activity, null as workstream, null as location, equipment_type,
		equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where workstream='Operations' and location is null and [function]='Maintenance'
	  union all
	  select 
	    [function] as tab_name, [activity] as panel, 'DrillDownTemplate' as template,
	    org_group, [function], activity, case workstream when 'Maintenance' then null else 'Overheads' end as workstream, workstream as location, equipment_type,
		equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity]<>'Maintenance' and not ([activity]='Overheads' and location is not null) and not (workstream='Operations' and location is null)
	    and [function]='Maintenance' and [activity]='Shutdown'
	  union all
	  select 
	    [function] as tab_name, activity as panel, 'DrillDownTemplate' as template,
	    org_group, [function], null as activity,
		case when workstream is null or workstream='Operations' then null else 'Overheads' end as workstream,
		case when workstream is null then 'Other' else coalesce(location, workstream) end as location, equipment_type,
		equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where activity='Site Infrastructure' and [function]='Maintenance'
	  union all
	  select 
	    [function] as tab_name, [activity] as panel, 'DrillDownTemplate' as template,
	    org_group, [function], activity, workstream, location, equipment_type,
		equipment, cost_type, product, attr_id, attribute, attribute_unit,
	    attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	  from allattrs where [activity]<>'Maintenance' and not ([activity]='Overheads' and location is not null) and not (workstream='Operations' and location is null)
	    and [function]='Maintenance' and [activity]<>'Shutdown' and [activity]<>'Site Infrastructure'
	)
	,unioned as (
	select * from customattrs
	union all
	select * from allattrs where attr_id not in (select attr_id from customattrs))

	select * from unioned
	where tab_name is not null and panel is not null
	order by
	case coalesce([function], 'Rail')
	  when 'Production' then 1
	  when 'Marine' then 2
	  when 'Maintenance' then 3
	  else 4
	end,
	case [panel]
	  when 'Inflow' then 1
	  when 'North Yard' then 10
	  when 'South Yard' then 20
	  when 'East Yard' then 30
	  when 'West Yard' then 40
	  else 999
	end, [function], [activity]
  end
  else
  begin
    -- it's functions
	with AllAttrs as (
	select 
      [function] as tab_name, [activity] as panel, 'DrillDownTemplate' as template,
	  org_group, [function], activity, workstream, location, equipment_type, equipment,
	  case when attribute_is_cost=1 then coalesce(cost_type, attribute) else cost_type end as cost_type,
	  product, attr_id, attribute, attribute_unit,
	  attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	from vdt.data where org_group=@site and dataset_id=@dataset_id
	and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
	),
	unioned as (
	  select * from AllAttrs
	)
	select * from unioned
	where tab_name in ('Functions', 'Logistic & Infrastructure', 'Operations Infrastructure', 'Other', 'Revenue')
	and panel is not null and panel <> 'Aggregate Fixed Cost'
  end
end

GO


commit transaction Version11;
go

PRINT 'Database has been updated successfully to version 11'
set noexec off;


--------------------------------------------------- Version 12 update ------------------------------------------------------------------

declare @cur_version int = (select max(db_version) from vdt.config)
--Special to account for an error in this update where the version number was not bumped up
IF @cur_version >= 12 or  EXISTS (SELECT object_id FROM sys.objects WHERE object_id = OBJECT_ID(N'vdt.sp_get_scenario_names') AND type IN ( N'P', N'PC' ) )
begin
  IF @cur_version = 11 
  begin
	set @cur_version = 12
  end	
  print 'Skipping database update to v12; already at version ' + cast(@cur_version as nvarchar)
  set noexec on
end

begin transaction Version12;
go

set xact_abort on;
set nocount on;

INSERT INTO vdt.config([db_version],[updated_on]) VALUES(12,  getdate())
go


create procedure [vdt].[sp_get_scenario_names]
@itt vdt.IdFilterTableType READONLY
AS 
BEGIN 
     SET NOCOUNT ON 

select dataset_id,dataset_name from vdt.dataset where dataset_id in (select id from @itt)

END 

go


commit transaction Version12;
go

PRINT 'Database has been updated successfully to version 12'
set noexec off;




--------------------------------------------------- Version 13 update ------------------------------------------------------------------

declare @cur_version int = (select max(db_version) from vdt.config)
IF @cur_version >= 13
begin
  print 'Skipping database update to v13; already at version ' + cast(@cur_version as nvarchar)
  set noexec on
end

begin transaction Version13;
go

set xact_abort on;
set nocount on;

INSERT INTO vdt.config([db_version],[updated_on]) VALUES(13,  getdate())
go


CREATE CLUSTERED INDEX [_dta_index_qerent_attr_ids_c_50_1799677459__K2_K3_K4_9987] ON [staging].[qerent_attr_ids]
(
                [attr_id] ASC,
                [object_path] ASC,
                [attr_name] ASC
)WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [_dta_index_qerent_attr_ids_50_1799677459__K4_K3_1_2] ON [staging].[qerent_attr_ids]
(
                [attr_name] ASC,
                [object_path] ASC
)
INCLUDE ([model_id],
                [attr_id]) WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [_dta_index_value_50_1335675806__K2_K1_3_1410] ON [vdt].[value]
(
                [attr_id] ASC,
                [dataset_id] ASC
)
INCLUDE ([value]) WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF) ON [PRIMARY]


go

ALTER procedure [vdt].[sp_get_system_view]  
@dataset_id int,
@user_id int
as

begin

with activity_level as (
select
  case org_group
    when 'Mines' then [location] + ' ' + [activity]
	when 'Rail' then 'Rail Mainline'
	when 'Port' then 'Port ' + coalesce([location], [activity])
  end as Process,
  attribute,
  base_value,
  value
from vdt.data where attribute in ('Internal Capacity', 'Value Chain Tonnes')
and org_group <> 'Port' and ([function] <> 'Shuttle' or [function] is null)
and dataset_id=@dataset_id
)
,equipment_level as (
select
  concat([location], ' ', [equipment]) as Process,
  case attribute
    when 'Internal process capacity' then 'Internal Capacity'
	when 'Tonnes processed' then 'Value Chain Tonnes'
  end as attribute,
  base_value,
  value
from vdt.data where attribute in ('Internal process capacity', 'Tonnes processed')
and org_group='Mines' and [function]='Processing' and location in ('Whaleback', 'Eastern Ridge', 'Jimblebar')
and dataset_id=@dataset_id
)
,excl_port_and_shuttle as (
select * from activity_level
union all
select * from equipment_level
)
,data as (
select * from excl_port_and_shuttle
union all
select 'Rail Shuttle' as Process, case when attribute='Actual Throughput' then 'Value Chain Tonnes' else attribute end as attribute, base_value, value
from vdt.data where [function]='Shuttle' and attribute in ('Actual Throughput', 'Internal Capacity') and dataset_id = @dataset_id
union all
select equipment as Process, case attribute /* Car dumpers */
  when 'Tonnes processed' then 'Value Chain Tonnes'
  when 'Internal process capacity' then 'Internal Capacity' end as attribute,
base_value, value from vdt.data where org_group='Port' and [activity]='Inflow' and equipment_type='Car Dumper'
and attribute in ('Tonnes processed', 'Internal process capacity') and dataset_id = @dataset_id
union all
select location as Process, case attribute /* Yards */
  when 'Yard inflow' then 'Value Chain Tonnes'
  when 'Yard capacity' then 'Internal Capacity' end as attribute,
base_value, value from vdt.data where org_group='Port' and activity='Outflow'
and attribute in ('Yard capacity', 'Yard inflow') and dataset_id = @dataset_id
union all
select case location   /* Shiploaders */
  when 'North Yard' then 'SL1&2'
  when 'East Yard' then 'SL3&4'
  when 'South Yard' then 'SL5&6'
  when 'West Yard' then 'SL7&8'
end as Process, case attribute
  when 'Yard outflow' then 'Value Chain Tonnes'
  when 'Shiploader capacity' then 'Internal Capacity' end as attribute,
base_value, value from vdt.data where org_group='Port' and activity='Outflow'
and attribute in ('Shiploader capacity', 'Yard outflow') and dataset_id = @dataset_id
)
,pivoted_prod as (
select T.Process, T.base_value as base_tonnes, T.value as scenario_tonnes, C.base_value as base_capacity, C.value as scenario_capacity,
         T.base_value / nullif(C.base_value,0) as base_uoc, T.value / nullif(C.value,0) as scenario_uoc,
		 case when T.base_value / nullif(C.base_value,0) > 0.9 then 14428421--'#dc2905'
		      when T.base_value / nullif(C.base_value,0) > 0.65 then 14448901--'#dc7905'
			  when T.base_value / nullif(C.base_value,0) > 0.40 then 6347781--'#60dc05'
			  else 9962972/*'#9805dc'*/ end as base_color,
		 case when T.value / nullif(C.value,0) > 0.9 then 14428421--'#dc2905'
		      when T.value / nullif(C.value,0) > 0.65 then 14448901--'#dc7905'
			  when T.value / nullif(C.value,0) > 0.40 then 6347781--'#60dc05'
			  else 9962972/*'#9805dc'*/ end as scenario_color
from data T inner join data C on T.Process=C.Process
where T.attribute='Value Chain Tonnes' and C.attribute='Internal Capacity')
,stock_data as (
select location + ' ' + equipment as Process, attribute, base_value, value
from vdt.data where attribute in ('Closing Balance', 'Maximum Level', 'Minimum Level')
  and equipment is not null and equipment <> 'Orebody'
and dataset_id=@dataset_id
)
,pivoted_stock as (
select T.Process, T.base_value as base_tonnes, T.value as scenario_tonnes, coalesce(C.base_value, 2*T.base_value) as base_capacity, coalesce(C.value, 2*T.value) as scenario_capacity,
         case when T.base_value >= coalesce(C.base_value, 2*T.base_value) then 1 else T.base_value / nullif(coalesce(C.base_value, 2*T.base_value),0) end as base_uoc,
		 case when T.value >= coalesce(C.value, 2*T.value) then 1 else T.value / nullif(coalesce(C.value, 2*T.value),0) end as scenario_uoc,
		 case when T.base_value / nullif(coalesce(C.base_value, 2*T.base_value),0) > 0.9 or T.base_value < coalesce(L.base_value, 0) then 14428421--'#dc2905'
			  else 9962972/*'#9805dc'*/ end as base_color,
		 case when T.value / nullif(coalesce(C.value, 2*T.value),0) > 0.9 or T.value < coalesce(L.value, 0) then 14428421--'#dc2905'
			  else 9962972/*'#9805dc'*/ end as scenario_color
from stock_data T
left join stock_data C on T.Process=C.Process and C.attribute='Maximum Level'
left join stock_data L on T.Process=L.Process and L.attribute='Minimum Level'
where T.attribute='Closing Balance'
union all
select [location] + ' Stock' as Process, base_value as base_tonnes, value as scenario_tonnes, 10000000 as base_capacity, 10000000 as scenario_capacity,
  case when base_value > 10000000 then 1 else base_value / 10000000 end as base_uoc,
  case when value > 10000000 then 1 else value / 10000000 end as scenario_uoc,
  case when base_value / 10000000 > 0.9 or base_value < 0 then 14428421--'#dc2905'
    else 9962972/*'#9805dc'*/ end as base_color,
  case when value / 10000000 > 0.9 or value < 0 then 14428421--'#dc2905'
    else 9962972/*'#9805dc'*/ end as scenario_color
from vdt.data where attribute in ('Closing stock')
and dataset_id=@dataset_id
)
,pivoted as (
select * from pivoted_prod
union all
select * from pivoted_stock
)
,result as (
select 'Scenario' as [Case], 'Current Tonnes' as [Display], Process, 'Tonnes' as Attribute, scenario_tonnes as Value, 'Mtpa' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Current Tonnes' as [Display], Process, 'Use of Capacity' as Attribute, scenario_uoc as Value, '%' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Current Tonnes' as [Display], Process, 'Fill Color' as Attribute, scenario_color as Value, 'color' as Unit from pivoted

union all

select 'Scenario' as [Case], 'Headroom' as [Display], Process, 'Tonnes' as Attribute, scenario_capacity - scenario_tonnes as Value, 'Mtpa' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Headroom' as [Display], Process, 'Use of Capacity' as Attribute, scenario_uoc as Value, '%' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Headroom' as [Display], Process, 'Fill Color' as Attribute, scenario_color as Value, 'color' as Unit from pivoted

union all

select 'Base Case' as [Case], 'Current Tonnes' as [Display], Process, 'Tonnes' as Attribute, base_tonnes as Value, 'Mtpa' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Current Tonnes' as [Display], Process, 'Use of Capacity' as Attribute, base_uoc as Value, '%' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Current Tonnes' as [Display], Process, 'Fill Color' as Attribute, base_color as Value, 'color' as Unit from pivoted

union all

select 'Base Case' as [Case], 'Headroom' as [Display], Process, 'Tonnes' as Attribute, base_capacity - base_tonnes as Value, 'Mtpa' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Headroom' as [Display], Process, 'Use of Capacity' as Attribute, base_uoc as Value, '%' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Headroom' as [Display], Process, 'Fill Color' as Attribute, base_color as Value, 'color' as Unit from pivoted
)

select * from result


end

go


commit transaction Version13;
go

PRINT 'Database has been updated successfully to version 13'
set noexec off;




--------------------------------------------------- Version 14 update ------------------------------------------------------------------

declare @cur_version int = (select max(db_version) from vdt.config)
IF @cur_version >= 14
begin
  print 'Skipping database update to v14; already at version ' + cast(@cur_version as nvarchar)
  set noexec on
end

begin transaction Version14;
go

set xact_abort on;
set nocount on;

INSERT INTO vdt.config([db_version],[updated_on]) VALUES(14,  getdate())
go

create procedure [vdt].[sp_insert_audit]
       @audit_date datetime = null, 
       @category int = null, 
       @sub_category int = null,
	   @user_id int	                   
as 
begin 
     set nocount on 

     insert into vdt.[audit_entry]
          ( 
            audit_date,
            category,
            sub_category,
			[user_id]            
          ) 
     values 
          ( 
            @audit_date,
            @category,
            @sub_category,
			@user_id              
          ) 

end 
go

create table [vdt].[audit_category](
	[audit_category_id] int identity not null primary key,
	[name] [nvarchar](100) not null);

create table [vdt].[audit_entry](
	[audit_id] int identity not null primary key,
	[audit_date] [datetime] not null,
	[category] [int] not null references vdt.[audit_category] ([audit_category_id]),
	[sub_category] [int] null references vdt.[audit_category] ([audit_category_id]),
	[user_id] [int] not null)
	
SET IDENTITY_INSERT [vdt].[audit_category] ON	
--Screens
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (1, N'Scenario Management')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (2, N'Scenario Planning')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (3, N'Sensitivity Analysis')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (4, N'Size of Prize Analysis')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (5, N'System View')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (6, N'Value Driver Tree')

--Actions
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (7, N'View')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (8, N'Calculate')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (9, N'Copy')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (10, N'Edit')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (11, N'Delete')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (12, N'Save as')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (13, N'Toggle lock')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (14, N'Load')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (15, N'Import data')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (16, N'Export to excel')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (17, N'Login')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (18, N'Custom Account')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (19, N'Windows Authentication')

SET IDENTITY_INSERT [vdt].[audit_category] OFF

commit transaction Version14;
go

PRINT 'Database has been updated successfully to version 14'
set noexec off;




--------------------------------------------------- Version 15 update ------------------------------------------------------------------

declare @cur_version int = (select max(db_version) from vdt.config)
IF @cur_version >= 15
begin
  print 'Skipping database update to v15; already at version ' + cast(@cur_version as nvarchar)
  set noexec on
end

begin transaction Version15;
go

set xact_abort on;
set nocount on;


INSERT INTO vdt.config([db_version],[updated_on]) VALUES(15,  getdate())
go

alter procedure vdt.sp_get_site_reports
  @site nvarchar(100),
  @dataset_id int,
  @user_id int
as
begin
  set nocount on;

  declare @reports table (
    title nvarchar(50),
	sproc nvarchar(50),
	args nvarchar(100),
	renderer nvarchar(50),
	value_format nvarchar(50));

  insert into @reports (title, sproc, args, renderer, value_format) values ('WAIO KPI', 'vdt.sp_get_system_kpis', '@dataset_id,@user_id', 'SimpleTable', '');
  if @site <> 'WAIO'
  begin
    insert into @reports (title, sproc, args, renderer, value_format) values (@site + ' Volume KPI', 'vdt.sp_get_site_volume_kpis', '@site_name,@dataset_id,@user_id', 'SimpleTable', '');
    insert into @reports (title, sproc, args, renderer, value_format) values (@site + ' Cost KPI', 'vdt.sp_get_site_cost_kpis', '@site_name,@dataset_id,@user_id', 'SimpleTable', '');
  end
  else
  begin
    insert into @reports (title, sproc, args, renderer, value_format) values ('OOR Tonnes', 'vdt.sp_get_mining_oor', '@dataset_id,@user_id', 'SimpleTable', '');
    insert into @reports (title, sproc, args, renderer, value_format) values ('WAIO Costs', 'vdt.sp_get_system_total_cost', '@dataset_id,@user_id', 'ColumnChart', 'A$M');
    insert into @reports (title, sproc, args, renderer, value_format) values ('WAIO Cost Changes', 'vdt.sp_get_system_cost_waterfall', '@dataset_id,@user_id', 'ColumnChart', '$/t');
    insert into @reports (title, sproc, args, renderer, value_format) values ('System Capacity', 'vdt.sp_get_system_tonnes', '@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
    insert into @reports (title, sproc, args, renderer, value_format) values ('GHG Emissions', 'vdt.sp_get_system_ghg_emissions', '@dataset_id,@user_id', 'ColumnChart', 't');
  end
  insert into @reports (title, sproc, args, renderer, value_format) values ('Incremental OOR Tonnes', 'vdt.sp_get_mining_tonnes_waterfall', '@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
  if @site not in ('Rail', 'Port', 'WAIO')
  begin
    insert into @reports (title, sproc, args, renderer, value_format) values ('Mine Capacity (Ore Tonnes)', 'vdt.sp_get_capacity_chart', '@site_name,@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
    insert into @reports (title, sproc, args, renderer, value_format) values ('System Capacity', 'vdt.sp_get_system_tonnes', '@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
	insert into @reports (title, sproc, args, renderer, value_format) values ('Process Costs', 'vdt.sp_get_mine_total_cost_chart', '@site_name,@dataset_id,@user_id', 'ColumnChart', 'A$M');
	insert into @reports (title, sproc, args, renderer, value_format) values ('Cost Changes ($/t OOR)', 'vdt.sp_get_mine_cost_waterfall', '@site_name,@dataset_id,@user_id', 'ColumnChart', '$/t');
    insert into @reports (title, sproc, args, renderer, value_format) values ('GHG Emissions', 'vdt.sp_get_mine_ghg_emissions', '@site_name,@dataset_id,@user_id', 'ColumnChart', 't');
	insert into @reports (title, sproc, args, renderer, value_format) values ('Rehandle Cost', 'vdt.sp_get_mine_rehandle_cost_per_tonne', '@site_name,@dataset_id,@user_id', 'SimpleTable', '$/t');
	insert into @reports (title, sproc, args, renderer, value_format) values ('Rehandle Cost', 'vdt.sp_get_mine_rehandle_cost_total', '@site_name,@dataset_id,@user_id', 'SimpleTable', 'A$M');	
	insert into @reports (title, sproc, args, renderer, value_format) values ('Process Efficiency', 'vdt.sp_get_mine_process_efficiencies', '@site_name,@dataset_id,@user_id', 'SimpleTable', '');	
  end
  if @site = 'Rail'
  begin
    insert into @reports (title, sproc, args, renderer, value_format) values ('System Capacity', 'vdt.sp_get_system_tonnes', '@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
    insert into @reports (title, sproc, args, renderer, value_format) values ('Rail Costs', 'vdt.sp_get_rail_total_cost', '@dataset_id,@user_id', 'ColumnChart', 'A$M');
    insert into @reports (title, sproc, args, renderer, value_format) values ('Rail Cost Changes', 'vdt.sp_get_rail_cost_waterfall', '@dataset_id,@user_id', 'ColumnChart', '$/t');
  end
  if @site = 'Port'
  begin
    insert into @reports (title, sproc, args, renderer, value_format) values ('Port Capacity', 'vdt.sp_get_port_capacity_chart', '@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
    insert into @reports (title, sproc, args, renderer, value_format) values ('System Capacity', 'vdt.sp_get_system_tonnes', '@dataset_id,@user_id', 'ColumnChart', 'Mtpa');
    insert into @reports (title, sproc, args, renderer, value_format) values ('Port Costs', 'vdt.sp_get_port_total_cost', '@dataset_id,@user_id', 'ColumnChart', 'A$M');
    insert into @reports (title, sproc, args, renderer, value_format) values ('Port Cost Changes', 'vdt.sp_get_port_cost_waterfall', '@dataset_id,@user_id', 'ColumnChart', '$/t');
  end
  insert into @reports (title, sproc, args, renderer, value_format) values ('Site margins', 'vdt.sp_get_system_site_margins', '@dataset_id,@user_id', 'SimpleTable', '');
  insert into @reports (title, sproc, args, renderer, value_format) values ('Product margins', 'vdt.sp_get_system_product_margins', '@dataset_id,@user_id', 'SimpleTable', '');
  select * from @reports;
end

go

create procedure vdt.sp_get_mine_ghg_emissions (
  @site_name nvarchar(100),
  @dataset_id int,
  @user_id int)
as
begin
set nocount on;
with pivot_data as (
  select coalesce([activity], 'Processing') as activity, attribute, value, base_value
  from vdt.data where attribute in ('CO₂e Diesel', 'CO₂e Electricity')
  and org_group='Mines' and location=@site_name
  and (activity is not null or attribute='CO₂e Electricity')
  and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
  and dataset_id=@dataset_id
)
, result as (
  select 'Base Case' as series, activity as [group], attribute as [component], [base_value] as value,
    case when attribute='CO₂e Diesel' then 1 else 2 end as stack_order,
    case when attribute='CO₂e Diesel' then '#000' else '#aaa' end as fill_color, '' as fill_pattern
  from pivot_data
  union all
  select 'Scenario' as series, activity as [group], attribute as [component], [value] as value,
    case when attribute='CO₂e Diesel' then 1 else 2 end as stack_order,
    case when attribute='CO₂e Diesel' then '#ffa500' else '#ffcb6a' end as fill_color, '' as fill_pattern
  from pivot_data
)
select * from result
order by case [group]
  when 'Drill' then 1
  when 'Blast' then 2
  when 'Load' then 3
  when 'Haul' then 4
  else 5
end
end
go

alter procedure [vdt].[sp_get_system_kpis]
  @dataset_id int,
  @user_id int
as
begin
  set nocount on;

  select
    [attribute] as KPI,
    case when attribute='EBITDA Improvement' then null when base_value=0 then 0 else value/base_value-1 end as [% Change:{0:2%}],
    value as [Scenario:{0:4,1000000s}],
    base_value as [Baseline:{0:4,1000000s}]
  from vdt.data where org_group='WAIO' and attribute in ('EBITDA', 'EBITDA Improvement', 'CO₂e Emissions')
  and dataset_id=@dataset_id
  AND (select sec_level from vdt.[user] where [user_id] = @user_id) >=  attribute_sec_level;
end
go

create procedure vdt.sp_get_system_ghg_emissions (
  @dataset_id int,
  @user_id int)
as
begin
set nocount on;
with pivot_data as (
  select coalesce([location], [org_group]) as [source], attribute, value, base_value
  from vdt.data where attribute in ('CO₂e Diesel', 'CO₂e Electricity')
  and [Function] is null and ([org_group] <> 'Mines' or location is not null)
  and (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  attribute_sec_level
  and dataset_id=@dataset_id
)
, result as (
  select 'Base Case' as series, [source] as [group], attribute as [component], [base_value] as value,
    case when attribute='CO₂e Diesel' then 1 else 2 end as stack_order,
    case when attribute='CO₂e Diesel' then '#000' else '#aaa' end as fill_color, '' as fill_pattern
  from pivot_data
  union all
  select 'Scenario' as series, [source] as [group], attribute as [component], [value] as value,
    case when attribute='CO₂e Diesel' then 1 else 2 end as stack_order,
    case when attribute='CO₂e Diesel' then '#ffa500' else '#ffcb6a' end as fill_color, '' as fill_pattern
  from pivot_data
)
select * from result
order by case [group]
  when 'Area C' then 1
  when 'Yandi' then 2
  when 'Whaleback' then 3
  when 'Eastern Ridge' then 4
  when 'Jimblebar' then 5
  when 'Rail' then 6
  when 'Port' then 7
  else 8
end
end
go

CREATE procedure [vdt].[sp_get_attribute_by_id]
@dataset_id int, 
@user_id int,
@attributeIds vdt.IdFilterTableType READONLY

AS 
BEGIN 
     SET NOCOUNT ON 

	 declare @sec_level int;
	 set @sec_level = (select sec_level from vdt.[user] where [user_id] = @user_id);

select 
	  org_group, [function], activity, workstream, location, equipment_type, equipment, cost_type, product, attr_id, attribute, attribute_unit,
	  attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
	from vdt.data where dataset_id=@dataset_id
  AND (attr_id IN (select id from @attributeIds)) 
  AND  @sec_level>=  attribute_sec_level

END 

go



ALTER procedure [vdt].[sp_get_system_view]  
@dataset_id int,
@user_id int
as

begin

with activity_level as (
select
  case org_group
    when 'Mines' then [location] + ' ' + [activity]
	when 'Rail' then 'Rail Mainline'
	when 'Port' then 'Port ' + coalesce([location], [activity])
  end as Process,
  attribute,
  attr_id, null as h_attr_id,
  attribute_is_cost,attribute_is_lever,attribute_is_kpi,
  base_value,
  value
from vdt.data where attribute in ('Internal Capacity', 'Value Chain Tonnes')
and org_group <> 'Port' and ([function] <> 'Shuttle' or [function] is null) 
and dataset_id=@dataset_id
)
,equipment_level as (
select
  concat([location], ' ', [equipment]) as Process,
  case attribute
    when 'Internal process capacity' then 'Internal Capacity'
	when 'Tonnes processed' then 'Value Chain Tonnes'
  end as attribute,
  attr_id,null as h_attr_id,
  attribute_is_cost,attribute_is_lever,attribute_is_kpi,
  base_value,
  value
from vdt.data where attribute in ('Internal process capacity', 'Tonnes processed')
and org_group='Mines' and [function]='Processing' and location in ('Whaleback', 'Eastern Ridge', 'Jimblebar')
and [equipment] not in ('Crusher 9', 'OHP 5')
and dataset_id=@dataset_id
)
,excl_port_and_shuttle as (
select * from activity_level
union all
select * from equipment_level
)
,data as (
select * from excl_port_and_shuttle
union all
select 'Rail Shuttle' as Process, case when attribute='Actual Throughput' then 'Value Chain Tonnes' else attribute end as attribute, attr_id,null as h_attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi,base_value, value
from vdt.data where [function]='Shuttle' and attribute in ('Actual Throughput', 'Internal Capacity') and dataset_id = @dataset_id
union all
select equipment as Process, case attribute /* Car dumpers */
  when 'Tonnes processed' then 'Value Chain Tonnes'
  when 'Internal process capacity' then 'Internal Capacity' end as attribute, attr_id,null as h_attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi,
base_value, value from vdt.data where org_group='Port' and [activity]='Inflow' and equipment_type='Car Dumper'
and attribute in ('Tonnes processed', 'Internal process capacity') and dataset_id = @dataset_id
union all
select location as Process, case attribute /* Yards */
  when 'Yard inflow' then 'Value Chain Tonnes'
  when 'Yard capacity' then 'Internal Capacity' end as attribute, attr_id,null as h_attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi,
base_value, value from vdt.data where org_group='Port' and activity='Outflow'
and attribute in ('Yard capacity', 'Yard inflow') and dataset_id = @dataset_id
union all
select case location   /* Shiploaders */
  when 'North Yard' then 'SL1&2'
  when 'East Yard' then 'SL3&4'
  when 'South Yard' then 'SL5&6'
  when 'West Yard' then 'SL7&8'
end as Process, case attribute
  when 'Yard outflow' then 'Value Chain Tonnes'
  when 'Shiploader capacity' then 'Internal Capacity' end as attribute,  attr_id,null as h_attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi,
base_value, value from vdt.data where org_group='Port' and activity='Outflow'
and attribute in ('Shiploader capacity', 'Yard outflow') and dataset_id = @dataset_id
)
,pivoted_prod as (
select T.attr_id,C.attr_id as h_attr_id,
        T.attribute_is_cost,T.attribute_is_lever,T.attribute_is_kpi,
		C.attribute_is_cost as h_attribute_is_cost,C.attribute_is_lever as h_attribute_is_lever,C.attribute_is_kpi as h_attribute_is_kpi,
         T.Process, T.base_value as base_tonnes, T.value as scenario_tonnes, C.base_value as base_capacity, C.value as scenario_capacity,
         case when T.base_value > C.base_value then 1 else T.base_value / nullif(C.base_value,0) end as base_uoc,
		 case when T.value > C.value then 1 else T.value / nullif(C.value,0) end as scenario_uoc,
		 case when T.base_value / nullif(C.base_value,0) > 0.9 then 14428421--'#dc2905'
		      when T.base_value / nullif(C.base_value,0) > 0.65 then 14448901--'#dc7905'
			  when T.base_value / nullif(C.base_value,0) > 0.40 then 6347781--'#60dc05'
			  else 9962972/*'#9805dc'*/ end as base_color,
		 case when T.value / nullif(C.value,0) > 0.9 then 14428421--'#dc2905'
		      when T.value / nullif(C.value,0) > 0.65 then 14448901--'#dc7905'
			  when T.value / nullif(C.value,0) > 0.40 then 6347781--'#60dc05'
			  else 9962972/*'#9805dc'*/ end as scenario_color
from data T inner join data C on T.Process=C.Process
where T.attribute='Value Chain Tonnes' and C.attribute='Internal Capacity')
,stock_data as (
select location + ' ' + equipment as Process, attribute,attr_id,null as h_attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi, base_value, value
from vdt.data where attribute in ('Closing Balance', 'Maximum Level', 'Minimum Level', 'Days Inventory')
  and equipment is not null and equipment <> 'Orebody'
and dataset_id=@dataset_id
)
,pivoted_stock as (
select T.attr_id,L.attr_id as h_attr_id, 
       T.attribute_is_cost,T.attribute_is_lever,T.attribute_is_kpi,
		L.attribute_is_cost as h_attribute_is_cost,L.attribute_is_lever as h_attribute_is_lever,L.attribute_is_kpi as h_attribute_is_kpi,
         T.Process, T.base_value as base_tonnes, T.value as scenario_tonnes, coalesce(C.base_value, 2*T.base_value) as base_capacity, coalesce(C.value, 2*T.value) as scenario_capacity,
         case when T.base_value >= coalesce(C.base_value, 2*T.base_value) then 1 else T.base_value / nullif(coalesce(C.base_value, 2*T.base_value),0) end as base_uoc,
		 case when T.value >= coalesce(C.value, 2*T.value) then 1 else T.value / nullif(coalesce(C.value, 2*T.value),0) end as scenario_uoc,
		 case when T.base_value / nullif(coalesce(C.base_value, 2*T.base_value),0) > 0.9 or T.base_value < coalesce(L.base_value, 0) then 14428421--'#dc2905'
			  else 11579568/*9962972*//*'#9805dc'*/ end as base_color,
		 case when T.value / nullif(coalesce(C.value, 2*T.value),0) > 0.9 or T.value < coalesce(L.value, 0) then 14428421--'#dc2905'
			  else 11579568/*9962972*//*'#9805dc'*/ end as scenario_color
from stock_data T
left join stock_data C on T.Process=C.Process and C.attribute='Maximum Level'
left join stock_data L on T.Process=L.Process and L.attribute='Minimum Level'
where T.attribute='Closing Balance'
union all
select attr_id,attr_id as h_attr_id,
        attribute_is_cost,attribute_is_lever,attribute_is_kpi,
		attribute_is_cost as h_attribute_is_cost,attribute_is_lever as h_attribute_is_lever,attribute_is_kpi as h_attribute_is_kpi,
   [location] + ' Stock' as Process, base_value as base_tonnes, value as scenario_tonnes, 10000000 as base_capacity, 10000000 as scenario_capacity,
  case when base_value > 10000000 then 1 else base_value / 10000000 end as base_uoc,
  case when value > 10000000 then 1 else value / 10000000 end as scenario_uoc,
  case when base_value / 10000000 > 0.9 or base_value < 0 then 11579568--14428421--'#dc2905'
    --else 9962972/*'#9805dc'*/ end as base_color,
	else 11579568 end as base_color,
  case when value / 10000000 > 0.9 or value < 0 then 11579568-- 14428421--'#dc2905'
    --else 9962972/*'#9805dc'*/ end as scenario_color
	else 11579568 end as scenario_color
from vdt.data where attribute in ('Closing stock')
and dataset_id=@dataset_id
)
,ranked_prod as (
select *, rank() over (order by base_uoc desc) as base_rank, rank() over (order by scenario_uoc desc) as scenario_rank from pivoted_prod
)
,pivoted_prod_rank_color as (
select attr_id, h_attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi,h_attribute_is_cost,h_attribute_is_lever,h_attribute_is_kpi, Process, base_tonnes, scenario_tonnes, base_capacity, scenario_capacity, base_uoc, scenario_uoc,
  case when base_rank=1 then 14428421--'#dc2905'
       when base_rank<5 then 14448901--'#dc7905'
	                    else 6347781--'#60dc05'
  end as base_color,
  case when scenario_rank=1 then 14428421--'#dc2905'
       when scenario_rank<5 then 14448901--'#dc7905'
	                       else 6347781--'#60dc05'
  end as scenario_color
from ranked_prod
)
,pivoted as (
select * from pivoted_prod_rank_color
union all
select * from pivoted_stock
)
,result as (
select 'Scenario' as [Case], 'Current Tonnes' as [Display], Process, 'Tonnes' as Attribute,attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi, scenario_tonnes as Value, 'Mtpa' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Current Tonnes' as [Display], Process, 'Use of Capacity' as Attribute,attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi, scenario_uoc as Value, '%' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Current Tonnes' as [Display], Process, 'Fill Color' as Attribute,attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi, scenario_color as Value, 'color' as Unit from pivoted

union all

select 'Scenario' as [Case], 'Headroom' as [Display], Process, 'Tonnes' as Attribute,h_attr_id as attr_id,h_attribute_is_cost as attribute_is_cost,h_attribute_is_lever as attribute_is_lever,h_attribute_is_kpi as attribute_is_kpi, case when scenario_tonnes > scenario_capacity then 0 else scenario_capacity - scenario_tonnes end as Value, 'Mtpa' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Headroom' as [Display], Process, 'Use of Capacity' as Attribute,h_attr_id as attr_id,h_attribute_is_cost as attribute_is_cost,h_attribute_is_lever as attribute_is_lever,h_attribute_is_kpi as attribute_is_kpi, scenario_uoc as Value, '%' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Headroom' as [Display], Process, 'Fill Color' as Attribute,h_attr_id as attr_id,h_attribute_is_cost as attribute_is_cost,h_attribute_is_lever as attribute_is_lever,h_attribute_is_kpi as attribute_is_kpi, scenario_color as Value, 'color' as Unit from pivoted

union all

select 'Base Case' as [Case], 'Current Tonnes' as [Display], Process, 'Tonnes' as Attribute,attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi, base_tonnes as Value, 'Mtpa' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Current Tonnes' as [Display], Process, 'Use of Capacity' as Attribute,attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi, base_uoc as Value, '%' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Current Tonnes' as [Display], Process, 'Fill Color' as Attribute,attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi, base_color as Value, 'color' as Unit from pivoted

union all

select 'Base Case' as [Case], 'Headroom' as [Display], Process, 'Tonnes' as Attribute,h_attr_id as attr_id,h_attribute_is_cost as attribute_is_cost,h_attribute_is_lever as attribute_is_lever,h_attribute_is_kpi as attribute_is_kpi, case when base_tonnes > base_capacity then 0 else base_capacity - base_tonnes end as Value, 'Mtpa' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Headroom' as [Display], Process, 'Use of Capacity' as Attribute,h_attr_id as attr_id,h_attribute_is_cost as attribute_is_cost,h_attribute_is_lever as attribute_is_lever,h_attribute_is_kpi as attribute_is_kpi, base_uoc as Value, '%' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Headroom' as [Display], Process, 'Fill Color' as Attribute,h_attr_id as attr_id,h_attribute_is_cost as attribute_is_cost,h_attribute_is_lever as attribute_is_lever,h_attribute_is_kpi as attribute_is_kpi, base_color as Value, 'color' as Unit from pivoted

union all
select 'Scenario' as [Case], 'Current Tonnes' as [Display], Process as Process, 'Days Inventory' as Attribute, attr_id as attr_id,attribute_is_cost,attribute_is_lever ,attribute_is_kpi, [value] as Value, '#' as Unit from stock_data where attribute='Days Inventory'
union all
select 'Scenario' as [Case], 'Headroom' as [Display], Process as Process, 'Days Inventory' as Attribute, attr_id as attr_id,attribute_is_cost ,attribute_is_lever ,attribute_is_kpi, [value] as Value, '#' as Unit from stock_data where attribute='Days Inventory'
union all
select 'Base Case' as [Case], 'Current Tonnes' as [Display], Process as Process, 'Days Inventory' as Attribute, attr_id as attr_id,attribute_is_cost ,attribute_is_lever ,attribute_is_kpi, base_value as Value, '#' as Unit from stock_data where attribute='Days Inventory'
union all
select 'Base Case' as [Case], 'Headroom' as [Display], Process as Process, 'Days Inventory' as Attribute, attr_id as attr_id,attribute_is_cost,attribute_is_lever ,attribute_is_kpi, base_value as Value, '#' as Unit from stock_data where attribute='Days Inventory'

)

select * from result


end

go

alter procedure [vdt].[sp_get_sensitivity_analysis_chart_data]
	@DataSetId int,
	@user_id int
AS
BEGIN
	SET NOCOUNT ON;

		SELECT 
			A.attr_id,
			CASE A.is_cost
				WHEN 1 THEN CT.ct_name 
				ELSE A.attr_name 
			END as attribute, 
			CT.ct_name as cost_type,
			A.is_cost, 
			SV.impact_of_decrease , 
			SV.impact_of_increase,
			OG.og_name as org_group,
			FN.func_name as [function],
			ACT.act_name as activity,
			WS.ws_name as workstream,
			LOC.loc_name as location,
			ETP.eqp_type_name as equipment_type,
			EQP.eqp_name as equipment
		
		FROM [vdt].[sensitivity] S
			inner JOIN [vdt].[sensitivity_value] SV ON (SV.sensitivity_id = S.sensitivity_id) 		
			left join vdt.attribute A on A.attr_id = sv.attr_id
			left join vdt.location LOC on A.loc_id=LOC.loc_id
			left join vdt.[workstream] WS on A.ws_id=WS.ws_id
			left join vdt.activity ACT on A.act_id=ACT.act_id
			left join vdt.eqp_type ETP on A.eqp_type_id=ETP.eqp_type_id
			left join vdt.equipment EQP on A.eqp_id=EQP.eqp_id
			left join vdt.cost_type CT on A.ct_id=CT.CT_id
			left join vdt.org_group OG on A.og_id=OG.og_id
			left join vdt.[function] FN on A.func_id=FN.func_id

		WHERE s.dataset_id = @DataSetId
		AND (select sec_level from vdt.[user] where [user_id] = @user_id)  >=  A.sec_level
END


GO

alter procedure [vdt].[sp_get_attribution_analysis_chart_data]
	@BaseDatasetId int,
	@BenchmarkDatasetId int,
	@user_id int
AS
BEGIN
	SET NOCOUNT ON;

		SELECT 
			A.attr_id,
			CASE A.is_cost
				WHEN 1 THEN CT.ct_name 
				ELSE A.attr_name 
			END as attribute, 
			CT.ct_name as cost_type,
			A.is_cost, 
			UF.[format] as [format],
			AV.impact_on_target, 
			DS.value as scenario_value, 
			DB.value as benchmark_value, 
			OG.og_name as org_group,
			FN.func_name as [function],
			ACT.act_name as activity,
			WS.ws_name as workstream,
			LOC.loc_name as location,
			ETP.eqp_type_name as equipment_type,
			EQP.eqp_name as equipment
		
		FROM [vdt].[attribution] AA
			inner JOIN [vdt].[attribution_value] AV ON (AV.attribution_id = AA.attribution_id) 		
			left join vdt.attribute A on A.attr_id = AV.attr_id
			left join vdt.unit_format UF on A.unit = UF.unit
			left join vdt.location LOC on A.loc_id=LOC.loc_id
			left join vdt.[workstream] WS on A.ws_id=WS.ws_id
			left join vdt.activity ACT on A.act_id=ACT.act_id
			left join vdt.eqp_type ETP on A.eqp_type_id=ETP.eqp_type_id
			left join vdt.equipment EQP on A.eqp_id=EQP.eqp_id
			left join vdt.cost_type CT on A.ct_id=CT.CT_id
			left join vdt.org_group OG on A.og_id=OG.og_id
			left join vdt.[function] FN on A.func_id=FN.func_id
			left join [vdt].[data] DS on (DS.dataset_id =  @BaseDatasetId AND DS.attr_id = A.attr_id)
			left join [vdt].[data] DB on (DB.dataset_id =  @BenchmarkDatasetId AND DB.attr_id = A.attr_id)

		WHERE AA.base_dataset_id = @BaseDatasetId
		AND AA.benchmark_dataset_id = @BenchmarkDatasetId
		AND(select sec_level from vdt.[user] where [user_id] = @user_id)  >=  A.sec_level

END

GO

DROP PROCEDURE [staging].sp_import_qerent_model_structure;
go

DROP TYPE [staging].[QerentStructureType];
go

CREATE TYPE [staging].[QerentStructureType] AS TABLE (
    [QerentAttrId] INT NULL,
	[O1] [nvarchar](100) NULL,
	[O2] [nvarchar](100) NULL,
	[O3] [nvarchar](100) NULL,
	[O4] [nvarchar](100) NULL,
	[O5] [nvarchar](100) NULL,
	[O6] [nvarchar](100) NULL,
	[O7] [nvarchar](100) NULL,
	[O8] [nvarchar](100) NULL,
	[O9] [nvarchar](100) NULL,
	[O10] [nvarchar](100) NULL,
	[O11] [nvarchar](100) NULL,
	[Object Path] [nvarchar](256) NOT NULL,
	[Attribute] [nvarchar](100) NOT NULL,
	[Value] [float] NOT NULL,
	[Type] [nvarchar](10) NOT NULL,
	[DisplayUnit] [nvarchar](20) NOT NULL,
	[SecLevel] [int] NULL
)
GO

CREATE TYPE [staging].[QerentDependencyType] AS TABLE (
    [QerentAttrId] INT,
	[DependsOnQerentAttrId] INT
)
GO

create table vdt.attribute_dependency (
  attr_id int not null references vdt.attribute (attr_id),
  depends_on_attr_id int not null references vdt.attribute (attr_id),
  primary key (attr_id, depends_on_attr_id)
);

go

alter table staging.qerent_attr_ids add qerent_attr_id int;

go

create procedure [staging].[sp_import_qerent_model_structure] (
    @filename nvarchar(256),
	@data staging.QerentStructureType readonly,
	@deps staging.QerentDependencyType readonly)
as
begin
  set nocount on

  -- debugging purposes only
  if object_id(N'staging.temp_qerent_import', N'U') is not null
    drop table staging.temp_qerent_import;
  select * into staging.temp_qerent_import from @data;
  -- end debugging

  -- Set up the entry in the model table, if it doesn't already exist.
  if left(@filename, 1) = '_' set @filename = '_debug'
  declare @model_id int = null
  declare @should_copy_data bit = 0
  select @model_id=model_id from vdt.model where [filename]=@filename
  if @model_id is null
  begin
    insert into vdt.model ([filename], [file_date]) values (@filename, current_timestamp)
	set @model_id=SCOPE_IDENTITY()
  end
  else
  begin
    update vdt.model set file_date=current_timestamp where model_id=@model_id
  end;
  set @should_copy_data = 1;

  -- This lengthy query sets up a view of how the attributes from Qerent should be mapped into the vdt.attributes table.
  -- The result of this will get stored in #qerent_attrs later.
  with QAttrs as (
  select * from @data)
  
  ,DrillFleets as (
  select [Object Path], [O2] as Mine, [O5] as Fleet from QAttrs where O1='Mines' and O4='Drill' and [Attribute]='Target tonnes')
  
  ,DrillProd as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream, F.Mine as location,
    'Drills' as equipment_type, F.Fleet as equipment, null as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from DrillFleets F inner join QAttrs A on F.[Object Path]=A.[Object Path]
  )--where A.[Attribute] not in ('Headroom', 'Cost', 'Fixed cost', 'Variable cost'))
  
  ,DrillFleetCostLevers as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity,
    case when substring([O7], 1, 11)='Maintenance' then 'Maintenance' else 'Operations' end as workstream,
    F.Mine as location, 'Drills' as equipment_type, F.Fleet as equipment, coalesce([O8], [O7]) as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A inner join DrillFleets F on substring(A.[Object Path], 1, len(F.[Object Path]) + 7) = F.[Object Path] + '.Costs.'
  where left(A.[Type],1)='C')
  
  ,DrillOperationsCostLevers as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream,
    A.[O2] as location, null as equipment_type, null as equipment, coalesce([O7], [O6]) as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Drill' and [O5]='Operations' and [O6] is not null
  and left(A.[Type],1) = 'C'
  and (A.[O6] <> 'Fuels & Oils' or A.[O7] is not null))
  
  ,DrillSummary as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream,
    A.[O2] as location, null as equipment_type, null as equipment, null as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Drill' and [O5] is null
  and [Attribute] not in ('Use of Headroom'))
  
  ,DrillStock as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream,
    A.[O2] as location, 'Stockpile' as equipment_type, 'Drill Stock' as equipment, null as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Drill' and [O5]='Drill Inventory'
  )
  
  ,Blast as (
  select 'Mines' as org_group, 'Mining' as [function], 'Blast' as activity, 'Operations' as workstream,
    A.[O2] as location,
    case when [O5]='Blast Inventory' then 'Stockpile' else null end as equipment_type,
    case when [O5]='Blast Inventory' then [O5] else null end as equipment,
    [O6] as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Blast'
  )

  ,LoadHaul as (
  select 'Mines' as org_group, 'Mining' as [function],
    case when [O5] is null or [O5]='Operations' then 'Load & Haul' else [O5] end as activity,
	'Operations' as workstream,
    A.[O2] as location,
    case when [O5]='Load' then left([O6], len([O6])-1) when [O6] is null then null when [O5]='Haul' then 'Truck' else null end as equipment_type,
    case when [O5]='Load' then [O7] else [O6] end as equipment,
    case [O5] when 'Operations' then [O6] when 'Load' then [O9] else [O8] end as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Load & haul'
  )
  
  ,MineServicesAndOverheads as (
  select 'Mines' as org_group, 'Mining' as [function],
    [O4] as activity,
	case when [O4] is null then null when [O5]='Operations' or [O4]='Overheads' then 'Operations' else 'Support' end as workstream,
    A.[O2] as location,
    case when [O4] is null then null when [O5]='Operations' then null when [O4]='Overheads' then [O5] else 'Support' end as equipment_type,
    case when [O5]='Operations' then null when [O4]='Overheads' then [O6] else [O5] end as equipment,
    case when [O4]='Overheads' then [O7] else [O6] end as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Mining' and ([O4] is null or [O4] not in ('Drill', 'Blast', 'Load & haul'))
  )
  
  ,OverheadsMines as (
  select 'Mines' as org_group, 'Mining' as [function],
    'Overheads' as activity,
	coalesce([O4], 'Operations') as workstream,
    null as location,
    null as equipment_type,
    [O3] as equipment,
    coalesce([O5], [O4], [O3]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O2]='Overheads Mines'
  )

  ,ProcessingPlants as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	'Operations' as workstream,
    [O2] as location,
    'Plant' as equipment_type,
    [O5] as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O6] is null and [O4] not in ('Non Allocated Cost', 'Overheads')
  )

  ,ProcessingPlantCosts as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	case when [O8]='Maintenance' then 'Maintenance' else 'Operations' end as workstream,
    [O2] as location,
    'Plant' as equipment_type,
    [O7] as equipment,
    coalesce([O9], [O8]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O6]='Costs'
  )
  
  ,ProcessingNonAllocatedAndOverheads as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	[O5] as workstream,
    [O2] as location,
    case when [O7] is not null then [O6] else null end as equipment_type,
    null as equipment,
    coalesce([O7], [O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O4] in ('Non Allocated Cost', 'Overheads')
  )

  ,ProcessingTopLevel as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	null as workstream,
    [O2] as location,
    null as equipment_type,
    null as equipment,
    coalesce([O7], [O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O4] is null
  )
  
  ,MinesOverheads as (
  select 'Mines' as org_group, 'Overheads' as [function],
    [O4] as activity,
	case when [O5]='Maintenance' then [O5] else 'Operations' end as workstream,
    [O2] as location,
    case when [O5]='Maintenance' then null else [O5] end as equipment_type,
    null as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 3) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Overheads'
  )

  ,MinesTopLevel as (
  select 'Mines' as org_group, null as [function],
    null as activity,
	null as workstream,
    [O2] as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3] is null
  )
   
  ,RailVolume as (
  select
    'Rail' as org_group,
	case [O2] when 'Mines OOR' then 'Mainline' when 'Mines OFH' then 'Shuttle' else [O2] end as [function],
    'Rail' as activity,
	'Operations' as workstream,
    case when [O3]='Virtual Stockpile' then null else coalesce([O4], [O3]) end as location,
    null as equipment_type,
    null as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and substring(A.[Type], 1, 1) <> 'C' and [O2] is not null
  )

  ,RailProdCosts as (
  select
    'Rail' as org_group,
	case when [O2] in ('Mainline', 'Shuttle') then 'Production' else [O2] end as [function],
    case when [O2] in ('Mainline', 'Shuttle') then 'Operations' else [O3] end as activity,
	coalesce([O4], 'Direct Cost') as workstream,
    case when [O2] in ('Mainline', 'Shuttle') then coalesce([O3], [O2]) else null end as location,
    null as equipment_type,
    null as equipment,
    coalesce([O6], [O5], 'Diesel') as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and substring(A.[Type], 1, 1) = 'C' and [O2] not in ('Maintenance', 'Overheads') and [O2] is not null
  )

  ,RailOverheads as (
  select
    'Rail' as org_group,
	[O2] as [function],
    [O3] as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    coalesce([O5], [O4]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and [O2]='Overheads'
  )

  ,RailMaintenance as (
  select
    'Rail' as org_group,
	[O2] as [function],
    [O3] as activity,
	case when [o6] is null then 'Supporting Cost' else [o5] end as workstream,
    null as location,
    case when [O4] <> 'Overheads' and [o5] is not null then [o4] else null end as equipment_type,
    null as equipment,
    coalesce([O6], [O5], [O4]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and [O2]='Maintenance'
  )

  ,RailTopLevel as (
  select
    [O1] as org_group,
	null as [function],
    null as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and [O2] is null
  )

  ,PortInflow as (
  select
    [O1] as org_group,
	'Production' as [function],
    [O2] as activity,
	'Operations' as workstream,
    [O4] as location,
    case when [O3] is null then null else 'Car Dumper' end as equipment_type,
    [O3] as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Inflow'
  )

  ,PortOutflow as (
  select
    [O1] as org_group,
	'Production' as [function],
    [O3] as activity,
	'Operations' as workstream,
    coalesce([O6], [O4]) as location,
    left([O7], len([o7])-1) as equipment_type,
    [O8] as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O3]='Outflow'
  )

  ,PortProductionCosts as (
  select
    [O1] as org_group,
	[O2] as [function],
    [O4] as activity,
	case when [O6] is null then [O4] else [O5] end as workstream,
    [O3] as location,
    left([O7], len([o7])-1) as equipment_type,
    [O8] as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O3]<>'Outflow' and [O2]='Production'
  )

  ,PortSiteMaintenance as (
  select
    [O1] as org_group,
	[O2] as [function],
    case when [O4]='Overheads' then 'Overheads' else 'Maintenance' end as activity,
	case when [O4]='Overheads' then [O5] else 'Maintenance' end as workstream,
    [O3] as location,
    case when [O4]='Overheads' then null else left([O4], len([O4])-1) end as equipment_type,
    case when [O4]='Overheads' then null else [O5] end as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Maintenance' and [O3] in ('Nelson Point', 'Finucane Island')
  )

  ,PortMaintenance as (
  select
    [O1] as org_group,
	[O2] as [function],
    [O3] as activity,
	case when [O5] is null then 'Operations' when [O4]='Overheads' then [O5] when [O4] in ('Nelson Point', 'Finucane Island') then 'Operations' when [O4]='Other' then null else [O4] end as workstream,
    case when [O4] in ('Nelson Point', 'Finucane Island') then [O4] else null end as location,
    null as equipment_type,
    null as equipment,
    coalesce([O6], [O5], [O4]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Maintenance' and [O3] not in ('Nelson Point', 'Finucane Island')
  )

  ,PortMarine as (
    select
    [O1] as org_group,
	[O2] as [function],
    [O3] as activity,
	case when [O5] is null then 'Operations' else [O4] end as workstream,
    null as location,
    case when [O3]='Demurrage' then [O4] else null end as equipment_type,
    null as equipment,
    case when [O3]='Demurrage' then 'Demurrage' else coalesce([O5], [O4]) end as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Marine'
  )

  ,PortOverheads as (
  select
    [O1] as org_group,
	[O2] as [function],
    [O3] as activity,
	'Operations' as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    [O4] as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Overheads'
  )

  ,PortTopLevel as (
  select
    [O1] as org_group,
	null as [function],
    null as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2] is null
  )

  ,FunctionsCosts as (
  select
    'WAIO' as org_group,
	[O1] as [function],
    [O2] as activity,
	[O3] as workstream,
    [O4] as location,
    [O5] as equipment_type,
    [O6] as equipment,
    [O7] as cost_type,
	[O8] as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 3) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1] not in ('EBITDA', 'Mines', 'Rail', 'Port')
  )

  ,Revenue as (
  select 'WAIO' as org_group, 'Revenue' as [function],
    'Sales' as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	[O2] as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 3) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='EBITDA'
  )

  ,AllAttrs as (
    select * from DrillProd
    union all select * from DrillFleetCostLevers
    union all select * from DrillOperationsCostLevers
    union all select * from DrillSummary
    union all select * from DrillStock
    union all select * from Blast
	union all select * from LoadHaul
	union all select * from MineServicesAndOverheads
	union all select * from ProcessingPlants
	union all select * from ProcessingPlantCosts
	union all select * from ProcessingNonAllocatedAndOverheads
	union all select * from ProcessingTopLevel
	union all select * from MinesOverheads
	union all select * from MinesTopLevel
	union all select * from OverheadsMines
	union all select * from RailVolume
	union all select * from RailProdCosts
	union all select * from RailOverheads
	union all select * from RailMaintenance
	union all select * from RailTopLevel
	union all select * from PortInflow
	union all select * from PortOutflow
	union all select * from PortProductionCosts
	union all select * from PortSiteMaintenance
	union all select * from PortMaintenance
	union all select * from PortMarine
	union all select * from PortOverheads
	union all select * from PortTopLevel
	union all select * from FunctionsCosts
	union all select * from Revenue
  )

  select * into #qerent_attrs_raw from AllAttrs;

  -- Update category values for each category
  with Names as (select distinct org_group from #qerent_attrs_raw)
  insert into vdt.org_group (og_name) select org_group from Names
  where not exists (select * from vdt.org_group where og_name=Names.org_group)
  and Names.org_group is not null;

  with Names as (select distinct [function] from #qerent_attrs_raw)
  insert into vdt.[function] (func_name) select [function] from Names
  where not exists (select * from vdt.[function] where func_name=Names.[function])
  and Names.[function] is not null;

  with Names as (select distinct activity from #qerent_attrs_raw)
  insert into vdt.activity (act_name) select activity from Names
  where not exists (select * from vdt.activity where act_name=Names.activity)
  and Names.activity is not null;

  with Names as (select distinct workstream from #qerent_attrs_raw)
  insert into vdt.workstream (ws_name) select workstream from Names
  where not exists (select * from vdt.workstream where ws_name=Names.workstream)
  and Names.workstream is not null;

  with Names as (select distinct location from #qerent_attrs_raw)
  insert into vdt.location (loc_name) select location from Names
  where not exists (select * from vdt.location where loc_name=Names.location)
  and Names.location is not null;

  with Names as (select distinct equipment_type from #qerent_attrs_raw)
  insert into vdt.eqp_type (eqp_type_name) select equipment_type from Names
  where not exists (select * from vdt.eqp_type where eqp_type_name=Names.equipment_type)
  and Names.equipment_type is not null;

  with Names as (select distinct equipment from #qerent_attrs_raw)
  insert into vdt.equipment (eqp_name) select equipment from Names
  where not exists (select * from vdt.equipment where eqp_name=Names.equipment)
  and Names.equipment is not null;

  with Names as (select distinct cost_type from #qerent_attrs_raw)
  insert into vdt.cost_type (ct_name) select cost_type from Names
  where not exists (select * from vdt.cost_type where ct_name=Names.cost_type)
  and Names.cost_type is not null;

  with Names as (select distinct product from #qerent_attrs_raw)
  insert into vdt.product (prod_name) select product from Names
  where not exists (select * from vdt.product where prod_name=Names.product)
  and Names.product is not null;
  

  -- Join back to the qerent attrs to get the category IDs
  with WithIds as (
	select I.name as attr_name, I.unit, I.sec_level, I.is_cost, I.is_lever, I.is_calculated, I.is_aggregate, I.is_kpi,
	  O.og_id, F.func_id, A.act_id, W.ws_id, L.loc_id, ET.eqp_type_id, E.eqp_id, C.ct_id, P.prod_id,
	  I.value, I.path as qerent_path, I.attribute as qerent_attribute, D.QerentAttrId as qerent_attr_id
	from #qerent_attrs_raw I
	inner join @data D on I.[path]=D.[Object Path] and I.attribute=D.Attribute
	left join vdt.org_group O on I.org_group=O.og_name
	left join vdt.[function] F on I.[function]=F.[func_name]
	left join vdt.activity A on I.activity=A.act_name
	left join vdt.workstream W on I.workstream=W.ws_name
	left join vdt.location L on I.location=L.loc_name
	left join vdt.eqp_type ET on I.equipment_type=ET.eqp_type_name
	left join vdt.equipment E on I.equipment=E.eqp_name
	left join vdt.cost_type C on I.cost_type=C.ct_name
	left join vdt.product P on I.product=P.prod_name
  )
  
  select * into #qerent_attrs from WithIds;

  -- Udate is_cost etc on existing attributes
  update vdt.attribute set unit=Q.unit, sec_level=Q.sec_level, is_cost=Q.is_cost, is_lever=Q.is_lever, is_calculated=Q.is_calculated,
                           is_aggregate=Q.is_aggregate, is_kpi=Q.is_kpi
  from #qerent_attrs Q inner join staging.qerent_attr_ids I on Q.qerent_path=I.object_path and Q.qerent_attribute=I.attr_name
  where attribute.attr_id=I.attr_id --and I.model_id=@model_id

  -- Add any new attributes to the database
  insert into vdt.attribute (attr_name, unit, sec_level, is_cost, is_lever, is_calculated, is_aggregate, is_kpi, og_id, func_id, act_id, ws_id, loc_id, eqp_type_id, eqp_id, ct_id, prod_id)
  select attr_name, coalesce(unit, ''), sec_level, is_cost, is_lever, is_calculated, is_aggregate, is_kpi, og_id, func_id, act_id, ws_id, loc_id, eqp_type_id, eqp_id, ct_id, prod_id
  from #qerent_attrs Q
  where not exists (select * from staging.qerent_attr_ids E where E.object_path=Q.qerent_path and E.attr_name=Q.qerent_attribute /*and E.model_id=@model_id*/);

  -- Update existing qerent_ids in the staging map (these could change due to a scale-out, etc.)
  update staging.qerent_attr_ids set qerent_attr_id=Q.qerent_attr_id
  from #qerent_attrs Q where qerent_attr_ids.object_path=Q.qerent_path and qerent_attr_ids.attr_name=Q.qerent_attribute;
  
  -- Add new attributes to the qerent_attr_ids map
  insert into staging.qerent_attr_ids (model_id, attr_id, object_path, attr_name, qerent_attr_id)
  select @model_id, A.attr_id, Q.qerent_path, Q.qerent_attribute, Q.qerent_attr_id
  from #qerent_attrs Q inner join vdt.attribute A
  on Q.attr_name=A.attr_name
  and coalesce(Q.og_id, -1)=coalesce(A.og_id, -1)
  and coalesce(Q.func_id, -1)=coalesce(A.func_id, -1)
  and coalesce(Q.act_id, -1)=coalesce(A.act_id, -1)
  and coalesce(Q.ws_id, -1)=coalesce(A.ws_id, -1)
  and coalesce(Q.loc_id, -1)=coalesce(A.loc_id, -1)
  and coalesce(Q.eqp_type_id, -1)=coalesce(A.eqp_type_id, -1)
  and coalesce(Q.eqp_id, -1)=coalesce(A.eqp_id, -1)
  and coalesce(Q.ct_id, -1)=coalesce(A.ct_id, -1)
  and coalesce(Q.prod_id, -1)=coalesce(A.prod_id, -1)
  and not exists (select * from staging.qerent_attr_ids X where object_path=Q.qerent_path and attr_name=Q.qerent_attribute)

  -- Overwrite the dependency map for any attributes that were listed in @data
  -- NB we are relying on the script ensuring that attributes are in the @deps map if and only if they're in the @data table
  delete from vdt.attribute_dependency where attr_id in (select A.attr_id
  from staging.qerent_attr_ids A inner join @data D on A.object_path=D.[Object Path] and A.attr_name=D.Attribute);

  insert into vdt.attribute_dependency (attr_id, depends_on_attr_id)
  select X.attr_id, Y.attr_id
  from @deps D
  inner join staging.qerent_attr_ids X on D.QerentAttrId=X.qerent_attr_id
  inner join staging.qerent_attr_ids Y on D.DependsOnQerentAttrId=Y.qerent_attr_id
  where X.attr_id <> Y.attr_id;

  -- Copy data over from the model
  declare @dataset_id int = null;
  select @dataset_id = dataset_id from vdt.dataset where origin='model' and dataset_name='Model Data - ' + @filename;
  if @dataset_id is null
  begin
    declare @cat_id int = (select category_id from vdt.dataset_category where category_name='Scenario');
	insert into vdt.dataset (model_id, dataset_name, origin, category_id, last_update)
	values (@model_id, 'Model Data - ' + @filename, 'model', @cat_id, current_timestamp);
	set @dataset_id = SCOPE_IDENTITY();
  end
  if @dataset_id is not null
  begin
    delete from vdt.value where dataset_id=@dataset_id;
	insert into vdt.value (dataset_id, attr_id, value)
	select @dataset_id, I.attr_id, Q.value from staging.qerent_attr_ids I
	inner join #qerent_attrs Q on I.[object_path] = Q.[qerent_path] and I.[attr_name] = Q.[qerent_attribute] --and I.model_id=@model_id;
  end

  drop table #qerent_attrs;
  drop table #qerent_attrs_raw;
end


GO


commit transaction Version15;
go


PRINT 'Database has been updated successfully to version 15'
set noexec off;
go

--------------------------------------------------- Version 16 update ------------------------------------------------------------------

declare @cur_version int = (select max(db_version) from vdt.config)
IF @cur_version >= 16
begin
  print 'Skipping database update to v16; already at version ' + cast(@cur_version as nvarchar)
  set noexec on
end

begin transaction Version16;
go

set xact_abort on;
set nocount on;


INSERT INTO vdt.config([db_version],[updated_on]) VALUES(16,  getdate())
go


ALTER procedure [vdt].[sp_get_system_view]  
@dataset_id int,
@user_id int
as
begin

with activity_level as (
select
  case org_group
    when 'Mines' then [location] + ' ' + [activity]
	when 'Rail' then 'Rail Mainline'
	when 'Port' then 'Port ' + coalesce([location], [activity])
  end as Process,
  attribute,
  attr_id, null as h_attr_id,
  base_value,
  value
from vdt.data where attribute in ('Internal Capacity', 'Value Chain Tonnes')
and org_group <> 'Port' and ([function] <> 'Shuttle' or [function] is null) 
and dataset_id=@dataset_id
)
,equipment_level as (
select
  concat([location], ' ', [equipment]) as Process,
  case attribute
    when 'Internal process capacity' then 'Internal Capacity'
	when 'Tonnes processed' then 'Value Chain Tonnes'
  end as attribute,
  attr_id,null as h_attr_id,
  base_value,
  value
from vdt.data where attribute in ('Internal process capacity', 'Tonnes processed')
and org_group='Mines' and [function]='Processing' and location in ('Whaleback', 'Eastern Ridge', 'Jimblebar')
and [equipment] not in ('Crusher 9', 'OHP 5')
and dataset_id=@dataset_id
)
,excl_port_and_shuttle as (
select * from activity_level
union all
select * from equipment_level
)
,data as (
select * from excl_port_and_shuttle
union all
select 'Rail Shuttle' as Process, case when attribute='Actual Throughput' then 'Value Chain Tonnes' else attribute end as attribute, attr_id,null as h_attr_id,base_value, value
from vdt.data where [function]='Shuttle' and attribute in ('Actual Throughput', 'Internal Capacity') and dataset_id = @dataset_id
union all
select equipment as Process, case attribute /* Car dumpers */
  when 'Tonnes processed' then 'Value Chain Tonnes'
  when 'Internal process capacity' then 'Internal Capacity' end as attribute, attr_id,null as h_attr_id,
base_value, value from vdt.data where org_group='Port' and [activity]='Inflow' and equipment_type='Car Dumper'
and attribute in ('Tonnes processed', 'Internal process capacity') and dataset_id = @dataset_id
union all
select location as Process, case attribute /* Yards */
  when 'Yard inflow' then 'Value Chain Tonnes'
  when 'Yard capacity' then 'Internal Capacity' end as attribute, attr_id,null as h_attr_id,
base_value, value from vdt.data where org_group='Port' and activity='Outflow'
and attribute in ('Yard capacity', 'Yard inflow') and dataset_id = @dataset_id
union all
select case location   /* Shiploaders */
  when 'North Yard' then 'SL1&2'
  when 'East Yard' then 'SL3&4'
  when 'South Yard' then 'SL5&6'
  when 'West Yard' then 'SL7&8'
end as Process, case attribute
  when 'Yard outflow' then 'Value Chain Tonnes'
  when 'Shiploader capacity' then 'Internal Capacity' end as attribute,  attr_id,null as h_attr_id,
base_value, value from vdt.data where org_group='Port' and activity='Outflow'
and attribute in ('Shiploader capacity', 'Yard outflow') and dataset_id = @dataset_id
)
,pivoted_prod as (
select T.attr_id,C.attr_id as h_attr_id, T.Process, T.base_value as base_tonnes, T.value as scenario_tonnes, C.base_value as base_capacity, C.value as scenario_capacity,
         case when T.base_value > C.base_value then 1 else T.base_value / nullif(C.base_value,0) end as base_uoc,
		 case when T.value > C.value then 1 else T.value / nullif(C.value,0) end as scenario_uoc,
		 case when T.base_value / nullif(C.base_value,0) > 0.9 then 14428421--'#dc2905'
		      when T.base_value / nullif(C.base_value,0) > 0.65 then 14448901--'#dc7905'
			  when T.base_value / nullif(C.base_value,0) > 0.40 then 6347781--'#60dc05'
			  else 9962972/*'#9805dc'*/ end as base_color,
		 case when T.value / nullif(C.value,0) > 0.9 then 14428421--'#dc2905'
		      when T.value / nullif(C.value,0) > 0.65 then 14448901--'#dc7905'
			  when T.value / nullif(C.value,0) > 0.40 then 6347781--'#60dc05'
			  else 9962972/*'#9805dc'*/ end as scenario_color
from data T inner join data C on T.Process=C.Process
where T.attribute='Value Chain Tonnes' and C.attribute='Internal Capacity')
,stock_data as (
select location + ' ' + equipment as Process, attribute,attr_id,null as h_attr_id, base_value, value
from vdt.data where attribute in ('Closing Balance', 'Maximum Level', 'Minimum Level', 'Days Inventory')
  and equipment is not null and equipment <> 'Orebody'
and dataset_id=@dataset_id
)
,pivoted_stock as (
select T.attr_id,L.attr_id as h_attr_id, T.Process, T.base_value as base_tonnes, T.value as scenario_tonnes, coalesce(C.base_value, 2*T.base_value) as base_capacity, coalesce(C.value, 2*T.value) as scenario_capacity,
         case when T.base_value >= coalesce(C.base_value, 2*T.base_value) then 1 else T.base_value / nullif(coalesce(C.base_value, 2*T.base_value),0) end as base_uoc,
		 case when T.value >= coalesce(C.value, 2*T.value) then 1 else T.value / nullif(coalesce(C.value, 2*T.value),0) end as scenario_uoc,
		 case when T.base_value / nullif(coalesce(C.base_value, 2*T.base_value),0) > 0.9 or T.base_value < coalesce(L.base_value, 0) then 14428421--'#dc2905'
			  else 11579568/*9962972*//*'#9805dc'*/ end as base_color,
		 case when T.value / nullif(coalesce(C.value, 2*T.value),0) > 0.9 or T.value < coalesce(L.value, 0) then 14428421--'#dc2905'
			  else 11579568/*9962972*//*'#9805dc'*/ end as scenario_color
from stock_data T
left join stock_data C on T.Process=C.Process and C.attribute='Maximum Level'
left join stock_data L on T.Process=L.Process and L.attribute='Minimum Level'
where T.attribute='Closing Balance'
union all
select attr_id,attr_id as h_attr_id,[location] + ' Stock' as Process, base_value as base_tonnes, value as scenario_tonnes, 10000000 as base_capacity, 10000000 as scenario_capacity,
  case when base_value > 10000000 then 1 else base_value / 10000000 end as base_uoc,
  case when value > 10000000 then 1 else value / 10000000 end as scenario_uoc,
  case when base_value / 10000000 > 0.9 or base_value < 0 then 11579568--14428421--'#dc2905'
    --else 9962972/*'#9805dc'*/ end as base_color,
	else 11579568 end as base_color,
  case when value / 10000000 > 0.9 or value < 0 then 11579568-- 14428421--'#dc2905'
    --else 9962972/*'#9805dc'*/ end as scenario_color
	else 11579568 end as scenario_color
from vdt.data where attribute in ('Closing stock')
and dataset_id=@dataset_id
)
,ranked_prod as (
select *, rank() over (order by base_uoc desc) as base_rank, rank() over (order by scenario_uoc desc) as scenario_rank from pivoted_prod
)
,pivoted_prod_rank_color as (
select attr_id, h_attr_id, Process, base_tonnes, scenario_tonnes, base_capacity, scenario_capacity, base_uoc, scenario_uoc,
  case when base_rank=1 then 14428421--'#dc2905'
       when base_rank<5 then 14448901--'#dc7905'
	                    else 6347781--'#60dc05'
  end as base_color,
  case when scenario_rank=1 then 14428421--'#dc2905'
       when scenario_rank<5 then 14448901--'#dc7905'
	                       else 6347781--'#60dc05'
  end as scenario_color
from ranked_prod
)
,pivoted as (
select * from pivoted_prod_rank_color
union all
select * from pivoted_stock
)
,result as (
select 'Scenario' as [Case], 'Current Tonnes' as [Display], Process, 'Tonnes' as Attribute,attr_id, scenario_tonnes as Value, 'Mtpa' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Current Tonnes' as [Display], Process, 'Use of Capacity' as Attribute,attr_id, scenario_uoc as Value, '%' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Current Tonnes' as [Display], Process, 'Fill Color' as Attribute,attr_id, scenario_color as Value, 'color' as Unit from pivoted

union all

select 'Scenario' as [Case], 'Headroom' as [Display], Process, 'Tonnes' as Attribute,h_attr_id as attr_id, case when scenario_tonnes > scenario_capacity then 0 else scenario_capacity - scenario_tonnes end as Value, 'Mtpa' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Headroom' as [Display], Process, 'Use of Capacity' as Attribute,h_attr_id as attr_id, scenario_uoc as Value, '%' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Headroom' as [Display], Process, 'Fill Color' as Attribute,h_attr_id as attr_id, scenario_color as Value, 'color' as Unit from pivoted

union all

select 'Base Case' as [Case], 'Current Tonnes' as [Display], Process, 'Tonnes' as Attribute,attr_id, base_tonnes as Value, 'Mtpa' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Current Tonnes' as [Display], Process, 'Use of Capacity' as Attribute,attr_id, base_uoc as Value, '%' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Current Tonnes' as [Display], Process, 'Fill Color' as Attribute,attr_id, base_color as Value, 'color' as Unit from pivoted

union all

select 'Base Case' as [Case], 'Headroom' as [Display], Process, 'Tonnes' as Attribute,h_attr_id as attr_id, case when base_tonnes > base_capacity then 0 else base_capacity - base_tonnes end as Value, 'Mtpa' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Headroom' as [Display], Process, 'Use of Capacity' as Attribute,h_attr_id as attr_id, base_uoc as Value, '%' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Headroom' as [Display], Process, 'Fill Color' as Attribute,h_attr_id as attr_id, base_color as Value, 'color' as Unit from pivoted

union all
select 'Scenario' as [Case], 'Current Tonnes' as [Display], Process as Process, 'Days Inventory' as Attribute, attr_id as attr_id, [value] as Value, '#' as Unit from stock_data where attribute='Days Inventory'
union all
select 'Scenario' as [Case], 'Headroom' as [Display], Process as Process, 'Days Inventory' as Attribute, attr_id as attr_id, [value] as Value, '#' as Unit from stock_data where attribute='Days Inventory'
union all
select 'Base Case' as [Case], 'Current Tonnes' as [Display], Process as Process, 'Days Inventory' as Attribute, attr_id as attr_id, base_value as Value, '#' as Unit from stock_data where attribute='Days Inventory'
union all
select 'Base Case' as [Case], 'Headroom' as [Display], Process as Process, 'Days Inventory' as Attribute, attr_id as attr_id, base_value as Value, '#' as Unit from stock_data where attribute='Days Inventory'
)

select * from result


end
 
GO


commit transaction Version16;
go


PRINT 'Database has been updated successfully to version 16'
set noexec off;
go

--------------------------------------------------- Version 17 update ------------------------------------------------------------------

declare @cur_version int = (select max(db_version) from vdt.config)
IF @cur_version >= 17
begin
  print 'Skipping database update to v17; already at version ' + cast(@cur_version as nvarchar)
  set noexec on
end

begin transaction Version17;
go

set xact_abort on;
set nocount on;


INSERT INTO vdt.config([db_version],[updated_on]) VALUES(17,  getdate())
go



alter procedure [vdt].[sp_get_system_view]  
@dataset_id int,
@user_id int
as

begin

with activity_level as (
select
  case org_group
    when 'Mines' then [location] + ' ' + [activity]
	when 'Rail' then 'Rail Mainline'
	when 'Port' then 'Port ' + coalesce([location], [activity])
  end as Process,
  attribute,
  attr_id, null as h_attr_id,
  attribute_is_cost,attribute_is_lever,attribute_is_kpi,
  base_value,
  value
from vdt.data where attribute in ('Internal Capacity', 'Value Chain Tonnes')
and org_group <> 'Port' and ([function] <> 'Shuttle' or [function] is null) 
and dataset_id=@dataset_id
)
,equipment_level as (
select
  concat([location], ' ', [equipment]) as Process,
  case attribute
    when 'Internal process capacity' then 'Internal Capacity'
	when 'Tonnes processed' then 'Value Chain Tonnes'
  end as attribute,
  attr_id,null as h_attr_id,
  attribute_is_cost,attribute_is_lever,attribute_is_kpi,
  base_value,
  value
from vdt.data where attribute in ('Internal process capacity', 'Tonnes processed')
and org_group='Mines' and [function]='Processing' and location in ('Whaleback', 'Eastern Ridge', 'Jimblebar')
and [equipment] not in ('Crusher 9', 'OHP 5')
and dataset_id=@dataset_id
)
,excl_port_and_shuttle as (
select * from activity_level
union all
select * from equipment_level
)
,data as (
select * from excl_port_and_shuttle
union all
select 'Rail Shuttle' as Process, case when attribute='Actual Throughput' then 'Value Chain Tonnes' else attribute end as attribute, attr_id,null as h_attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi,base_value, value
from vdt.data where [function]='Shuttle' and attribute in ('Actual Throughput', 'Internal Capacity') and dataset_id = @dataset_id
union all
select equipment as Process, case attribute /* Car dumpers */
  when 'Tonnes processed' then 'Value Chain Tonnes'
  when 'Internal process capacity' then 'Internal Capacity' end as attribute, attr_id,null as h_attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi,
base_value, value from vdt.data where org_group='Port' and [activity]='Inflow' and equipment_type='Car Dumper'
and attribute in ('Tonnes processed', 'Internal process capacity') and dataset_id = @dataset_id
union all
select location as Process, case attribute /* Yards */
  when 'Yard inflow' then 'Value Chain Tonnes'
  when 'Yard capacity' then 'Internal Capacity' end as attribute, attr_id,null as h_attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi,
base_value, value from vdt.data where org_group='Port' and activity='Outflow'
and attribute in ('Yard capacity', 'Yard inflow') and dataset_id = @dataset_id
union all
select case location   /* Shiploaders */
  when 'North Yard' then 'SL1&2'
  when 'East Yard' then 'SL3&4'
  when 'South Yard' then 'SL5&6'
  when 'West Yard' then 'SL7&8'
end as Process, case attribute
  when 'Yard outflow' then 'Value Chain Tonnes'
  when 'Shiploader capacity' then 'Internal Capacity' end as attribute,  attr_id,null as h_attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi,
base_value, value from vdt.data where org_group='Port' and activity='Outflow'
and attribute in ('Shiploader capacity', 'Yard outflow') and dataset_id = @dataset_id
)
,pivoted_prod as (
select T.attr_id,C.attr_id as h_attr_id,
        T.attribute_is_cost,T.attribute_is_lever,T.attribute_is_kpi,
		C.attribute_is_cost as h_attribute_is_cost,C.attribute_is_lever as h_attribute_is_lever,C.attribute_is_kpi as h_attribute_is_kpi,
         T.Process, T.base_value as base_tonnes, T.value as scenario_tonnes, C.base_value as base_capacity, C.value as scenario_capacity,
         case when T.base_value > C.base_value then 1 else T.base_value / nullif(C.base_value,0) end as base_uoc,
		 case when T.value > C.value then 1 else T.value / nullif(C.value,0) end as scenario_uoc,
		 case when T.base_value / nullif(C.base_value,0) > 0.9 then 14428421--'#dc2905'
		      when T.base_value / nullif(C.base_value,0) > 0.65 then 14448901--'#dc7905'
			  when T.base_value / nullif(C.base_value,0) > 0.40 then 6347781--'#60dc05'
			  else 9962972/*'#9805dc'*/ end as base_color,
		 case when T.value / nullif(C.value,0) > 0.9 then 14428421--'#dc2905'
		      when T.value / nullif(C.value,0) > 0.65 then 14448901--'#dc7905'
			  when T.value / nullif(C.value,0) > 0.40 then 6347781--'#60dc05'
			  else 9962972/*'#9805dc'*/ end as scenario_color
from data T inner join data C on T.Process=C.Process
where T.attribute='Value Chain Tonnes' and C.attribute='Internal Capacity')
,stock_data as (
select location + ' ' + equipment as Process, attribute,attr_id,null as h_attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi, base_value, value
from vdt.data where attribute in ('Closing Balance', 'Maximum Level', 'Minimum Level', 'Days Inventory')
  and equipment is not null and equipment <> 'Orebody'
and dataset_id=@dataset_id
)
,pivoted_stock as (
select T.attr_id,L.attr_id as h_attr_id, 
       T.attribute_is_cost,T.attribute_is_lever,T.attribute_is_kpi,
		L.attribute_is_cost as h_attribute_is_cost,L.attribute_is_lever as h_attribute_is_lever,L.attribute_is_kpi as h_attribute_is_kpi,
         T.Process, T.base_value as base_tonnes, T.value as scenario_tonnes, coalesce(C.base_value, 2*T.base_value) as base_capacity, coalesce(C.value, 2*T.value) as scenario_capacity,
         case when T.base_value >= coalesce(C.base_value, 2*T.base_value) then 1 else T.base_value / nullif(coalesce(C.base_value, 2*T.base_value),0) end as base_uoc,
		 case when T.value >= coalesce(C.value, 2*T.value) then 1 else T.value / nullif(coalesce(C.value, 2*T.value),0) end as scenario_uoc,
		 case when T.base_value / nullif(coalesce(C.base_value, 2*T.base_value),0) > 0.9 or T.base_value < coalesce(L.base_value, 0) then 14428421--'#dc2905'
			  else 11579568/*9962972*//*'#9805dc'*/ end as base_color,
		 case when T.value / nullif(coalesce(C.value, 2*T.value),0) > 0.9 or T.value < coalesce(L.value, 0) then 14428421--'#dc2905'
			  else 11579568/*9962972*//*'#9805dc'*/ end as scenario_color
from stock_data T
left join stock_data C on T.Process=C.Process and C.attribute='Maximum Level'
left join stock_data L on T.Process=L.Process and L.attribute='Minimum Level'
where T.attribute='Closing Balance'
union all
select attr_id,attr_id as h_attr_id,
        attribute_is_cost,attribute_is_lever,attribute_is_kpi,
		attribute_is_cost as h_attribute_is_cost,attribute_is_lever as h_attribute_is_lever,attribute_is_kpi as h_attribute_is_kpi,
   [location] + ' Stock' as Process, base_value as base_tonnes, value as scenario_tonnes, 10000000 as base_capacity, 10000000 as scenario_capacity,
  case when base_value > 10000000 then 1 else base_value / 10000000 end as base_uoc,
  case when value > 10000000 then 1 else value / 10000000 end as scenario_uoc,
  case when base_value / 10000000 > 0.9 or base_value < 0 then 11579568--14428421--'#dc2905'
    --else 9962972/*'#9805dc'*/ end as base_color,
	else 11579568 end as base_color,
  case when value / 10000000 > 0.9 or value < 0 then 11579568-- 14428421--'#dc2905'
    --else 9962972/*'#9805dc'*/ end as scenario_color
	else 11579568 end as scenario_color
from vdt.data where attribute in ('Closing stock')
and dataset_id=@dataset_id
)
,ranked_prod as (
select *, rank() over (order by base_uoc desc) as base_rank, rank() over (order by scenario_uoc desc) as scenario_rank from pivoted_prod
)
,pivoted_prod_rank_color as (
select attr_id, h_attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi,h_attribute_is_cost,h_attribute_is_lever,h_attribute_is_kpi, Process, base_tonnes, scenario_tonnes, base_capacity, scenario_capacity, base_uoc, scenario_uoc,
  case when base_rank=1 then 14428421--'#dc2905'
       when base_rank<5 then 14448901--'#dc7905'
	                    else 6347781--'#60dc05'
  end as base_color,
  case when scenario_rank=1 then 14428421--'#dc2905'
       when scenario_rank<5 then 14448901--'#dc7905'
	                       else 6347781--'#60dc05'
  end as scenario_color
from ranked_prod
)
,pivoted as (
select * from pivoted_prod_rank_color
union all
select * from pivoted_stock
)
,result as (
select 'Scenario' as [Case], 'Current Tonnes' as [Display], Process, 'Tonnes' as Attribute,attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi, scenario_tonnes as Value, 'Mtpa' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Current Tonnes' as [Display], Process, 'Use of Capacity' as Attribute,attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi, scenario_uoc as Value, '%' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Current Tonnes' as [Display], Process, 'Fill Color' as Attribute,attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi, scenario_color as Value, 'color' as Unit from pivoted

union all

select 'Scenario' as [Case], 'Headroom' as [Display], Process, 'Tonnes' as Attribute,h_attr_id as attr_id,h_attribute_is_cost as attribute_is_cost,h_attribute_is_lever as attribute_is_lever,h_attribute_is_kpi as attribute_is_kpi, case when scenario_tonnes > scenario_capacity then 0 else scenario_capacity - scenario_tonnes end as Value, 'Mtpa' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Headroom' as [Display], Process, 'Use of Capacity' as Attribute,h_attr_id as attr_id,h_attribute_is_cost as attribute_is_cost,h_attribute_is_lever as attribute_is_lever,h_attribute_is_kpi as attribute_is_kpi, scenario_uoc as Value, '%' as Unit from pivoted
union all
select 'Scenario' as [Case], 'Headroom' as [Display], Process, 'Fill Color' as Attribute,h_attr_id as attr_id,h_attribute_is_cost as attribute_is_cost,h_attribute_is_lever as attribute_is_lever,h_attribute_is_kpi as attribute_is_kpi, scenario_color as Value, 'color' as Unit from pivoted

union all

select 'Base Case' as [Case], 'Current Tonnes' as [Display], Process, 'Tonnes' as Attribute,attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi, base_tonnes as Value, 'Mtpa' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Current Tonnes' as [Display], Process, 'Use of Capacity' as Attribute,attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi, base_uoc as Value, '%' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Current Tonnes' as [Display], Process, 'Fill Color' as Attribute,attr_id,attribute_is_cost,attribute_is_lever,attribute_is_kpi, base_color as Value, 'color' as Unit from pivoted

union all

select 'Base Case' as [Case], 'Headroom' as [Display], Process, 'Tonnes' as Attribute,h_attr_id as attr_id,h_attribute_is_cost as attribute_is_cost,h_attribute_is_lever as attribute_is_lever,h_attribute_is_kpi as attribute_is_kpi, case when base_tonnes > base_capacity then 0 else base_capacity - base_tonnes end as Value, 'Mtpa' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Headroom' as [Display], Process, 'Use of Capacity' as Attribute,h_attr_id as attr_id,h_attribute_is_cost as attribute_is_cost,h_attribute_is_lever as attribute_is_lever,h_attribute_is_kpi as attribute_is_kpi, base_uoc as Value, '%' as Unit from pivoted
union all
select 'Base Case' as [Case], 'Headroom' as [Display], Process, 'Fill Color' as Attribute,h_attr_id as attr_id,h_attribute_is_cost as attribute_is_cost,h_attribute_is_lever as attribute_is_lever,h_attribute_is_kpi as attribute_is_kpi, base_color as Value, 'color' as Unit from pivoted

union all
select 'Scenario' as [Case], 'Current Tonnes' as [Display], Process as Process, 'Days Inventory' as Attribute, attr_id as attr_id,attribute_is_cost,attribute_is_lever ,attribute_is_kpi, [value] as Value, '#' as Unit from stock_data where attribute='Days Inventory'
union all
select 'Scenario' as [Case], 'Headroom' as [Display], Process as Process, 'Days Inventory' as Attribute, attr_id as attr_id,attribute_is_cost ,attribute_is_lever ,attribute_is_kpi, [value] as Value, '#' as Unit from stock_data where attribute='Days Inventory'
union all
select 'Base Case' as [Case], 'Current Tonnes' as [Display], Process as Process, 'Days Inventory' as Attribute, attr_id as attr_id,attribute_is_cost ,attribute_is_lever ,attribute_is_kpi, base_value as Value, '#' as Unit from stock_data where attribute='Days Inventory'
union all
select 'Base Case' as [Case], 'Headroom' as [Display], Process as Process, 'Days Inventory' as Attribute, attr_id as attr_id,attribute_is_cost,attribute_is_lever ,attribute_is_kpi, base_value as Value, '#' as Unit from stock_data where attribute='Days Inventory'

)

select * from result


end

go

CREATE procedure [vdt].[sp_get_attributes_by_string]
@dataset_id int, 
@user_id int,
@search_string nvarchar(Max),
@search_option nvarchar(100)

AS 
BEGIN 
     SET NOCOUNT ON 

     declare @sec_level int;
     set @sec_level = (select sec_level from vdt.[user] where [user_id] = @user_id);
     IF @search_option = 'contains'
			select 
			  org_group, [function], activity, workstream, location, equipment_type, equipment, cost_type, product, attr_id, attribute, attribute_unit,
			  attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
			from vdt.data where dataset_id=@dataset_id
			  AND  
			      ((attribute_is_cost=1 and cost_type is not null and cost_type like '%'+@search_string+'%')
					 or (attribute_is_cost=1 and cost_type is null and attribute like '%'+@search_string+'%')
					 or (attribute_is_cost=0 and attribute like '%'+@search_string+'%'))
			  AND  (attribute_is_kpi = 0 and attribute_is_lever =1)    
			  AND  @sec_level>=  attribute_sec_level
	 ELSE IF @search_option = 'equals'
	       select 
			  org_group, [function], activity, workstream, location, equipment_type, equipment, cost_type, product, attr_id, attribute, attribute_unit,
			  attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
			from vdt.data where dataset_id=@dataset_id
			  AND 
			    ((attribute_is_cost=1 and cost_type is not null and cost_type = @search_string)
					 or (attribute_is_cost=1 and cost_type is null and attribute = @search_string)
					 or (attribute_is_cost=0 and attribute = @search_string))  
			  AND (attribute_is_kpi = 0 and attribute_is_lever =1)   
			  AND  @sec_level>=  attribute_sec_level
	 ELSE IF @search_option = 'not equal'
	       select 
			  org_group, [function], activity, workstream, location, equipment_type, equipment, cost_type, product, attr_id, attribute, attribute_unit,
			  attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
			from vdt.data where dataset_id=@dataset_id
			  AND  
			     ((attribute_is_cost=1 and cost_type is not null and cost_type != @search_string)
					 or (attribute_is_cost=1 and cost_type is null and attribute != @search_string)
					 or (attribute_is_cost=0 and attribute != @search_string))  
			  AND (attribute_is_kpi = 0 and attribute_is_lever =1)    
			  AND  @sec_level>=  attribute_sec_level
	 ELSE IF @search_option = 'not contain'
	       select 
			  org_group, [function], activity, workstream, location, equipment_type, equipment, cost_type, product, attr_id, attribute, attribute_unit,
			  attribute_sec_level, attribute_is_cost, attribute_is_lever, attribute_is_aggregate, attribute_is_kpi, value, base_value, override_value
			from vdt.data where dataset_id=@dataset_id
			  AND   ((attribute_is_cost=1 and cost_type is not null and cost_type not like '%'+@search_string+'%')
					 or (attribute_is_cost=1 and cost_type is null and attribute not like '%'+@search_string+'%')
					 or (attribute_is_cost=0 and attribute not like '%'+@search_string+'%'))
			  AND (attribute_is_kpi = 0 and attribute_is_lever =1) 
			  AND  @sec_level>=  attribute_sec_level
  
END  

GO

SET IDENTITY_INSERT [vdt].[audit_category] ON	

insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (20, N'Watch Window')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (21, N'Add Attribute(s)')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (22, N'Remove Attribute(s)')

SET IDENTITY_INSERT [vdt].[audit_category] OFF

GO

CREATE TABLE [vdt].[model_group](
	[model_group_id] int identity primary key,
	[name] [nvarchar](50) not null,
	[is_offline] [bit] not null,
	[instances] [int] not null
);

go

CREATE TABLE [vdt].[access_group](
	[access_group_id] int identity primary key,
	[security_level] [int] not null,
	[ad_name] [nvarchar](50) not null,
	[model_group_id] int not null references vdt.model_group (model_group_id)
);

go

CREATE TABLE [vdt].[super_user_group](
	[super_user_group_id] int identity primary key,
	[ad_name] [nvarchar](50) not null,
	[model_group_id] int not null references vdt.model_group (model_group_id)
	);
go



GO
SET IDENTITY_INSERT [vdt].[model_group] ON	

INSERT [vdt].[model_group] ([model_group_id], [name], [is_offline], [instances]) VALUES (1, N'Default', 0, 20)

SET IDENTITY_INSERT [vdt].[model_group] OFF

GO

alter table [vdt].[model] add is_active [bit] not null default(1);
alter table [vdt].[model] add [version] [int] not null default(1);
alter table [vdt].[model] add connection_string [nvarchar](256) not null default('');
alter table [vdt].[model] add model_group_id int not null references vdt.model_group (model_group_id) default(1)
alter table [vdt].[model] add last_rollback int null ;
alter table [vdt].[model] add rollback_filename [nvarchar](256) null;
alter table [vdt].[model] add rollback_file_date [datetime] null;
alter table [vdt].[model] add top_of_tree_attr_id int null;
go

create procedure [vdt].[sp_is_super_user_group]
@group_names FilterTableType READONLY,
@model_id int
AS 
BEGIN 
     SET NOCOUNT ON 

select case when EXISTS (
select super_user_group_id from vdt.super_user_group super_user_group
inner join vdt.model model on model_id = @model_id
where (ad_name in (select item from @group_names)
and super_user_group.model_group_id = model.model_group_id)
)
then CAST(1 as bit) 
else CAST(0 as bit) end as is_super_user_group 

END 

go

create procedure [vdt].[sp_get_group_access_level]
@group_names FilterTableType READONLY,
@model_id int
AS 
BEGIN 
     SET NOCOUNT ON 

select max(security_level) as access_level from vdt.access_group  access_group
inner join vdt.model model on model_id = @model_id
where (ad_name in (select item from @group_names) and access_group.model_group_id = model.model_group_id )

END 

go

CREATE procedure [vdt].[sp_get_access_groups]
AS 
BEGIN 
     SET NOCOUNT ON 

SELECT Distinct ad_name  FROM [vdt].[access_group]

END
go

alter table [vdt].[user] add is_admin_user [bit] not null default(0);

go

Create procedure [vdt].[sp_get_model_groups]
@group_names FilterTableType READONLY,
@admin_user int 
AS 
BEGIN 
     SET NOCOUNT ON 
	declare @sec_level int,@ad_name nvarchar(200),@is_admin_user int, @user_id int;
	set @sec_level = (select sec_level from vdt.[user] where [user_id] = @user_id);
	set @ad_name = (select ad_name from vdt.[user] where [user_id] = @user_id);
	set @is_admin_user = (select is_admin_user from vdt.[user] where [user_id] = @user_id);

	IF @admin_user = 0
	BEGIN
	select DISTINCT mg.model_group_id,mg.name as model_group_name,m.model_id,m.[filename],m.[version] as model_version,mg.[instances]

	 from vdt.model_group as mg
	 inner join vdt.model as m on m.model_group_id = mg.model_group_id
	 inner join vdt.access_group as ag on m.model_group_id = ag.model_group_id
	 where m.is_active = 1 and (ag.ad_name  in (select item from @group_names)) order by mg.model_group_id ASC
	 -- @sec_level>= ag.security_level
	 END
	 ELSE
	  BEGIN
	     select DISTINCT mg.model_group_id,mg.name as model_group_name,m.model_id,m.[filename],m.[version] as model_version,mg.[instances]

		 from vdt.model_group as mg
		 inner join vdt.model as m on m.model_group_id = mg.model_group_id
		 inner join vdt.access_group as ag on m.model_group_id = ag.model_group_id
		 where m.is_active = 1  order by mg.model_group_id ASC
	  END

END
go

CREATE procedure [vdt].[sp_get_model_groups_by_id] 
@model_group_id int

AS 
BEGIN 
     SET NOCOUNT ON 

select mg.model_group_id,mg.name as model_group_name,mg.instances,
       m.model_id,m.filename,m.file_date,m.version,m.is_active,m.connection_string,
	   ag.access_group_id,ag.security_level,ag.ad_name as [access_group_ad_name],
	   sug.super_user_group_id,sug.ad_name as [super_user_ad_name]
       from vdt.model_group as mg
       inner join vdt.model as m on m.model_group_id = mg.model_group_id
	   inner join vdt.access_group as ag on ag.model_group_id = mg.model_group_id
	   inner join vdt.super_user_group as sug on sug.model_group_id= mg.model_group_id
	   where (mg.model_group_id=@model_group_id AND m.is_active=1)

END 
go

CREATE TYPE [vdt].[AccessGroupType] AS TABLE(
	[access_group_id] [int] NOT NULL,
	[security_level] [int] NOT NULL,
	[ad_name] [nvarchar](200) NOT NULL
)
GO

CREATE TYPE [vdt].[SuperUserAccessGroupType] AS TABLE(
	[super_user_access_group_id] [int] NOT NULL,
	[ad_name] [nvarchar](200) NOT NULL
)
GO

CREATE procedure [vdt].[sp_insert_model]
   @model_group_name nvarchar(100),
   @no_of_instances int,
   @file_name nvarchar(256),
   @model_version int,
   @connection_string nvarchar(MAX),
   @access_group_names AccessGroupType READONLY,
   @super_user_group_names SuperUserAccessGroupType READONLY,
   @model_group_id int output,
   @model_id int output
AS 

BEGIN 
     SET NOCOUNT ON 

	 INSERT INTO [vdt].[model_group] ([name],[is_offline],[instances])
     VALUES (@model_group_name,0,@no_of_instances)

     select @model_group_id= CAST(scope_identity() AS int)

	 INSERT INTO [vdt].[model] ([filename],[file_date],[is_active],[version],[model_group_id],[connection_string])
			VALUES (@file_name,GETDATE(),1,@model_version,@model_group_id,@connection_string)

	select @model_id= CAST(scope_identity() AS int)

    INSERT INTO [vdt].[access_group] ([security_level],[ad_name],[model_group_id])
	select security_level,ad_name,@model_group_id from @access_group_names
     
	 INSERT INTO [vdt].[super_user_group] ([ad_name],[model_group_id])
     select ad_name,@model_group_id from @super_user_group_names
 select @model_group_id,@model_id;
END  

go

CREATE procedure [vdt].[sp_update_model]
   @model_group_id int,
   @model_id int,
   @model_group_name nvarchar(100),
   @no_of_instances int,
   @file_name nvarchar(256),
   @model_version int,
   @connection_string nvarchar(MAX),
   @access_group_names AccessGroupType READONLY,
   @super_user_group_names SuperUserAccessGroupType READONLY
AS 

BEGIN 
     SET NOCOUNT ON 
	 declare @model_version_from_db int,
	 @model_version_count int,
	 @rollback_filename nvarchar(256),
	 @rollback_file_date datetime;
	 set @model_version_from_db = (select [version] from vdt.model where model_id=@model_id);
     set @rollback_filename = (select [filename] from vdt.model where model_id=@model_id);
	 set @rollback_file_date = (select [file_date] from vdt.model where model_id=@model_id);
	 
	 UPDATE [vdt].[model_group] SET
		   [name] = @model_group_name,
		   [instances]= @no_of_instances
		  where model_group_id = @model_group_id

	      UPDATE [vdt].[model] SET [filename] = @file_name,[file_date] = GETDATE() ,
		      [is_active] = 1,[version] = @model_version,[model_group_id] = @model_group_id,
			  [connection_string] = @connection_string,[rollback_filename] = @rollback_filename,
			  [rollback_file_date] = @rollback_file_date,[last_rollback] = (@model_version - 1) 
		   where model_id= @model_id;


	 MERGE [access_group] AS T
		USING @access_group_names AS S
		ON (T.access_group_id = S.access_group_id AND T.model_group_id = @model_group_id) 
		WHEN NOT MATCHED BY TARGET 
			THEN INSERT ([security_level],[ad_name],[model_group_id]) Values (S.security_level,S.ad_name,@model_group_id)

		WHEN MATCHED 
			THEN UPDATE SET T.[security_level] = S.security_level,T.[ad_name] = S.ad_name
			     
		WHEN NOT MATCHED BY SOURCE AND T.[model_group_id] = @model_group_id
	 	 THEN DELETE ;
		
		MERGE [super_user_group] AS T
		USING @super_user_group_names AS S
		ON (T.super_user_group_id = S.[super_user_access_group_id] AND T.model_group_id = @model_group_id) 
		WHEN NOT MATCHED BY TARGET 
			THEN INSERT ([ad_name],[model_group_id]) values(S.ad_name,@model_group_id)

		 WHEN MATCHED 
			THEN UPDATE SET  T.[ad_name] = S.ad_name

		WHEN NOT MATCHED BY SOURCE AND T.[model_group_id] = @model_group_id
	 	 THEN DELETE ;

END  

go

CREATE procedure [vdt].[sp_upload_model] 
@model_group_id int,
@model_version int,
@file_name nvarchar(256)

AS 
BEGIN 
     declare @connection_string nvarchar(Max),
	 @rollback_filename nvarchar(256),
	 @rollback_file_date datetime;
	 
     SET NOCOUNT ON 
	  set @rollback_filename = (select [filename] from vdt.model where [model_group_id]=@model_group_id);
	  set @rollback_file_date = (select [file_date] from vdt.model where [model_group_id]=@model_group_id);
	   
	  UPDATE [vdt].[model] SET [filename] = @file_name,[file_date] = GETDATE() ,
			[is_active] = 1,[version] = @model_version,[rollback_filename] = @rollback_filename,
			[rollback_file_date] = @rollback_file_date,[last_rollback] = (@model_version - 1)
	   where [model_group_id] = @model_group_id
END 
go

CREATE procedure [vdt].[sp_rollback_to_previous_model] 
@model_group_id int,
@model_id int

AS 
BEGIN 
          declare @modelVersion int,@model_version_count int,
	 @filename nvarchar(256),
     @file_date datetime;
     SET NOCOUNT ON 
	 SET @model_version_count =(select count([version]) from vdt.model where model_group_id = @model_group_id)
	 SET @modelVersion =(select [version] from vdt.model where model_id = @model_id)
	 set @filename = (select [rollback_filename] from vdt.model where model_id=@model_id);
	 set @file_date = (select [rollback_file_date] from vdt.model where model_id=@model_id);

		 UPDATE [vdt].[model] SET [version] = @modelVersion-1,[filename] = @filename,
		       file_date = @file_date,[rollback_filename] = null,[rollback_file_date] = null
		  where model_id = @model_id
END

go

CREATE procedure [vdt].[sp_get_previous_model_version_by_model_group_id] 
@model_group_id int
AS 
BEGIN 
		SELECT [last_rollback] as model_rollback_version,[rollback_filename] as model_rollback_filename,
		   FORMAT([rollback_file_date], 'yyyy-MM-dd HH:mm:ss') as model_rollback_file_date
		FROM vdt.model WHERE model_group_id = @model_group_id and [version] >  [last_rollback]
END

go

CREATE procedure [vdt].[sp_get_admin_model_groups]
AS 
BEGIN 
     SET NOCOUNT ON 

select mg.model_group_id,mg.name as model_group_name,m.model_id,m.[filename],m.[version] ,mg.[instances]
 from vdt.model_group as mg
 inner join vdt.model as m on m.model_group_id = mg.model_group_id
 where m.is_active = 1

END
go

SET IDENTITY_INSERT [vdt].[audit_category] ON	

insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (23, N'Admin Console')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (24, N'Create Model')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (25, N'Upload Model')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (26, N'Update Model')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (27, N'Rollback Model')
insert into [vdt].[audit_category] ([audit_category_id],[name]) VALUES (28, N'Test Connection')

SET IDENTITY_INSERT [vdt].[audit_category] OFF	

go


ALTER procedure [vdt].[sp_get_user_details]
	@user_id int
AS 
BEGIN 
     SET NOCOUNT ON 

SELECT [user_id]
      ,[login]
      ,[sec_level]
      ,[ad_name]
      ,[is_power_user]
	  ,[is_admin_user]
	  ,[pwd_hash]
  FROM [vdt].[user]
  WHERE [user_id] = @user_id

END 

go

ALTER procedure [vdt].[sp_get_model_by_dataset]
  @dataset_id int,
  @user_id int
as
begin
  set nocount on;

  select M.model_id, M.[filename], M.file_date, MG.[name] as model_group, M.[version]
  from vdt.model M 
  inner join vdt.dataset D on M.model_id=D.model_id
  inner join vdt.model_group MG on M.model_group_id = MG.model_group_id
  where D.dataset_id=@dataset_id
end

go

ALTER procedure [vdt].[sp_insert_user]
       @login VARCHAR(15)= NULL, 
       @ad_name NVARCHAR(128)= NULL, 
       @pwd_hash NVARCHAR(64)= NULL,
	   @sec_level int,
	   @is_power_user  bit,
	   @is_admin_user  bit                    
AS 
BEGIN 
     SET NOCOUNT ON 

     INSERT INTO vdt.[user]
          ( 
            [login],
            ad_name,
            pwd_hash,
			sec_level,
			is_power_user,
			is_admin_user         
          ) 
     VALUES 
          ( 
            @login,
            @ad_name,
            @pwd_hash,
			@sec_level,
			@is_power_user,
			@is_admin_user                
          ) 

END 

go

ALTER procedure [vdt].[sp_update_user]
	   @user_id int,
	   @sec_level int,
	   @is_power_user  bit,
	   @is_admin_user bit	                   
as 
begin 
     set NOCOUNT ON 

    update vdt.[user]
	set is_power_user = @is_power_user, sec_level = @sec_level, is_admin_user = @is_admin_user
	where [user_id] = @user_id

end

go

create procedure [vdt].[sp_replicate_insert_update_user]
	   @user_id int,
       @login VARCHAR(15)= NULL, 
       @ad_name NVARCHAR(128)= NULL, 
       @pwd_hash NVARCHAR(64)= NULL,
	   @sec_level int,
	   @is_power_user  bit,
	   @is_admin_user bit                   
AS 
BEGIN 
     SET NOCOUNT ON 

	 IF EXISTS (SELECT 1 FROM vdt.[user] WHERE [user_id] = @user_id)
		BEGIN
 
			update vdt.[user]
			set is_power_user = @is_power_user, sec_level = @sec_level, is_admin_user = @is_admin_user
			where [user_id] = @user_id
			
		END

	ELSE

		BEGIN

			SET IDENTITY_INSERT [vdt].[user] ON

			 INSERT INTO vdt.[user]
				  ( 
					[user_id],
					[login],
					ad_name,
					pwd_hash,
					sec_level,
					is_power_user,
					is_admin_user            
				  ) 
			 VALUES 
				  ( 
					@user_id,
					@login,
					@ad_name,
					@pwd_hash,
					@sec_level,
					@is_power_user,
					@is_admin_user               
				  ) 

			SET IDENTITY_INSERT [vdt].[user] OFF

		END

END 

go

create procedure [vdt].[sp_get_model_connection_string]
@model_id int
AS 
BEGIN 
     SET NOCOUNT ON 

SELECT  connection_string from vdt.model where model_id = @model_id

END 
go

create procedure [vdt].[sp_get_model_connection_strings]
AS 
BEGIN 
     SET NOCOUNT ON 

SELECT model_id, connection_string from vdt.model

END

go 


create procedure [vdt].[sp_get_all_model_groups]
AS 
BEGIN 
     SET NOCOUNT ON 

select mg.model_group_id,mg.name as model_group_name,m.model_id,m.[filename],m.[version] as model_version,mg.[instances]
 from vdt.model_group as mg
 inner join vdt.model as m on m.model_group_id = mg.model_group_id
 where m.is_active = 1

END

go


ALTER procedure [staging].[sp_import_qerent_model_structure] (
    @model_id int,
    @filename nvarchar(256),
	@data staging.QerentStructureType readonly,
	@deps staging.QerentDependencyType readonly,
	@top_of_tree_qattr_id int)
as
begin
  set nocount on

  -- debugging purposes only
  if object_id(N'staging.temp_qerent_import', N'U') is not null
    drop table staging.temp_qerent_import;
  select * into staging.temp_qerent_import from @data;
  -- end debugging

  if left(@filename, 1) = '_' set @filename = '_debug'
  declare @should_copy_data bit = 0
  set @should_copy_data = 1;

  -- This lengthy query sets up a view of how the attributes from Qerent should be mapped into the vdt.attributes table.
  -- The result of this will get stored in #qerent_attrs later.
  with QAttrs as (
  select * from @data)
  
  ,DrillFleets as (
  select [Object Path], [O2] as Mine, [O5] as Fleet from QAttrs where O1='Mines' and O4='Drill' and [Attribute]='Target tonnes')
  
  ,DrillProd as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream, F.Mine as location,
    'Drills' as equipment_type, F.Fleet as equipment, null as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from DrillFleets F inner join QAttrs A on F.[Object Path]=A.[Object Path]
  )--where A.[Attribute] not in ('Headroom', 'Cost', 'Fixed cost', 'Variable cost'))
  
  ,DrillFleetCostLevers as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity,
    case when substring([O7], 1, 11)='Maintenance' then 'Maintenance' else 'Operations' end as workstream,
    F.Mine as location, 'Drills' as equipment_type, F.Fleet as equipment, coalesce([O8], [O7]) as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A inner join DrillFleets F on substring(A.[Object Path], 1, len(F.[Object Path]) + 7) = F.[Object Path] + '.Costs.'
  where left(A.[Type],1)='C')
  
  ,DrillOperationsCostLevers as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream,
    A.[O2] as location, null as equipment_type, null as equipment, coalesce([O7], [O6]) as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Drill' and [O5]='Operations' and [O6] is not null
  and left(A.[Type],1) = 'C'
  and (A.[O6] <> 'Fuels & Oils' or A.[O7] is not null))
  
  ,DrillSummary as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream,
    A.[O2] as location, null as equipment_type, null as equipment, null as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name, A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Drill' and [O5] is null
  and [Attribute] not in ('Use of Headroom'))
  
  ,DrillStock as (
  select 'Mines' as org_group, 'Mining' as [function], 'Drill' as activity, 'Operations' as workstream,
    A.[O2] as location, 'Stockpile' as equipment_type, 'Drill Stock' as equipment, null as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Drill' and [O5]='Drill Inventory'
  )
  
  ,Blast as (
  select 'Mines' as org_group, 'Mining' as [function], 'Blast' as activity, 'Operations' as workstream,
    A.[O2] as location,
    case when [O5]='Blast Inventory' then 'Stockpile' else null end as equipment_type,
    case when [O5]='Blast Inventory' then [O5] else null end as equipment,
    [O6] as cost_type, null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Blast'
  )

  ,LoadHaul as (
  select 'Mines' as org_group, 'Mining' as [function],
    case when [O5] is null or [O5]='Operations' then 'Load & Haul' else [O5] end as activity,
	'Operations' as workstream,
    A.[O2] as location,
    case when [O5]='Load' then left([O6], len([O6])-1) when [O6] is null then null when [O5]='Haul' then 'Truck' else null end as equipment_type,
    case when [O5]='Load' then [O7] else [O6] end as equipment,
    case [O5] when 'Operations' then [O6] when 'Load' then [O9] else [O8] end as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O4]='Load & haul'
  )
  
  ,MineServicesAndOverheads as (
  select 'Mines' as org_group, 'Mining' as [function],
    [O4] as activity,
	case when [O4] is null then null when [O5]='Operations' or [O4]='Overheads' then 'Operations' else 'Support' end as workstream,
    A.[O2] as location,
    case when [O4] is null then null when [O5]='Operations' then null when [O4]='Overheads' then [O5] else 'Support' end as equipment_type,
    case when [O5]='Operations' then null when [O4]='Overheads' then [O6] else [O5] end as equipment,
    case when [O4]='Overheads' then [O7] else [O6] end as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Mining' and ([O4] is null or [O4] not in ('Drill', 'Blast', 'Load & haul'))
  )
  
  ,OverheadsMines as (
  select 'Mines' as org_group, 'Mining' as [function],
    'Overheads' as activity,
	coalesce([O4], 'Operations') as workstream,
    null as location,
    null as equipment_type,
    [O3] as equipment,
    coalesce([O5], [O4], [O3]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O2]='Overheads Mines'
  )

  ,ProcessingPlants as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	'Operations' as workstream,
    [O2] as location,
    'Plant' as equipment_type,
    [O5] as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O6] is null and [O4] not in ('Non Allocated Cost', 'Overheads')
  )

  ,ProcessingPlantCosts as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	case when [O8]='Maintenance' then 'Maintenance' else 'Operations' end as workstream,
    [O2] as location,
    'Plant' as equipment_type,
    [O7] as equipment,
    coalesce([O9], [O8]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O6]='Costs'
  )
  
  ,ProcessingNonAllocatedAndOverheads as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	[O5] as workstream,
    [O2] as location,
    case when [O7] is not null then [O6] else null end as equipment_type,
    null as equipment,
    coalesce([O7], [O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O4] in ('Non Allocated Cost', 'Overheads')
  )

  ,ProcessingTopLevel as (
  select 'Mines' as org_group, 'Processing' as [function],
    [O4] as activity,
	null as workstream,
    [O2] as location,
    null as equipment_type,
    null as equipment,
    coalesce([O7], [O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Processing' and [O4] is null
  )
  
  ,MinesOverheads as (
  select 'Mines' as org_group, 'Overheads' as [function],
    [O4] as activity,
	case when [O5]='Maintenance' then [O5] else 'Operations' end as workstream,
    [O2] as location,
    case when [O5]='Maintenance' then null else [O5] end as equipment_type,
    null as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 3) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3]='Overheads'
  )

  ,MinesTopLevel as (
  select 'Mines' as org_group, null as [function],
    null as activity,
	null as workstream,
    [O2] as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Mines' and [O3] is null
  )
   
  ,RailVolume as (
  select
    'Rail' as org_group,
	case [O2] when 'Mines OOR' then 'Mainline' when 'Mines OFH' then 'Shuttle' else [O2] end as [function],
    'Rail' as activity,
	'Operations' as workstream,
    case when [O3]='Virtual Stockpile' then null else coalesce([O4], [O3]) end as location,
    null as equipment_type,
    null as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and substring(A.[Type], 1, 1) <> 'C' and [O2] is not null
  )

  ,RailProdCosts as (
  select
    'Rail' as org_group,
	case when [O2] in ('Mainline', 'Shuttle') then 'Production' else [O2] end as [function],
    case when [O2] in ('Mainline', 'Shuttle') then 'Operations' else [O3] end as activity,
	coalesce([O4], 'Direct Cost') as workstream,
    case when [O2] in ('Mainline', 'Shuttle') then coalesce([O3], [O2]) else null end as location,
    null as equipment_type,
    null as equipment,
    coalesce([O6], [O5], 'Diesel') as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and substring(A.[Type], 1, 1) = 'C' and [O2] not in ('Maintenance', 'Overheads') and [O2] is not null
  )

  ,RailOverheads as (
  select
    'Rail' as org_group,
	[O2] as [function],
    [O3] as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    coalesce([O5], [O4]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and [O2]='Overheads'
  )

  ,RailMaintenance as (
  select
    'Rail' as org_group,
	[O2] as [function],
    [O3] as activity,
	case when [o6] is null then 'Supporting Cost' else [o5] end as workstream,
    null as location,
    case when [O4] <> 'Overheads' and [o5] is not null then [o4] else null end as equipment_type,
    null as equipment,
    coalesce([O6], [O5], [O4]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and [O2]='Maintenance'
  )

  ,RailTopLevel as (
  select
    [O1] as org_group,
	null as [function],
    null as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Rail' and [O2] is null
  )

  ,PortInflow as (
  select
    [O1] as org_group,
	'Production' as [function],
    [O2] as activity,
	'Operations' as workstream,
    [O4] as location,
    case when [O3] is null then null else 'Car Dumper' end as equipment_type,
    [O3] as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Inflow'
  )

  ,PortOutflow as (
  select
    [O1] as org_group,
	'Production' as [function],
    [O3] as activity,
	'Operations' as workstream,
    coalesce([O6], [O4]) as location,
    left([O7], len([o7])-1) as equipment_type,
    [O8] as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O3]='Outflow'
  )

  ,PortProductionCosts as (
  select
    [O1] as org_group,
	[O2] as [function],
    [O4] as activity,
	case when [O6] is null then [O4] else [O5] end as workstream,
    [O3] as location,
    left([O7], len([o7])-1) as equipment_type,
    [O8] as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O3]<>'Outflow' and [O2]='Production'
  )

  ,PortSiteMaintenance as (
  select
    [O1] as org_group,
	[O2] as [function],
    case when [O4]='Overheads' then 'Overheads' else 'Maintenance' end as activity,
	case when [O4]='Overheads' then [O5] else 'Maintenance' end as workstream,
    [O3] as location,
    case when [O4]='Overheads' then null else left([O4], len([O4])-1) end as equipment_type,
    case when [O4]='Overheads' then null else [O5] end as equipment,
    coalesce([O6], [O5]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Maintenance' and [O3] in ('Nelson Point', 'Finucane Island')
  )

  ,PortMaintenance as (
  select
    [O1] as org_group,
	[O2] as [function],
    [O3] as activity,
	case when [O5] is null then 'Operations' when [O4]='Overheads' then [O5] when [O4] in ('Nelson Point', 'Finucane Island') then 'Operations' when [O4]='Other' then null else [O4] end as workstream,
    case when [O4] in ('Nelson Point', 'Finucane Island') then [O4] else null end as location,
    null as equipment_type,
    null as equipment,
    coalesce([O6], [O5], [O4]) as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Maintenance' and [O3] not in ('Nelson Point', 'Finucane Island')
  )

  ,PortMarine as (
    select
    [O1] as org_group,
	[O2] as [function],
    [O3] as activity,
	case when [O5] is null then 'Operations' else [O4] end as workstream,
    null as location,
    case when [O3]='Demurrage' then [O4] else null end as equipment_type,
    null as equipment,
    case when [O3]='Demurrage' then 'Demurrage' else coalesce([O5], [O4]) end as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Marine'
  )

  ,PortOverheads as (
  select
    [O1] as org_group,
	[O2] as [function],
    [O3] as activity,
	'Operations' as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    [O4] as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2]='Overheads'
  )

  ,PortTopLevel as (
  select
    [O1] as org_group,
	null as [function],
    null as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	null as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 1) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='Port' and [O2] is null
  )

  ,FunctionsCosts as (
  select
    'WAIO' as org_group,
	[O1] as [function],
    [O2] as activity,
	[O3] as workstream,
    [O4] as location,
    [O5] as equipment_type,
    [O6] as equipment,
    [O7] as cost_type,
	[O8] as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 3) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1] not in ('EBITDA', 'Mines', 'Rail', 'Port')
  )

  ,Revenue as (
  select 'WAIO' as org_group, 'Revenue' as [function],
    'Sales' as activity,
	null as workstream,
    null as location,
    null as equipment_type,
    null as equipment,
    null as cost_type,
	[O2] as product,
    A.DisplayUnit as unit, coalesce(A.[SecLevel], 3) as sec_level,
    case substring(A.[Type], 1, 1) when 'C' then 1 else 0 end as is_cost,
    case substring(A.[Type], 2, 1) when 'L' then 1 else 0 end as is_lever,
    case substring(A.[Type], 2, 1) when 'C' then 1 else 0 end as is_calculated,
    case substring(A.[Type], 3, 1) when 'A' then 1 else 0 end as is_aggregate,
    case substring(A.[Type], 4, 1) when 'K' then 1 else 0 end as is_kpi,
    A.[Attribute] as name,
    A.[Value] as value, A.[Object Path] as path, A.[Attribute] as attribute
  from QAttrs A
  where [O1]='EBITDA'
  )

  ,AllAttrs as (
    select * from DrillProd
    union all select * from DrillFleetCostLevers
    union all select * from DrillOperationsCostLevers
    union all select * from DrillSummary
    union all select * from DrillStock
    union all select * from Blast
	union all select * from LoadHaul
	union all select * from MineServicesAndOverheads
	union all select * from ProcessingPlants
	union all select * from ProcessingPlantCosts
	union all select * from ProcessingNonAllocatedAndOverheads
	union all select * from ProcessingTopLevel
	union all select * from MinesOverheads
	union all select * from MinesTopLevel
	union all select * from OverheadsMines
	union all select * from RailVolume
	union all select * from RailProdCosts
	union all select * from RailOverheads
	union all select * from RailMaintenance
	union all select * from RailTopLevel
	union all select * from PortInflow
	union all select * from PortOutflow
	union all select * from PortProductionCosts
	union all select * from PortSiteMaintenance
	union all select * from PortMaintenance
	union all select * from PortMarine
	union all select * from PortOverheads
	union all select * from PortTopLevel
	union all select * from FunctionsCosts
	union all select * from Revenue
  )

  select * into #qerent_attrs_raw from AllAttrs;

  -- Update category values for each category
  with Names as (select distinct org_group from #qerent_attrs_raw)
  insert into vdt.org_group (og_name) select org_group from Names
  where not exists (select * from vdt.org_group where og_name=Names.org_group)
  and Names.org_group is not null;

  with Names as (select distinct [function] from #qerent_attrs_raw)
  insert into vdt.[function] (func_name) select [function] from Names
  where not exists (select * from vdt.[function] where func_name=Names.[function])
  and Names.[function] is not null;

  with Names as (select distinct activity from #qerent_attrs_raw)
  insert into vdt.activity (act_name) select activity from Names
  where not exists (select * from vdt.activity where act_name=Names.activity)
  and Names.activity is not null;

  with Names as (select distinct workstream from #qerent_attrs_raw)
  insert into vdt.workstream (ws_name) select workstream from Names
  where not exists (select * from vdt.workstream where ws_name=Names.workstream)
  and Names.workstream is not null;

  with Names as (select distinct location from #qerent_attrs_raw)
  insert into vdt.location (loc_name) select location from Names
  where not exists (select * from vdt.location where loc_name=Names.location)
  and Names.location is not null;

  with Names as (select distinct equipment_type from #qerent_attrs_raw)
  insert into vdt.eqp_type (eqp_type_name) select equipment_type from Names
  where not exists (select * from vdt.eqp_type where eqp_type_name=Names.equipment_type)
  and Names.equipment_type is not null;

  with Names as (select distinct equipment from #qerent_attrs_raw)
  insert into vdt.equipment (eqp_name) select equipment from Names
  where not exists (select * from vdt.equipment where eqp_name=Names.equipment)
  and Names.equipment is not null;

  with Names as (select distinct cost_type from #qerent_attrs_raw)
  insert into vdt.cost_type (ct_name) select cost_type from Names
  where not exists (select * from vdt.cost_type where ct_name=Names.cost_type)
  and Names.cost_type is not null;

  with Names as (select distinct product from #qerent_attrs_raw)
  insert into vdt.product (prod_name) select product from Names
  where not exists (select * from vdt.product where prod_name=Names.product)
  and Names.product is not null;
  

  -- Join back to the qerent attrs to get the category IDs
  with WithIds as (
	select I.name as attr_name, I.unit, I.sec_level, I.is_cost, I.is_lever, I.is_calculated, I.is_aggregate, I.is_kpi,
	  O.og_id, F.func_id, A.act_id, W.ws_id, L.loc_id, ET.eqp_type_id, E.eqp_id, C.ct_id, P.prod_id,
	  I.value, I.path as qerent_path, I.attribute as qerent_attribute, D.QerentAttrId as qerent_attr_id
	from #qerent_attrs_raw I
	inner join @data D on I.[path]=D.[Object Path] and I.attribute=D.Attribute
	left join vdt.org_group O on I.org_group=O.og_name
	left join vdt.[function] F on I.[function]=F.[func_name]
	left join vdt.activity A on I.activity=A.act_name
	left join vdt.workstream W on I.workstream=W.ws_name
	left join vdt.location L on I.location=L.loc_name
	left join vdt.eqp_type ET on I.equipment_type=ET.eqp_type_name
	left join vdt.equipment E on I.equipment=E.eqp_name
	left join vdt.cost_type C on I.cost_type=C.ct_name
	left join vdt.product P on I.product=P.prod_name
  )
  
  select * into #qerent_attrs from WithIds;

  -- Udate is_cost etc on existing attributes
  update vdt.attribute set unit=Q.unit, sec_level=Q.sec_level, is_cost=Q.is_cost, is_lever=Q.is_lever, is_calculated=Q.is_calculated,
                           is_aggregate=Q.is_aggregate, is_kpi=Q.is_kpi
  from #qerent_attrs Q inner join staging.qerent_attr_ids I on Q.qerent_path=I.object_path and Q.qerent_attribute=I.attr_name
  where attribute.attr_id=I.attr_id --and I.model_id=@model_id

  -- Add any new attributes to the database
  insert into vdt.attribute (attr_name, unit, sec_level, is_cost, is_lever, is_calculated, is_aggregate, is_kpi, og_id, func_id, act_id, ws_id, loc_id, eqp_type_id, eqp_id, ct_id, prod_id)
  select attr_name, coalesce(unit, ''), sec_level, is_cost, is_lever, is_calculated, is_aggregate, is_kpi, og_id, func_id, act_id, ws_id, loc_id, eqp_type_id, eqp_id, ct_id, prod_id
  from #qerent_attrs Q
  where not exists (select * from staging.qerent_attr_ids E where E.object_path=Q.qerent_path and E.attr_name=Q.qerent_attribute /*and E.model_id=@model_id*/);

  -- Update existing qerent_ids in the staging map (these could change due to a scale-out, etc.)
  update staging.qerent_attr_ids set qerent_attr_id=Q.qerent_attr_id
  from #qerent_attrs Q where qerent_attr_ids.object_path=Q.qerent_path and qerent_attr_ids.attr_name=Q.qerent_attribute;
  
  -- Add new attributes to the qerent_attr_ids map
  insert into staging.qerent_attr_ids (model_id, attr_id, object_path, attr_name, qerent_attr_id)
  select @model_id, A.attr_id, Q.qerent_path, Q.qerent_attribute, Q.qerent_attr_id
  from #qerent_attrs Q inner join vdt.attribute A
  on Q.attr_name=A.attr_name
  and coalesce(Q.og_id, -1)=coalesce(A.og_id, -1)
  and coalesce(Q.func_id, -1)=coalesce(A.func_id, -1)
  and coalesce(Q.act_id, -1)=coalesce(A.act_id, -1)
  and coalesce(Q.ws_id, -1)=coalesce(A.ws_id, -1)
  and coalesce(Q.loc_id, -1)=coalesce(A.loc_id, -1)
  and coalesce(Q.eqp_type_id, -1)=coalesce(A.eqp_type_id, -1)
  and coalesce(Q.eqp_id, -1)=coalesce(A.eqp_id, -1)
  and coalesce(Q.ct_id, -1)=coalesce(A.ct_id, -1)
  and coalesce(Q.prod_id, -1)=coalesce(A.prod_id, -1)
  and not exists (select * from staging.qerent_attr_ids X where object_path=Q.qerent_path and attr_name=Q.qerent_attribute)

  -- Overwrite the dependency map for any attributes that were listed in @data
  -- NB we are relying on the script ensuring that attributes are in the @deps map if and only if they're in the @data table
  delete from vdt.attribute_dependency where attr_id in (select A.attr_id
  from staging.qerent_attr_ids A inner join @data D on A.object_path=D.[Object Path] and A.attr_name=D.Attribute);

  insert into vdt.attribute_dependency (attr_id, depends_on_attr_id)
  select X.attr_id, Y.attr_id
  from @deps D
  inner join staging.qerent_attr_ids X on D.QerentAttrId=X.qerent_attr_id
  inner join staging.qerent_attr_ids Y on D.DependsOnQerentAttrId=Y.qerent_attr_id
  where X.attr_id <> Y.attr_id;

  -- Copy data over from the model
  declare @dataset_id int = null;
  select @dataset_id = dataset_id from vdt.dataset where origin='model' and dataset_name='Model Data - ' + @filename;
  if @dataset_id is null
  begin
    declare @cat_id int = (select category_id from vdt.dataset_category where category_name='Scenario');
	insert into vdt.dataset (model_id, dataset_name, origin, category_id, last_update)
	values (@model_id, 'Model Data - ' + @filename, 'model', @cat_id, current_timestamp);
	set @dataset_id = SCOPE_IDENTITY();
  end
  if @dataset_id is not null
  begin
    update vdt.dataset set model_id=@model_id where dataset_id=@dataset_id;
    delete from vdt.value where dataset_id=@dataset_id;
	insert into vdt.value (dataset_id, attr_id, value)
	select @dataset_id, I.attr_id, Q.value from staging.qerent_attr_ids I
	inner join #qerent_attrs Q on I.[object_path] = Q.[qerent_path] and I.[attr_name] = Q.[qerent_attribute] --and I.model_id=@model_id;
  end
  
  -- NB the Qerent Attr Id for the top of tree is not the same as the database attr_id...
  declare @top_of_tree_attr_id int = (select attr_id from staging.qerent_attr_ids where qerent_attr_id=@top_of_tree_qattr_id);

  update vdt.model set
    top_of_tree_attr_id = @top_of_tree_attr_id,
	[filename] = @filename
  where model_id = @model_id

  drop table #qerent_attrs;
  drop table #qerent_attrs_raw;
end


go

alter procedure [vdt].[sp_get_datasets]
   @user_id int
AS 
BEGIN 
     SET NOCOUNT ON 

SELECT Dataset.[dataset_id]
		 ,Dataset.[dataset_name]
		 ,Category.[category_name]
		 ,[Data].value as ebitda
		 ,[Format].[format] as ebitda_unit
         ,CASE WHEN Model.is_active = 1 THEN [LockUser].[login] ELSE NULL END as locked_by
		 ,CASE WHEN Model.is_active = 1 THEN [LockUser].[user_id] ELSE NULL END as locked_by_user_id
         ,[BaseDataset].dataset_name as base_dataset_name
		 ,[BaseDataset].dataset_id as base_dataset_id
         ,coalesce([OwnerUser].[login] ,'System')as owned_by
         ,[OwnerUser].[user_id] as owned_by_id
		 ,Dataset.[last_update]
		 ,Dataset.[description]
		 ,Scenario.scenario_id
         ,coalesce(Scenario.[is_public],'True') as is_public
         ,CASE WHEN Scenario.scenario_id IS NULL THEN 0 ELSE 1 END as is_whatif
		 ,CASE WHEN is_public = 1 OR is_public IS NULL THEN 'Public' ELSE 'Private' END as access_level
		  ,Model.is_active
  FROM [vdt].[dataset] Dataset
  inner join vdt.model Model on Dataset.model_id=Model.model_id
  left join vdt.scenario Scenario on Scenario.view_dataset_id = Dataset.dataset_id
  left join vdt.[dataset] [BaseDataset] on BaseDataset.dataset_id =  Scenario.base_dataset_id
  left join vdt.[user] [LockUser] on Scenario.editing_by = [LockUser].[user_id]
  left join vdt.[user] [OwnerUser] on Scenario.created_by = [OwnerUser].[user_id]
  left join vdt.[data] [Data] on [Data].dataset_id = [Dataset].dataset_id 
  left join vdt.[unit_format] [Format] on [Format].unit = [Data].attribute_unit 
  left join vdt.[dataset_category] [Category] on [Dataset].category_id = [Category].category_id 
    WHERE Dataset.deleted = 0
  AND [Data].attr_id = Model.top_of_tree_attr_id
  AND (
  coalesce(Scenario.[is_public],'True') = 1
  OR ( is_public = 0 AND ((select is_power_user from vdt.[user] where [user_id] = @user_id) = 1) 
  OR Scenario.created_by = @user_id)
  )

END 


go


create procedure [vdt].[sp_sync_insert_model]
   @model_group_name nvarchar(100),
   @no_of_instances int,
   @file_name nvarchar(256),
   @model_version int,
   @connection_string nvarchar(MAX),
   @model_id int 
AS 

BEGIN 
     SET NOCOUNT ON 
	 
	 SET IDENTITY_INSERT [vdt].[model] ON	
	
	declare @model_group_id int
	 INSERT INTO [vdt].[model_group] ([name],[is_offline],[instances])
     VALUES (@model_group_name,0,@no_of_instances)

	  select @model_group_id= CAST(scope_identity() AS int)

	 INSERT INTO [vdt].[model] ([model_id],[filename],[file_date],[is_active],[version],[model_group_id],[connection_string])
			VALUES (@model_id,@file_name,GETDATE(),1,@model_version,@model_group_id,@connection_string)

 select @model_group_id,@model_id;

  SET IDENTITY_INSERT [vdt].[model] OFF

END  

go

create procedure [vdt].[sp_sync_update_model]
   @model_group_name nvarchar(100),
   @no_of_instances int,
   @file_name nvarchar(256),
   @model_version int,
   @connection_string nvarchar(MAX),
   @model_id int
AS 

BEGIN 
     SET NOCOUNT ON 


	 update [vdt].[model] set [filename] = @file_name,[file_date] = GETDATE() ,[is_active] = 1,[version] =@model_version,[connection_string]=@connection_string
	 where model_id =@model_id


END  

go
ALTER procedure [vdt].[sp_get_user_by_name]
       @login nvarchar(128)                
AS 
BEGIN 
     SET NOCOUNT ON 

SELECT [user_id]
      ,[login]
      ,[ad_name]
	  ,[sec_level]
      ,[pwd_hash]
	  ,[is_power_user]
	  ,[is_admin_user]
  FROM [vdt].[user]
  where [login] = @login

END 

go

commit transaction Version17;
go


PRINT 'Database has been updated successfully to version 17'
set noexec off;
go
